
p2_prev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a90  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004c28  08004c28  00014c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cdc  08004cdc  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ce4  08004ce4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce4  08004ce4  00014ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000001c  08004d08  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004d08  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a3a  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027aa  00000000  00000000  00031a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00034230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  000351a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017baa  00000000  00000000  00036030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140e1  00000000  00000000  0004dbda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009116e  00000000  00000000  00061cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2e29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042c8  00000000  00000000  000f2e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004c10 	.word	0x08004c10

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08004c10 	.word	0x08004c10

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_drsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001ec:	e002      	b.n	80001f4 <__adddf3>
 80001ee:	bf00      	nop

080001f0 <__aeabi_dsub>:
 80001f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f4 <__adddf3>:
 80001f4:	b530      	push	{r4, r5, lr}
 80001f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001fe:	ea94 0f05 	teq	r4, r5
 8000202:	bf08      	it	eq
 8000204:	ea90 0f02 	teqeq	r0, r2
 8000208:	bf1f      	itttt	ne
 800020a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800020e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000212:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000216:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021a:	f000 80e2 	beq.w	80003e2 <__adddf3+0x1ee>
 800021e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000222:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000226:	bfb8      	it	lt
 8000228:	426d      	neglt	r5, r5
 800022a:	dd0c      	ble.n	8000246 <__adddf3+0x52>
 800022c:	442c      	add	r4, r5
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	ea82 0000 	eor.w	r0, r2, r0
 800023a:	ea83 0101 	eor.w	r1, r3, r1
 800023e:	ea80 0202 	eor.w	r2, r0, r2
 8000242:	ea81 0303 	eor.w	r3, r1, r3
 8000246:	2d36      	cmp	r5, #54	; 0x36
 8000248:	bf88      	it	hi
 800024a:	bd30      	pophi	{r4, r5, pc}
 800024c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000250:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000254:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000258:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x70>
 800025e:	4240      	negs	r0, r0
 8000260:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000264:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800026c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x84>
 8000272:	4252      	negs	r2, r2
 8000274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000278:	ea94 0f05 	teq	r4, r5
 800027c:	f000 80a7 	beq.w	80003ce <__adddf3+0x1da>
 8000280:	f1a4 0401 	sub.w	r4, r4, #1
 8000284:	f1d5 0e20 	rsbs	lr, r5, #32
 8000288:	db0d      	blt.n	80002a6 <__adddf3+0xb2>
 800028a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800028e:	fa22 f205 	lsr.w	r2, r2, r5
 8000292:	1880      	adds	r0, r0, r2
 8000294:	f141 0100 	adc.w	r1, r1, #0
 8000298:	fa03 f20e 	lsl.w	r2, r3, lr
 800029c:	1880      	adds	r0, r0, r2
 800029e:	fa43 f305 	asr.w	r3, r3, r5
 80002a2:	4159      	adcs	r1, r3
 80002a4:	e00e      	b.n	80002c4 <__adddf3+0xd0>
 80002a6:	f1a5 0520 	sub.w	r5, r5, #32
 80002aa:	f10e 0e20 	add.w	lr, lr, #32
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b4:	bf28      	it	cs
 80002b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	18c0      	adds	r0, r0, r3
 80002c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c8:	d507      	bpl.n	80002da <__adddf3+0xe6>
 80002ca:	f04f 0e00 	mov.w	lr, #0
 80002ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002de:	d31b      	bcc.n	8000318 <__adddf3+0x124>
 80002e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e4:	d30c      	bcc.n	8000300 <__adddf3+0x10c>
 80002e6:	0849      	lsrs	r1, r1, #1
 80002e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f0:	f104 0401 	add.w	r4, r4, #1
 80002f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002fc:	f080 809a 	bcs.w	8000434 <__adddf3+0x240>
 8000300:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000304:	bf08      	it	eq
 8000306:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030a:	f150 0000 	adcs.w	r0, r0, #0
 800030e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000312:	ea41 0105 	orr.w	r1, r1, r5
 8000316:	bd30      	pop	{r4, r5, pc}
 8000318:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800031c:	4140      	adcs	r0, r0
 800031e:	eb41 0101 	adc.w	r1, r1, r1
 8000322:	3c01      	subs	r4, #1
 8000324:	bf28      	it	cs
 8000326:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032a:	d2e9      	bcs.n	8000300 <__adddf3+0x10c>
 800032c:	f091 0f00 	teq	r1, #0
 8000330:	bf04      	itt	eq
 8000332:	4601      	moveq	r1, r0
 8000334:	2000      	moveq	r0, #0
 8000336:	fab1 f381 	clz	r3, r1
 800033a:	bf08      	it	eq
 800033c:	3320      	addeq	r3, #32
 800033e:	f1a3 030b 	sub.w	r3, r3, #11
 8000342:	f1b3 0220 	subs.w	r2, r3, #32
 8000346:	da0c      	bge.n	8000362 <__adddf3+0x16e>
 8000348:	320c      	adds	r2, #12
 800034a:	dd08      	ble.n	800035e <__adddf3+0x16a>
 800034c:	f102 0c14 	add.w	ip, r2, #20
 8000350:	f1c2 020c 	rsb	r2, r2, #12
 8000354:	fa01 f00c 	lsl.w	r0, r1, ip
 8000358:	fa21 f102 	lsr.w	r1, r1, r2
 800035c:	e00c      	b.n	8000378 <__adddf3+0x184>
 800035e:	f102 0214 	add.w	r2, r2, #20
 8000362:	bfd8      	it	le
 8000364:	f1c2 0c20 	rsble	ip, r2, #32
 8000368:	fa01 f102 	lsl.w	r1, r1, r2
 800036c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000370:	bfdc      	itt	le
 8000372:	ea41 010c 	orrle.w	r1, r1, ip
 8000376:	4090      	lslle	r0, r2
 8000378:	1ae4      	subs	r4, r4, r3
 800037a:	bfa2      	ittt	ge
 800037c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000380:	4329      	orrge	r1, r5
 8000382:	bd30      	popge	{r4, r5, pc}
 8000384:	ea6f 0404 	mvn.w	r4, r4
 8000388:	3c1f      	subs	r4, #31
 800038a:	da1c      	bge.n	80003c6 <__adddf3+0x1d2>
 800038c:	340c      	adds	r4, #12
 800038e:	dc0e      	bgt.n	80003ae <__adddf3+0x1ba>
 8000390:	f104 0414 	add.w	r4, r4, #20
 8000394:	f1c4 0220 	rsb	r2, r4, #32
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f302 	lsl.w	r3, r1, r2
 80003a0:	ea40 0003 	orr.w	r0, r0, r3
 80003a4:	fa21 f304 	lsr.w	r3, r1, r4
 80003a8:	ea45 0103 	orr.w	r1, r5, r3
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f1c4 040c 	rsb	r4, r4, #12
 80003b2:	f1c4 0220 	rsb	r2, r4, #32
 80003b6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ba:	fa01 f304 	lsl.w	r3, r1, r4
 80003be:	ea40 0003 	orr.w	r0, r0, r3
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f094 0f00 	teq	r4, #0
 80003d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003d6:	bf06      	itte	eq
 80003d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003dc:	3401      	addeq	r4, #1
 80003de:	3d01      	subne	r5, #1
 80003e0:	e74e      	b.n	8000280 <__adddf3+0x8c>
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf18      	it	ne
 80003e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003ec:	d029      	beq.n	8000442 <__adddf3+0x24e>
 80003ee:	ea94 0f05 	teq	r4, r5
 80003f2:	bf08      	it	eq
 80003f4:	ea90 0f02 	teqeq	r0, r2
 80003f8:	d005      	beq.n	8000406 <__adddf3+0x212>
 80003fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80003fe:	bf04      	itt	eq
 8000400:	4619      	moveq	r1, r3
 8000402:	4610      	moveq	r0, r2
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	ea91 0f03 	teq	r1, r3
 800040a:	bf1e      	ittt	ne
 800040c:	2100      	movne	r1, #0
 800040e:	2000      	movne	r0, #0
 8000410:	bd30      	popne	{r4, r5, pc}
 8000412:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000416:	d105      	bne.n	8000424 <__adddf3+0x230>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	4149      	adcs	r1, r1
 800041c:	bf28      	it	cs
 800041e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000422:	bd30      	pop	{r4, r5, pc}
 8000424:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000428:	bf3c      	itt	cc
 800042a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800042e:	bd30      	popcc	{r4, r5, pc}
 8000430:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000434:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800043c:	f04f 0000 	mov.w	r0, #0
 8000440:	bd30      	pop	{r4, r5, pc}
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf1a      	itte	ne
 8000448:	4619      	movne	r1, r3
 800044a:	4610      	movne	r0, r2
 800044c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000450:	bf1c      	itt	ne
 8000452:	460b      	movne	r3, r1
 8000454:	4602      	movne	r2, r0
 8000456:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045a:	bf06      	itte	eq
 800045c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000460:	ea91 0f03 	teqeq	r1, r3
 8000464:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	bf00      	nop

0800046c <__aeabi_ui2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f04f 0500 	mov.w	r5, #0
 8000484:	f04f 0100 	mov.w	r1, #0
 8000488:	e750      	b.n	800032c <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_i2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a4:	bf48      	it	mi
 80004a6:	4240      	negmi	r0, r0
 80004a8:	f04f 0100 	mov.w	r1, #0
 80004ac:	e73e      	b.n	800032c <__adddf3+0x138>
 80004ae:	bf00      	nop

080004b0 <__aeabi_f2d>:
 80004b0:	0042      	lsls	r2, r0, #1
 80004b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004be:	bf1f      	itttt	ne
 80004c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004cc:	4770      	bxne	lr
 80004ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d2:	bf08      	it	eq
 80004d4:	4770      	bxeq	lr
 80004d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004da:	bf04      	itt	eq
 80004dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e0:	4770      	bxeq	lr
 80004e2:	b530      	push	{r4, r5, lr}
 80004e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f0:	e71c      	b.n	800032c <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_ul2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f04f 0500 	mov.w	r5, #0
 8000502:	e00a      	b.n	800051a <__aeabi_l2d+0x16>

08000504 <__aeabi_l2d>:
 8000504:	ea50 0201 	orrs.w	r2, r0, r1
 8000508:	bf08      	it	eq
 800050a:	4770      	bxeq	lr
 800050c:	b530      	push	{r4, r5, lr}
 800050e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000512:	d502      	bpl.n	800051a <__aeabi_l2d+0x16>
 8000514:	4240      	negs	r0, r0
 8000516:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000522:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000526:	f43f aed8 	beq.w	80002da <__adddf3+0xe6>
 800052a:	f04f 0203 	mov.w	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000542:	f1c2 0320 	rsb	r3, r2, #32
 8000546:	fa00 fc03 	lsl.w	ip, r0, r3
 800054a:	fa20 f002 	lsr.w	r0, r0, r2
 800054e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000552:	ea40 000e 	orr.w	r0, r0, lr
 8000556:	fa21 f102 	lsr.w	r1, r1, r2
 800055a:	4414      	add	r4, r2
 800055c:	e6bd      	b.n	80002da <__adddf3+0xe6>
 800055e:	bf00      	nop

08000560 <__aeabi_dmul>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000566:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056e:	bf1d      	ittte	ne
 8000570:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000574:	ea94 0f0c 	teqne	r4, ip
 8000578:	ea95 0f0c 	teqne	r5, ip
 800057c:	f000 f8de 	bleq	800073c <__aeabi_dmul+0x1dc>
 8000580:	442c      	add	r4, r5
 8000582:	ea81 0603 	eor.w	r6, r1, r3
 8000586:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000592:	bf18      	it	ne
 8000594:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800059c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a0:	d038      	beq.n	8000614 <__aeabi_dmul+0xb4>
 80005a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b6:	f04f 0600 	mov.w	r6, #0
 80005ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005be:	f09c 0f00 	teq	ip, #0
 80005c2:	bf18      	it	ne
 80005c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d4:	d204      	bcs.n	80005e0 <__aeabi_dmul+0x80>
 80005d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005da:	416d      	adcs	r5, r5
 80005dc:	eb46 0606 	adc.w	r6, r6, r6
 80005e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f8:	bf88      	it	hi
 80005fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fe:	d81e      	bhi.n	800063e <__aeabi_dmul+0xde>
 8000600:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	bd70      	pop	{r4, r5, r6, pc}
 8000614:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000618:	ea46 0101 	orr.w	r1, r6, r1
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	ea81 0103 	eor.w	r1, r1, r3
 8000624:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000628:	bfc2      	ittt	gt
 800062a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000632:	bd70      	popgt	{r4, r5, r6, pc}
 8000634:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000638:	f04f 0e00 	mov.w	lr, #0
 800063c:	3c01      	subs	r4, #1
 800063e:	f300 80ab 	bgt.w	8000798 <__aeabi_dmul+0x238>
 8000642:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000646:	bfde      	ittt	le
 8000648:	2000      	movle	r0, #0
 800064a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064e:	bd70      	pople	{r4, r5, r6, pc}
 8000650:	f1c4 0400 	rsb	r4, r4, #0
 8000654:	3c20      	subs	r4, #32
 8000656:	da35      	bge.n	80006c4 <__aeabi_dmul+0x164>
 8000658:	340c      	adds	r4, #12
 800065a:	dc1b      	bgt.n	8000694 <__aeabi_dmul+0x134>
 800065c:	f104 0414 	add.w	r4, r4, #20
 8000660:	f1c4 0520 	rsb	r5, r4, #32
 8000664:	fa00 f305 	lsl.w	r3, r0, r5
 8000668:	fa20 f004 	lsr.w	r0, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea40 0002 	orr.w	r0, r0, r2
 8000674:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000678:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800067c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000680:	fa21 f604 	lsr.w	r6, r1, r4
 8000684:	eb42 0106 	adc.w	r1, r2, r6
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f1c4 040c 	rsb	r4, r4, #12
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f304 	lsl.w	r3, r0, r4
 80006a0:	fa20 f005 	lsr.w	r0, r0, r5
 80006a4:	fa01 f204 	lsl.w	r2, r1, r4
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b4:	f141 0100 	adc.w	r1, r1, #0
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f205 	lsl.w	r2, r0, r5
 80006cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d0:	fa20 f304 	lsr.w	r3, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea43 0302 	orr.w	r3, r3, r2
 80006dc:	fa21 f004 	lsr.w	r0, r1, r4
 80006e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	fa21 f204 	lsr.w	r2, r1, r4
 80006e8:	ea20 0002 	bic.w	r0, r0, r2
 80006ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f094 0f00 	teq	r4, #0
 8000700:	d10f      	bne.n	8000722 <__aeabi_dmul+0x1c2>
 8000702:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000706:	0040      	lsls	r0, r0, #1
 8000708:	eb41 0101 	adc.w	r1, r1, r1
 800070c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3c01      	subeq	r4, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1a6>
 8000716:	ea41 0106 	orr.w	r1, r1, r6
 800071a:	f095 0f00 	teq	r5, #0
 800071e:	bf18      	it	ne
 8000720:	4770      	bxne	lr
 8000722:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000726:	0052      	lsls	r2, r2, #1
 8000728:	eb43 0303 	adc.w	r3, r3, r3
 800072c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3d01      	subeq	r5, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1c6>
 8000736:	ea43 0306 	orr.w	r3, r3, r6
 800073a:	4770      	bx	lr
 800073c:	ea94 0f0c 	teq	r4, ip
 8000740:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000744:	bf18      	it	ne
 8000746:	ea95 0f0c 	teqne	r5, ip
 800074a:	d00c      	beq.n	8000766 <__aeabi_dmul+0x206>
 800074c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000750:	bf18      	it	ne
 8000752:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000756:	d1d1      	bne.n	80006fc <__aeabi_dmul+0x19c>
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000760:	f04f 0000 	mov.w	r0, #0
 8000764:	bd70      	pop	{r4, r5, r6, pc}
 8000766:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076a:	bf06      	itte	eq
 800076c:	4610      	moveq	r0, r2
 800076e:	4619      	moveq	r1, r3
 8000770:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000774:	d019      	beq.n	80007aa <__aeabi_dmul+0x24a>
 8000776:	ea94 0f0c 	teq	r4, ip
 800077a:	d102      	bne.n	8000782 <__aeabi_dmul+0x222>
 800077c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000780:	d113      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000782:	ea95 0f0c 	teq	r5, ip
 8000786:	d105      	bne.n	8000794 <__aeabi_dmul+0x234>
 8000788:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800078c:	bf1c      	itt	ne
 800078e:	4610      	movne	r0, r2
 8000790:	4619      	movne	r1, r3
 8000792:	d10a      	bne.n	80007aa <__aeabi_dmul+0x24a>
 8000794:	ea81 0103 	eor.w	r1, r1, r3
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a4:	f04f 0000 	mov.w	r0, #0
 80007a8:	bd70      	pop	{r4, r5, r6, pc}
 80007aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b2:	bd70      	pop	{r4, r5, r6, pc}

080007b4 <__aeabi_ddiv>:
 80007b4:	b570      	push	{r4, r5, r6, lr}
 80007b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c2:	bf1d      	ittte	ne
 80007c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c8:	ea94 0f0c 	teqne	r4, ip
 80007cc:	ea95 0f0c 	teqne	r5, ip
 80007d0:	f000 f8a7 	bleq	8000922 <__aeabi_ddiv+0x16e>
 80007d4:	eba4 0405 	sub.w	r4, r4, r5
 80007d8:	ea81 0e03 	eor.w	lr, r1, r3
 80007dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e4:	f000 8088 	beq.w	80008f8 <__aeabi_ddiv+0x144>
 80007e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000800:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000804:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000808:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800080c:	429d      	cmp	r5, r3
 800080e:	bf08      	it	eq
 8000810:	4296      	cmpeq	r6, r2
 8000812:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000816:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081a:	d202      	bcs.n	8000822 <__aeabi_ddiv+0x6e>
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	1ab6      	subs	r6, r6, r2
 8000824:	eb65 0503 	sbc.w	r5, r5, r3
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000832:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 000c 	orrcs.w	r0, r0, ip
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000890:	ea55 0e06 	orrs.w	lr, r5, r6
 8000894:	d018      	beq.n	80008c8 <__aeabi_ddiv+0x114>
 8000896:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b2:	d1c0      	bne.n	8000836 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	d10b      	bne.n	80008d2 <__aeabi_ddiv+0x11e>
 80008ba:	ea41 0100 	orr.w	r1, r1, r0
 80008be:	f04f 0000 	mov.w	r0, #0
 80008c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c6:	e7b6      	b.n	8000836 <__aeabi_ddiv+0x82>
 80008c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008cc:	bf04      	itt	eq
 80008ce:	4301      	orreq	r1, r0
 80008d0:	2000      	moveq	r0, #0
 80008d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d6:	bf88      	it	hi
 80008d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008dc:	f63f aeaf 	bhi.w	800063e <__aeabi_dmul+0xde>
 80008e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e4:	bf04      	itt	eq
 80008e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ee:	f150 0000 	adcs.w	r0, r0, #0
 80008f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	pop	{r4, r5, r6, pc}
 80008f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000900:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000904:	bfc2      	ittt	gt
 8000906:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090e:	bd70      	popgt	{r4, r5, r6, pc}
 8000910:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000914:	f04f 0e00 	mov.w	lr, #0
 8000918:	3c01      	subs	r4, #1
 800091a:	e690      	b.n	800063e <__aeabi_dmul+0xde>
 800091c:	ea45 0e06 	orr.w	lr, r5, r6
 8000920:	e68d      	b.n	800063e <__aeabi_dmul+0xde>
 8000922:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000926:	ea94 0f0c 	teq	r4, ip
 800092a:	bf08      	it	eq
 800092c:	ea95 0f0c 	teqeq	r5, ip
 8000930:	f43f af3b 	beq.w	80007aa <__aeabi_dmul+0x24a>
 8000934:	ea94 0f0c 	teq	r4, ip
 8000938:	d10a      	bne.n	8000950 <__aeabi_ddiv+0x19c>
 800093a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093e:	f47f af34 	bne.w	80007aa <__aeabi_dmul+0x24a>
 8000942:	ea95 0f0c 	teq	r5, ip
 8000946:	f47f af25 	bne.w	8000794 <__aeabi_dmul+0x234>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e72c      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000950:	ea95 0f0c 	teq	r5, ip
 8000954:	d106      	bne.n	8000964 <__aeabi_ddiv+0x1b0>
 8000956:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095a:	f43f aefd 	beq.w	8000758 <__aeabi_dmul+0x1f8>
 800095e:	4610      	mov	r0, r2
 8000960:	4619      	mov	r1, r3
 8000962:	e722      	b.n	80007aa <__aeabi_dmul+0x24a>
 8000964:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000968:	bf18      	it	ne
 800096a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096e:	f47f aec5 	bne.w	80006fc <__aeabi_dmul+0x19c>
 8000972:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000976:	f47f af0d 	bne.w	8000794 <__aeabi_dmul+0x234>
 800097a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097e:	f47f aeeb 	bne.w	8000758 <__aeabi_dmul+0x1f8>
 8000982:	e712      	b.n	80007aa <__aeabi_dmul+0x24a>

08000984 <__gedf2>:
 8000984:	f04f 3cff 	mov.w	ip, #4294967295
 8000988:	e006      	b.n	8000998 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__ledf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	e002      	b.n	8000998 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__cmpdf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	f84d cd04 	str.w	ip, [sp, #-4]!
 800099c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ae:	d01b      	beq.n	80009e8 <__cmpdf2+0x54>
 80009b0:	b001      	add	sp, #4
 80009b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009b6:	bf0c      	ite	eq
 80009b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009bc:	ea91 0f03 	teqne	r1, r3
 80009c0:	bf02      	ittt	eq
 80009c2:	ea90 0f02 	teqeq	r0, r2
 80009c6:	2000      	moveq	r0, #0
 80009c8:	4770      	bxeq	lr
 80009ca:	f110 0f00 	cmn.w	r0, #0
 80009ce:	ea91 0f03 	teq	r1, r3
 80009d2:	bf58      	it	pl
 80009d4:	4299      	cmppl	r1, r3
 80009d6:	bf08      	it	eq
 80009d8:	4290      	cmpeq	r0, r2
 80009da:	bf2c      	ite	cs
 80009dc:	17d8      	asrcs	r0, r3, #31
 80009de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e2:	f040 0001 	orr.w	r0, r0, #1
 80009e6:	4770      	bx	lr
 80009e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d102      	bne.n	80009f8 <__cmpdf2+0x64>
 80009f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009f6:	d107      	bne.n	8000a08 <__cmpdf2+0x74>
 80009f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a00:	d1d6      	bne.n	80009b0 <__cmpdf2+0x1c>
 8000a02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a06:	d0d3      	beq.n	80009b0 <__cmpdf2+0x1c>
 8000a08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdrcmple>:
 8000a10:	4684      	mov	ip, r0
 8000a12:	4610      	mov	r0, r2
 8000a14:	4662      	mov	r2, ip
 8000a16:	468c      	mov	ip, r1
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	e000      	b.n	8000a20 <__aeabi_cdcmpeq>
 8000a1e:	bf00      	nop

08000a20 <__aeabi_cdcmpeq>:
 8000a20:	b501      	push	{r0, lr}
 8000a22:	f7ff ffb7 	bl	8000994 <__cmpdf2>
 8000a26:	2800      	cmp	r0, #0
 8000a28:	bf48      	it	mi
 8000a2a:	f110 0f00 	cmnmi.w	r0, #0
 8000a2e:	bd01      	pop	{r0, pc}

08000a30 <__aeabi_dcmpeq>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff fff4 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a38:	bf0c      	ite	eq
 8000a3a:	2001      	moveq	r0, #1
 8000a3c:	2000      	movne	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmplt>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffea 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a4c:	bf34      	ite	cc
 8000a4e:	2001      	movcc	r0, #1
 8000a50:	2000      	movcs	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmple>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffe0 	bl	8000a20 <__aeabi_cdcmpeq>
 8000a60:	bf94      	ite	ls
 8000a62:	2001      	movls	r0, #1
 8000a64:	2000      	movhi	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_dcmpge>:
 8000a6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a70:	f7ff ffce 	bl	8000a10 <__aeabi_cdrcmple>
 8000a74:	bf94      	ite	ls
 8000a76:	2001      	movls	r0, #1
 8000a78:	2000      	movhi	r0, #0
 8000a7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7e:	bf00      	nop

08000a80 <__aeabi_dcmpgt>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff ffc4 	bl	8000a10 <__aeabi_cdrcmple>
 8000a88:	bf34      	ite	cc
 8000a8a:	2001      	movcc	r0, #1
 8000a8c:	2000      	movcs	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmpun>:
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x10>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d10a      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d102      	bne.n	8000ab4 <__aeabi_dcmpun+0x20>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_dcmpun+0x26>
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0001 	mov.w	r0, #1
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2iz>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac8:	d215      	bcs.n	8000af6 <__aeabi_d2iz+0x36>
 8000aca:	d511      	bpl.n	8000af0 <__aeabi_d2iz+0x30>
 8000acc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad4:	d912      	bls.n	8000afc <__aeabi_d2iz+0x3c>
 8000ad6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ade:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	bf18      	it	ne
 8000aec:	4240      	negne	r0, r0
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afa:	d105      	bne.n	8000b08 <__aeabi_d2iz+0x48>
 8000afc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	bf08      	it	eq
 8000b02:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop

08000b10 <__aeabi_uldivmod>:
 8000b10:	b953      	cbnz	r3, 8000b28 <__aeabi_uldivmod+0x18>
 8000b12:	b94a      	cbnz	r2, 8000b28 <__aeabi_uldivmod+0x18>
 8000b14:	2900      	cmp	r1, #0
 8000b16:	bf08      	it	eq
 8000b18:	2800      	cmpeq	r0, #0
 8000b1a:	bf1c      	itt	ne
 8000b1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b20:	f04f 30ff 	movne.w	r0, #4294967295
 8000b24:	f000 b974 	b.w	8000e10 <__aeabi_idiv0>
 8000b28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b30:	f000 f806 	bl	8000b40 <__udivmoddi4>
 8000b34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b3c:	b004      	add	sp, #16
 8000b3e:	4770      	bx	lr

08000b40 <__udivmoddi4>:
 8000b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b44:	9d08      	ldr	r5, [sp, #32]
 8000b46:	4604      	mov	r4, r0
 8000b48:	468e      	mov	lr, r1
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d14d      	bne.n	8000bea <__udivmoddi4+0xaa>
 8000b4e:	428a      	cmp	r2, r1
 8000b50:	4694      	mov	ip, r2
 8000b52:	d969      	bls.n	8000c28 <__udivmoddi4+0xe8>
 8000b54:	fab2 f282 	clz	r2, r2
 8000b58:	b152      	cbz	r2, 8000b70 <__udivmoddi4+0x30>
 8000b5a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5e:	f1c2 0120 	rsb	r1, r2, #32
 8000b62:	fa20 f101 	lsr.w	r1, r0, r1
 8000b66:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b6a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6e:	4094      	lsls	r4, r2
 8000b70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b74:	0c21      	lsrs	r1, r4, #16
 8000b76:	fbbe f6f8 	udiv	r6, lr, r8
 8000b7a:	fa1f f78c 	uxth.w	r7, ip
 8000b7e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b82:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b86:	fb06 f107 	mul.w	r1, r6, r7
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	d90a      	bls.n	8000ba4 <__udivmoddi4+0x64>
 8000b8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b96:	f080 811f 	bcs.w	8000dd8 <__udivmoddi4+0x298>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 811c 	bls.w	8000dd8 <__udivmoddi4+0x298>
 8000ba0:	3e02      	subs	r6, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 f707 	mul.w	r7, r0, r7
 8000bb8:	42a7      	cmp	r7, r4
 8000bba:	d90a      	bls.n	8000bd2 <__udivmoddi4+0x92>
 8000bbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc4:	f080 810a 	bcs.w	8000ddc <__udivmoddi4+0x29c>
 8000bc8:	42a7      	cmp	r7, r4
 8000bca:	f240 8107 	bls.w	8000ddc <__udivmoddi4+0x29c>
 8000bce:	4464      	add	r4, ip
 8000bd0:	3802      	subs	r0, #2
 8000bd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd6:	1be4      	subs	r4, r4, r7
 8000bd8:	2600      	movs	r6, #0
 8000bda:	b11d      	cbz	r5, 8000be4 <__udivmoddi4+0xa4>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c5 4300 	strd	r4, r3, [r5]
 8000be4:	4631      	mov	r1, r6
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xc2>
 8000bee:	2d00      	cmp	r5, #0
 8000bf0:	f000 80ef 	beq.w	8000dd2 <__udivmoddi4+0x292>
 8000bf4:	2600      	movs	r6, #0
 8000bf6:	e9c5 0100 	strd	r0, r1, [r5]
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	4631      	mov	r1, r6
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f683 	clz	r6, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d14a      	bne.n	8000ca0 <__udivmoddi4+0x160>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd4>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80f9 	bhi.w	8000e06 <__udivmoddi4+0x2c6>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	469e      	mov	lr, r3
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa4>
 8000c22:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa4>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xec>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 8092 	bne.w	8000d5a <__udivmoddi4+0x21a>
 8000c36:	eba1 010c 	sub.w	r1, r1, ip
 8000c3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3e:	fa1f fe8c 	uxth.w	lr, ip
 8000c42:	2601      	movs	r6, #1
 8000c44:	0c20      	lsrs	r0, r4, #16
 8000c46:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c4a:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c52:	fb0e f003 	mul.w	r0, lr, r3
 8000c56:	4288      	cmp	r0, r1
 8000c58:	d908      	bls.n	8000c6c <__udivmoddi4+0x12c>
 8000c5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x12a>
 8000c64:	4288      	cmp	r0, r1
 8000c66:	f200 80cb 	bhi.w	8000e00 <__udivmoddi4+0x2c0>
 8000c6a:	4643      	mov	r3, r8
 8000c6c:	1a09      	subs	r1, r1, r0
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c74:	fb07 1110 	mls	r1, r7, r0, r1
 8000c78:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c80:	45a6      	cmp	lr, r4
 8000c82:	d908      	bls.n	8000c96 <__udivmoddi4+0x156>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8c:	d202      	bcs.n	8000c94 <__udivmoddi4+0x154>
 8000c8e:	45a6      	cmp	lr, r4
 8000c90:	f200 80bb 	bhi.w	8000e0a <__udivmoddi4+0x2ca>
 8000c94:	4608      	mov	r0, r1
 8000c96:	eba4 040e 	sub.w	r4, r4, lr
 8000c9a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9e:	e79c      	b.n	8000bda <__udivmoddi4+0x9a>
 8000ca0:	f1c6 0720 	rsb	r7, r6, #32
 8000ca4:	40b3      	lsls	r3, r6
 8000ca6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000caa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cae:	fa20 f407 	lsr.w	r4, r0, r7
 8000cb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb6:	431c      	orrs	r4, r3
 8000cb8:	40f9      	lsrs	r1, r7
 8000cba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cbe:	fa00 f306 	lsl.w	r3, r0, r6
 8000cc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc6:	0c20      	lsrs	r0, r4, #16
 8000cc8:	fa1f fe8c 	uxth.w	lr, ip
 8000ccc:	fb09 1118 	mls	r1, r9, r8, r1
 8000cd0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd4:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd8:	4288      	cmp	r0, r1
 8000cda:	fa02 f206 	lsl.w	r2, r2, r6
 8000cde:	d90b      	bls.n	8000cf8 <__udivmoddi4+0x1b8>
 8000ce0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce8:	f080 8088 	bcs.w	8000dfc <__udivmoddi4+0x2bc>
 8000cec:	4288      	cmp	r0, r1
 8000cee:	f240 8085 	bls.w	8000dfc <__udivmoddi4+0x2bc>
 8000cf2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	1a09      	subs	r1, r1, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d00:	fb09 1110 	mls	r1, r9, r0, r1
 8000d04:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d08:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d0c:	458e      	cmp	lr, r1
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x1e2>
 8000d10:	eb1c 0101 	adds.w	r1, ip, r1
 8000d14:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d18:	d26c      	bcs.n	8000df4 <__udivmoddi4+0x2b4>
 8000d1a:	458e      	cmp	lr, r1
 8000d1c:	d96a      	bls.n	8000df4 <__udivmoddi4+0x2b4>
 8000d1e:	3802      	subs	r0, #2
 8000d20:	4461      	add	r1, ip
 8000d22:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d26:	fba0 9402 	umull	r9, r4, r0, r2
 8000d2a:	eba1 010e 	sub.w	r1, r1, lr
 8000d2e:	42a1      	cmp	r1, r4
 8000d30:	46c8      	mov	r8, r9
 8000d32:	46a6      	mov	lr, r4
 8000d34:	d356      	bcc.n	8000de4 <__udivmoddi4+0x2a4>
 8000d36:	d053      	beq.n	8000de0 <__udivmoddi4+0x2a0>
 8000d38:	b15d      	cbz	r5, 8000d52 <__udivmoddi4+0x212>
 8000d3a:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3e:	eb61 010e 	sbc.w	r1, r1, lr
 8000d42:	fa01 f707 	lsl.w	r7, r1, r7
 8000d46:	fa22 f306 	lsr.w	r3, r2, r6
 8000d4a:	40f1      	lsrs	r1, r6
 8000d4c:	431f      	orrs	r7, r3
 8000d4e:	e9c5 7100 	strd	r7, r1, [r5]
 8000d52:	2600      	movs	r6, #0
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	f1c2 0320 	rsb	r3, r2, #32
 8000d5e:	40d8      	lsrs	r0, r3
 8000d60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d64:	fa21 f303 	lsr.w	r3, r1, r3
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4301      	orrs	r1, r0
 8000d6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d78:	fb07 3610 	mls	r6, r7, r0, r3
 8000d7c:	0c0b      	lsrs	r3, r1, #16
 8000d7e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d82:	fb00 f60e 	mul.w	r6, r0, lr
 8000d86:	429e      	cmp	r6, r3
 8000d88:	fa04 f402 	lsl.w	r4, r4, r2
 8000d8c:	d908      	bls.n	8000da0 <__udivmoddi4+0x260>
 8000d8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d96:	d22f      	bcs.n	8000df8 <__udivmoddi4+0x2b8>
 8000d98:	429e      	cmp	r6, r3
 8000d9a:	d92d      	bls.n	8000df8 <__udivmoddi4+0x2b8>
 8000d9c:	3802      	subs	r0, #2
 8000d9e:	4463      	add	r3, ip
 8000da0:	1b9b      	subs	r3, r3, r6
 8000da2:	b289      	uxth	r1, r1
 8000da4:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da8:	fb07 3316 	mls	r3, r7, r6, r3
 8000dac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db0:	fb06 f30e 	mul.w	r3, r6, lr
 8000db4:	428b      	cmp	r3, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x28a>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dc0:	d216      	bcs.n	8000df0 <__udivmoddi4+0x2b0>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d914      	bls.n	8000df0 <__udivmoddi4+0x2b0>
 8000dc6:	3e02      	subs	r6, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dd0:	e738      	b.n	8000c44 <__udivmoddi4+0x104>
 8000dd2:	462e      	mov	r6, r5
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	e705      	b.n	8000be4 <__udivmoddi4+0xa4>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	e6e3      	b.n	8000ba4 <__udivmoddi4+0x64>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6f8      	b.n	8000bd2 <__udivmoddi4+0x92>
 8000de0:	454b      	cmp	r3, r9
 8000de2:	d2a9      	bcs.n	8000d38 <__udivmoddi4+0x1f8>
 8000de4:	ebb9 0802 	subs.w	r8, r9, r2
 8000de8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000dec:	3801      	subs	r0, #1
 8000dee:	e7a3      	b.n	8000d38 <__udivmoddi4+0x1f8>
 8000df0:	4646      	mov	r6, r8
 8000df2:	e7ea      	b.n	8000dca <__udivmoddi4+0x28a>
 8000df4:	4620      	mov	r0, r4
 8000df6:	e794      	b.n	8000d22 <__udivmoddi4+0x1e2>
 8000df8:	4640      	mov	r0, r8
 8000dfa:	e7d1      	b.n	8000da0 <__udivmoddi4+0x260>
 8000dfc:	46d0      	mov	r8, sl
 8000dfe:	e77b      	b.n	8000cf8 <__udivmoddi4+0x1b8>
 8000e00:	3b02      	subs	r3, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	e732      	b.n	8000c6c <__udivmoddi4+0x12c>
 8000e06:	4630      	mov	r0, r6
 8000e08:	e709      	b.n	8000c1e <__udivmoddi4+0xde>
 8000e0a:	4464      	add	r4, ip
 8000e0c:	3802      	subs	r0, #2
 8000e0e:	e742      	b.n	8000c96 <__udivmoddi4+0x156>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b088      	sub	sp, #32
 8000e18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1a:	f107 030c 	add.w	r3, r7, #12
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	4b36      	ldr	r3, [pc, #216]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a35      	ldr	r2, [pc, #212]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e42:	60bb      	str	r3, [r7, #8]
 8000e44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e6c:	f043 0302 	orr.w	r3, r3, #2
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <MX_GPIO_Init+0xf4>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN_SIGNAL_Pin|KBD_OUT0_Pin|KBD_OUT1_Pin|KBD_OUT2_Pin
 8000e7e:	2200      	movs	r2, #0
 8000e80:	211f      	movs	r1, #31
 8000e82:	4822      	ldr	r0, [pc, #136]	; (8000f0c <MX_GPIO_Init+0xf8>)
 8000e84:	f001 f824 	bl	8001ed0 <HAL_GPIO_WritePin>
                          |KBD_OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e8e:	4820      	ldr	r0, [pc, #128]	; (8000f10 <MX_GPIO_Init+0xfc>)
 8000e90:	f001 f81e 	bl	8001ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin */
  GPIO_InitStruct.Pin = EN_SIGNAL_Pin|KBD_OUT0_Pin|KBD_OUT1_Pin|KBD_OUT2_Pin
 8000e94:	231f      	movs	r3, #31
 8000e96:	60fb      	str	r3, [r7, #12]
                          |KBD_OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea4:	f107 030c 	add.w	r3, r7, #12
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4818      	ldr	r0, [pc, #96]	; (8000f0c <MX_GPIO_Init+0xf8>)
 8000eac:	f000 fe74 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KBD_IN0_Pin|KBD_IN1_Pin|KBD_IN2_Pin;
 8000eb0:	23e0      	movs	r3, #224	; 0xe0
 8000eb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4812      	ldr	r0, [pc, #72]	; (8000f0c <MX_GPIO_Init+0xf8>)
 8000ec4:	f000 fe68 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KBD_IN3_Pin;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KBD_IN3_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480d      	ldr	r0, [pc, #52]	; (8000f10 <MX_GPIO_Init+0xfc>)
 8000edc:	f000 fe5c 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000ee0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000ef2:	f107 030c 	add.w	r3, r7, #12
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_GPIO_Init+0xfc>)
 8000efa:	f000 fe4d 	bl	8001b98 <HAL_GPIO_Init>

}
 8000efe:	bf00      	nop
 8000f00:	3720      	adds	r7, #32
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000
 8000f10:	40020400 	.word	0x40020400

08000f14 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <MX_I2C1_Init+0x54>)
 8000f1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f20:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <MX_I2C1_Init+0x58>)
 8000f22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f50:	4804      	ldr	r0, [pc, #16]	; (8000f64 <MX_I2C1_Init+0x50>)
 8000f52:	f000 fff1 	bl	8001f38 <HAL_I2C_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f5c:	f000 f9f6 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f60:	bf00      	nop
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000038 	.word	0x20000038
 8000f68:	40005400 	.word	0x40005400
 8000f6c:	000186a0 	.word	0x000186a0

08000f70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a19      	ldr	r2, [pc, #100]	; (8000ff4 <HAL_I2C_MspInit+0x84>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d12b      	bne.n	8000fea <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_I2C_MspInit+0x88>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_I2C_MspInit+0x88>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_I2C_MspInit+0x88>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fae:	23c0      	movs	r3, #192	; 0xc0
 8000fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb2:	2312      	movs	r3, #18
 8000fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000fbe:	2304      	movs	r3, #4
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <HAL_I2C_MspInit+0x8c>)
 8000fca:	f000 fde5 	bl	8001b98 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <HAL_I2C_MspInit+0x88>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	4a08      	ldr	r2, [pc, #32]	; (8000ff8 <HAL_I2C_MspInit+0x88>)
 8000fd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fde:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <HAL_I2C_MspInit+0x88>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020400 	.word	0x40020400

08001000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001004:	f000 fc20 	bl	8001848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001008:	f000 f860 	bl	80010cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800100c:	f7ff ff02 	bl	8000e14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001010:	f000 fb7e 	bl	8001710 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001014:	f000 fa0e 	bl	8001434 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001018:	f7ff ff7c 	bl	8000f14 <MX_I2C1_Init>
  MX_TIM3_Init();
 800101c:	f000 fa94 	bl	8001548 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  xprintf_init();
 8001020:	f003 f88c 	bl	800413c <xprintf_init>

  rgb_pwm_star();
 8001024:	f003 f846 	bl	80040b4 <rgb_pwm_star>
  led_color.colors.red = 100;
 8001028:	4b20      	ldr	r3, [pc, #128]	; (80010ac <main+0xac>)
 800102a:	2264      	movs	r2, #100	; 0x64
 800102c:	701a      	strb	r2, [r3, #0]
  led_color.colors.green = 10;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <main+0xac>)
 8001030:	220a      	movs	r2, #10
 8001032:	705a      	strb	r2, [r3, #1]
  led_color.colors.blue = 10;
 8001034:	4b1d      	ldr	r3, [pc, #116]	; (80010ac <main+0xac>)
 8001036:	220a      	movs	r2, #10
 8001038:	709a      	strb	r2, [r3, #2]
  rgb_pwm_update(&led_color);
 800103a:	481c      	ldr	r0, [pc, #112]	; (80010ac <main+0xac>)
 800103c:	f003 f84c 	bl	80040d8 <rgb_pwm_update>


  xprint_clear();
 8001040:	f003 f88a 	bl	8004158 <xprint_clear>
  xprintf("Cerradura electronica\n\r\n\r\n\r");
 8001044:	481a      	ldr	r0, [pc, #104]	; (80010b0 <main+0xb0>)
 8001046:	f003 fd9f 	bl	8004b88 <xprintf>
  xprintf("A. Digitar password\n\r");
 800104a:	481a      	ldr	r0, [pc, #104]	; (80010b4 <main+0xb4>)
 800104c:	f003 fd9c 	bl	8004b88 <xprintf>
  xprintf("B. Agregar password\n\r");
 8001050:	4819      	ldr	r0, [pc, #100]	; (80010b8 <main+0xb8>)
 8001052:	f003 fd99 	bl	8004b88 <xprintf>
  xprintf("C. Borrar password\n\r");
 8001056:	4819      	ldr	r0, [pc, #100]	; (80010bc <main+0xbc>)
 8001058:	f003 fd96 	bl	8004b88 <xprintf>
  xprintf("D. Ver lista de password\n\r");
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <main+0xc0>)
 800105e:	f003 fd93 	bl	8004b88 <xprintf>

  while (1)
  {
	  kbd = 0;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <main+0xc4>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
	  while(!kbd){
 8001068:	e005      	b.n	8001076 <main+0x76>
		  kbd_get_print_key(&kbd);
 800106a:	4816      	ldr	r0, [pc, #88]	; (80010c4 <main+0xc4>)
 800106c:	f000 f8c6 	bl	80011fc <kbd_get_print_key>
		  HAL_Delay(20);
 8001070:	2014      	movs	r0, #20
 8001072:	f000 fc5b 	bl	800192c <HAL_Delay>
	  while(!kbd){
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <main+0xc4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f5      	beq.n	800106a <main+0x6a>
	  }

	  alarm_case = kbd;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <main+0xc4>)
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <main+0xc8>)
 8001084:	701a      	strb	r2, [r3, #0]
	  switch(alarm_case){
 8001086:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <main+0xc8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3b41      	subs	r3, #65	; 0x41
 800108c:	2b03      	cmp	r3, #3
 800108e:	d80b      	bhi.n	80010a8 <main+0xa8>
 8001090:	a201      	add	r2, pc, #4	; (adr r2, 8001098 <main+0x98>)
 8001092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001096:	bf00      	nop
 8001098:	080010a9 	.word	0x080010a9
 800109c:	080010a9 	.word	0x080010a9
 80010a0:	080010a9 	.word	0x080010a9
 80010a4:	080010a9 	.word	0x080010a9

		  case 'D': //Ver password
			  break;

		  default:
			  break;
 80010a8:	bf00      	nop
	  kbd = 0;
 80010aa:	e7da      	b.n	8001062 <main+0x62>
 80010ac:	2000008c 	.word	0x2000008c
 80010b0:	08004c28 	.word	0x08004c28
 80010b4:	08004c44 	.word	0x08004c44
 80010b8:	08004c5c 	.word	0x08004c5c
 80010bc:	08004c74 	.word	0x08004c74
 80010c0:	08004c8c 	.word	0x08004c8c
 80010c4:	20000090 	.word	0x20000090
 80010c8:	20000091 	.word	0x20000091

080010cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b094      	sub	sp, #80	; 0x50
 80010d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d2:	f107 0320 	add.w	r3, r7, #32
 80010d6:	2230      	movs	r2, #48	; 0x30
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f003 fd90 	bl	8004c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <SystemClock_Config+0xb4>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <SystemClock_Config+0xb4>)
 80010fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <SystemClock_Config+0xb4>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <SystemClock_Config+0xb8>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <SystemClock_Config+0xb8>)
 8001116:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800111a:	6013      	str	r3, [r2, #0]
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <SystemClock_Config+0xb8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001128:	2302      	movs	r3, #2
 800112a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800112c:	2301      	movs	r3, #1
 800112e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001130:	2310      	movs	r3, #16
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001134:	2300      	movs	r3, #0
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	4618      	mov	r0, r3
 800113e:	f001 f83f 	bl	80021c0 <HAL_RCC_OscConfig>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001148:	f000 f900 	bl	800134c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800114c:	230f      	movs	r3, #15
 800114e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f001 faa2 	bl	80026b0 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001172:	f000 f8eb 	bl	800134c <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	; 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <write_nibble>:

/* USER CODE BEGIN 4 */
void write_nibble(uint8_t dato){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
	uint8_t bit0, bit1, bit2, bit3;

	bit0 = dato & 0b0001;  			// 1
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
	bit1 = (dato & 0b0010) >> 1; 	// 1
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	105b      	asrs	r3, r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	73bb      	strb	r3, [r7, #14]
	bit2 = (dato & 0b0100) >> 2; 	// 0
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	109b      	asrs	r3, r3, #2
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	737b      	strb	r3, [r7, #13]
	bit3 = (dato & 0b1000) >> 3; 	// 1
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	10db      	asrs	r3, r3, #3
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	733b      	strb	r3, [r7, #12]

	HAL_GPIO_WritePin(KBD_OUT0_GPIO_Port, KBD_OUT0_Pin, (GPIO_PinState)(bit0));
 80011be:	7bfb      	ldrb	r3, [r7, #15]
 80011c0:	461a      	mov	r2, r3
 80011c2:	2102      	movs	r1, #2
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <write_nibble+0x70>)
 80011c6:	f000 fe83 	bl	8001ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KBD_OUT1_GPIO_Port, KBD_OUT1_Pin, (GPIO_PinState)(bit1));
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	461a      	mov	r2, r3
 80011ce:	2104      	movs	r1, #4
 80011d0:	4809      	ldr	r0, [pc, #36]	; (80011f8 <write_nibble+0x70>)
 80011d2:	f000 fe7d 	bl	8001ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KBD_OUT2_GPIO_Port, KBD_OUT2_Pin, (GPIO_PinState)(bit2));
 80011d6:	7b7b      	ldrb	r3, [r7, #13]
 80011d8:	461a      	mov	r2, r3
 80011da:	2108      	movs	r1, #8
 80011dc:	4806      	ldr	r0, [pc, #24]	; (80011f8 <write_nibble+0x70>)
 80011de:	f000 fe77 	bl	8001ed0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(KBD_OUT3_GPIO_Port, KBD_OUT3_Pin, (GPIO_PinState)(bit3));
 80011e2:	7b3b      	ldrb	r3, [r7, #12]
 80011e4:	461a      	mov	r2, r3
 80011e6:	2110      	movs	r1, #16
 80011e8:	4803      	ldr	r0, [pc, #12]	; (80011f8 <write_nibble+0x70>)
 80011ea:	f000 fe71 	bl	8001ed0 <HAL_GPIO_WritePin>

}
 80011ee:	bf00      	nop
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40020000 	.word	0x40020000

080011fc <kbd_get_print_key>:

void kbd_get_print_key(uint8_t *kbd_key){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	uint8_t kbd_data = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < 4; i++){
 8001208:	2300      	movs	r3, #0
 800120a:	73bb      	strb	r3, [r7, #14]
 800120c:	e075      	b.n	80012fa <kbd_get_print_key+0xfe>
	  write_nibble(1 << i);
 800120e:	7bbb      	ldrb	r3, [r7, #14]
 8001210:	2201      	movs	r2, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffb5 	bl	8001188 <write_nibble>
	  if(HAL_GPIO_ReadPin(KBD_IN0_GPIO_Port, KBD_IN0_Pin)){
 800121e:	2120      	movs	r1, #32
 8001220:	483b      	ldr	r0, [pc, #236]	; (8001310 <kbd_get_print_key+0x114>)
 8001222:	f000 fe3d 	bl	8001ea0 <HAL_GPIO_ReadPin>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d012      	beq.n	8001252 <kbd_get_print_key+0x56>
		  while(HAL_GPIO_ReadPin(KBD_IN0_GPIO_Port, KBD_IN0_Pin));
 800122c:	bf00      	nop
 800122e:	2120      	movs	r1, #32
 8001230:	4837      	ldr	r0, [pc, #220]	; (8001310 <kbd_get_print_key+0x114>)
 8001232:	f000 fe35 	bl	8001ea0 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f8      	bne.n	800122e <kbd_get_print_key+0x32>

		  kbd_data = kbd_keys[i][0];
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	4a35      	ldr	r2, [pc, #212]	; (8001314 <kbd_get_print_key+0x118>)
 8001240:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8001244:	73fb      	strb	r3, [r7, #15]
		  xprintf("%c", kbd_data);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4619      	mov	r1, r3
 800124a:	4833      	ldr	r0, [pc, #204]	; (8001318 <kbd_get_print_key+0x11c>)
 800124c:	f003 fc9c 	bl	8004b88 <xprintf>
		  break;
 8001250:	e056      	b.n	8001300 <kbd_get_print_key+0x104>
	  }

	  else if(HAL_GPIO_ReadPin(KBD_IN1_GPIO_Port, KBD_IN1_Pin)){
 8001252:	2140      	movs	r1, #64	; 0x40
 8001254:	482e      	ldr	r0, [pc, #184]	; (8001310 <kbd_get_print_key+0x114>)
 8001256:	f000 fe23 	bl	8001ea0 <HAL_GPIO_ReadPin>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d013      	beq.n	8001288 <kbd_get_print_key+0x8c>
		  while(HAL_GPIO_ReadPin(KBD_IN1_GPIO_Port, KBD_IN1_Pin));
 8001260:	bf00      	nop
 8001262:	2140      	movs	r1, #64	; 0x40
 8001264:	482a      	ldr	r0, [pc, #168]	; (8001310 <kbd_get_print_key+0x114>)
 8001266:	f000 fe1b 	bl	8001ea0 <HAL_GPIO_ReadPin>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f8      	bne.n	8001262 <kbd_get_print_key+0x66>

		  kbd_data = kbd_keys[i][1];
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	4a28      	ldr	r2, [pc, #160]	; (8001314 <kbd_get_print_key+0x118>)
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	4413      	add	r3, r2
 8001278:	785b      	ldrb	r3, [r3, #1]
 800127a:	73fb      	strb	r3, [r7, #15]
		  xprintf("%c", kbd_data);
 800127c:	7bfb      	ldrb	r3, [r7, #15]
 800127e:	4619      	mov	r1, r3
 8001280:	4825      	ldr	r0, [pc, #148]	; (8001318 <kbd_get_print_key+0x11c>)
 8001282:	f003 fc81 	bl	8004b88 <xprintf>
		  break;
 8001286:	e03b      	b.n	8001300 <kbd_get_print_key+0x104>
	  }

	  else if(HAL_GPIO_ReadPin(KBD_IN2_GPIO_Port, KBD_IN2_Pin)){
 8001288:	2180      	movs	r1, #128	; 0x80
 800128a:	4821      	ldr	r0, [pc, #132]	; (8001310 <kbd_get_print_key+0x114>)
 800128c:	f000 fe08 	bl	8001ea0 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d013      	beq.n	80012be <kbd_get_print_key+0xc2>
		  while(HAL_GPIO_ReadPin(KBD_IN2_GPIO_Port, KBD_IN2_Pin));
 8001296:	bf00      	nop
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	481d      	ldr	r0, [pc, #116]	; (8001310 <kbd_get_print_key+0x114>)
 800129c:	f000 fe00 	bl	8001ea0 <HAL_GPIO_ReadPin>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f8      	bne.n	8001298 <kbd_get_print_key+0x9c>

		  kbd_data = kbd_keys[i][2];
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	4a1a      	ldr	r2, [pc, #104]	; (8001314 <kbd_get_print_key+0x118>)
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	789b      	ldrb	r3, [r3, #2]
 80012b0:	73fb      	strb	r3, [r7, #15]
		  xprintf("%c", kbd_data);
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	4619      	mov	r1, r3
 80012b6:	4818      	ldr	r0, [pc, #96]	; (8001318 <kbd_get_print_key+0x11c>)
 80012b8:	f003 fc66 	bl	8004b88 <xprintf>
		  break;
 80012bc:	e020      	b.n	8001300 <kbd_get_print_key+0x104>
	  }

	  else if(HAL_GPIO_ReadPin(KBD_IN3_GPIO_Port, KBD_IN3_Pin)){
 80012be:	2101      	movs	r1, #1
 80012c0:	4816      	ldr	r0, [pc, #88]	; (800131c <kbd_get_print_key+0x120>)
 80012c2:	f000 fded 	bl	8001ea0 <HAL_GPIO_ReadPin>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <kbd_get_print_key+0xf8>
		  while(HAL_GPIO_ReadPin(KBD_IN3_GPIO_Port, KBD_IN3_Pin));
 80012cc:	bf00      	nop
 80012ce:	2101      	movs	r1, #1
 80012d0:	4812      	ldr	r0, [pc, #72]	; (800131c <kbd_get_print_key+0x120>)
 80012d2:	f000 fde5 	bl	8001ea0 <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f8      	bne.n	80012ce <kbd_get_print_key+0xd2>

		  kbd_data = kbd_keys[i][3];
 80012dc:	7bbb      	ldrb	r3, [r7, #14]
 80012de:	4a0d      	ldr	r2, [pc, #52]	; (8001314 <kbd_get_print_key+0x118>)
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	78db      	ldrb	r3, [r3, #3]
 80012e6:	73fb      	strb	r3, [r7, #15]
		  xprintf("%c", kbd_data);
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	4619      	mov	r1, r3
 80012ec:	480a      	ldr	r0, [pc, #40]	; (8001318 <kbd_get_print_key+0x11c>)
 80012ee:	f003 fc4b 	bl	8004b88 <xprintf>
		  break;
 80012f2:	e005      	b.n	8001300 <kbd_get_print_key+0x104>
	for(uint8_t i = 0; i < 4; i++){
 80012f4:	7bbb      	ldrb	r3, [r7, #14]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73bb      	strb	r3, [r7, #14]
 80012fa:	7bbb      	ldrb	r3, [r7, #14]
 80012fc:	2b03      	cmp	r3, #3
 80012fe:	d986      	bls.n	800120e <kbd_get_print_key+0x12>
	  }

	}

	*kbd_key = kbd_data;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	7bfa      	ldrb	r2, [r7, #15]
 8001304:	701a      	strb	r2, [r3, #0]
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40020000 	.word	0x40020000
 8001314:	20000000 	.word	0x20000000
 8001318:	08004ca8 	.word	0x08004ca8
 800131c:	40020400 	.word	0x40020400

08001320 <HAL_TIM_PeriodElapsedCallback>:

	HAL_Delay(time);
	HAL_TIM_Base_Stop_IT(BUZZER_HANDLER);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a05      	ldr	r2, [pc, #20]	; (8001344 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d104      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001332:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001336:	4804      	ldr	r0, [pc, #16]	; (8001348 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001338:	f000 fde3 	bl	8001f02 <HAL_GPIO_TogglePin>
	}
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40000400 	.word	0x40000400
 8001348:	40020400 	.word	0x40020400

0800134c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001350:	b672      	cpsid	i
}
 8001352:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001354:	e7fe      	b.n	8001354 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_MspInit+0x4c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_MspInit+0x4c>)
 8001368:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_MspInit+0x4c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <HAL_MspInit+0x4c>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <HAL_MspInit+0x4c>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <HAL_MspInit+0x4c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	603b      	str	r3, [r7, #0]
 8001394:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 fa7a 	bl	80018ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM3_IRQHandler+0x10>)
 8001402:	f001 fc8d 	bl	8002d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000dc 	.word	0x200000dc

08001410 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <SystemInit+0x20>)
 8001416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <SystemInit+0x20>)
 800141c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]
 8001458:	605a      	str	r2, [r3, #4]
 800145a:	609a      	str	r2, [r3, #8]
 800145c:	60da      	str	r2, [r3, #12]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	615a      	str	r2, [r3, #20]
 8001462:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001464:	4b37      	ldr	r3, [pc, #220]	; (8001544 <MX_TIM2_Init+0x110>)
 8001466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6-1;
 800146c:	4b35      	ldr	r3, [pc, #212]	; (8001544 <MX_TIM2_Init+0x110>)
 800146e:	2205      	movs	r2, #5
 8001470:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001472:	4b34      	ldr	r3, [pc, #208]	; (8001544 <MX_TIM2_Init+0x110>)
 8001474:	2200      	movs	r2, #0
 8001476:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256-1;
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <MX_TIM2_Init+0x110>)
 800147a:	22ff      	movs	r2, #255	; 0xff
 800147c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	4b31      	ldr	r3, [pc, #196]	; (8001544 <MX_TIM2_Init+0x110>)
 8001480:	2200      	movs	r2, #0
 8001482:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001484:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <MX_TIM2_Init+0x110>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800148a:	482e      	ldr	r0, [pc, #184]	; (8001544 <MX_TIM2_Init+0x110>)
 800148c:	f001 faf0 	bl	8002a70 <HAL_TIM_Base_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001496:	f7ff ff59 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a4:	4619      	mov	r1, r3
 80014a6:	4827      	ldr	r0, [pc, #156]	; (8001544 <MX_TIM2_Init+0x110>)
 80014a8:	f001 fe04 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80014b2:	f7ff ff4b 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014b6:	4823      	ldr	r0, [pc, #140]	; (8001544 <MX_TIM2_Init+0x110>)
 80014b8:	f001 fb29 	bl	8002b0e <HAL_TIM_PWM_Init>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80014c2:	f7ff ff43 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c6:	2300      	movs	r3, #0
 80014c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	4619      	mov	r1, r3
 80014d4:	481b      	ldr	r0, [pc, #108]	; (8001544 <MX_TIM2_Init+0x110>)
 80014d6:	f002 f9a9 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80014e0:	f7ff ff34 	bl	800134c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e4:	2360      	movs	r3, #96	; 0x60
 80014e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	4619      	mov	r1, r3
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <MX_TIM2_Init+0x110>)
 80014fc:	f001 fd18 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001506:	f7ff ff21 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2204      	movs	r2, #4
 800150e:	4619      	mov	r1, r3
 8001510:	480c      	ldr	r0, [pc, #48]	; (8001544 <MX_TIM2_Init+0x110>)
 8001512:	f001 fd0d 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800151c:	f7ff ff16 	bl	800134c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	2208      	movs	r2, #8
 8001524:	4619      	mov	r1, r3
 8001526:	4807      	ldr	r0, [pc, #28]	; (8001544 <MX_TIM2_Init+0x110>)
 8001528:	f001 fd02 	bl	8002f30 <HAL_TIM_PWM_ConfigChannel>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001532:	f7ff ff0b 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <MX_TIM2_Init+0x110>)
 8001538:	f000 f890 	bl	800165c <HAL_TIM_MspPostInit>

}
 800153c:	bf00      	nop
 800153e:	3738      	adds	r7, #56	; 0x38
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000094 	.word	0x20000094

08001548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
 8001558:	609a      	str	r2, [r3, #8]
 800155a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800155c:	463b      	mov	r3, r7
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <MX_TIM3_Init+0x94>)
 8001566:	4a1e      	ldr	r2, [pc, #120]	; (80015e0 <MX_TIM3_Init+0x98>)
 8001568:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2-1;
 800156a:	4b1c      	ldr	r3, [pc, #112]	; (80015dc <MX_TIM3_Init+0x94>)
 800156c:	2201      	movs	r2, #1
 800156e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <MX_TIM3_Init+0x94>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <MX_TIM3_Init+0x94>)
 8001578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800157c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b17      	ldr	r3, [pc, #92]	; (80015dc <MX_TIM3_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b15      	ldr	r3, [pc, #84]	; (80015dc <MX_TIM3_Init+0x94>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800158a:	4814      	ldr	r0, [pc, #80]	; (80015dc <MX_TIM3_Init+0x94>)
 800158c:	f001 fa70 	bl	8002a70 <HAL_TIM_Base_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001596:	f7ff fed9 	bl	800134c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015a0:	f107 0308 	add.w	r3, r7, #8
 80015a4:	4619      	mov	r1, r3
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <MX_TIM3_Init+0x94>)
 80015a8:	f001 fd84 	bl	80030b4 <HAL_TIM_ConfigClockSource>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80015b2:	f7ff fecb 	bl	800134c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015be:	463b      	mov	r3, r7
 80015c0:	4619      	mov	r1, r3
 80015c2:	4806      	ldr	r0, [pc, #24]	; (80015dc <MX_TIM3_Init+0x94>)
 80015c4:	f002 f932 	bl	800382c <HAL_TIMEx_MasterConfigSynchronization>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80015ce:	f7ff febd 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200000dc 	.word	0x200000dc
 80015e0:	40000400 	.word	0x40000400

080015e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f4:	d10e      	bne.n	8001614 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a15      	ldr	r2, [pc, #84]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b13      	ldr	r3, [pc, #76]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001612:	e01a      	b.n	800164a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_TIM_Base_MspInit+0x74>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d115      	bne.n	800164a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	4a0b      	ldr	r2, [pc, #44]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	6413      	str	r3, [r2, #64]	; 0x40
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_TIM_Base_MspInit+0x70>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2100      	movs	r1, #0
 800163e:	201d      	movs	r0, #29
 8001640:	f000 fa73 	bl	8001b2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001644:	201d      	movs	r0, #29
 8001646:	f000 fa8c 	bl	8001b62 <HAL_NVIC_EnableIRQ>
}
 800164a:	bf00      	nop
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40000400 	.word	0x40000400

0800165c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800167c:	d13d      	bne.n	80016fa <HAL_TIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b20      	ldr	r3, [pc, #128]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a1f      	ldr	r2, [pc, #124]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b1d      	ldr	r3, [pc, #116]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a18      	ldr	r2, [pc, #96]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <HAL_TIM_MspPostInit+0xa8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = BLUE_Pin|GREEN_Pin;
 80016b6:	f44f 6381 	mov.w	r3, #1032	; 0x408
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c4:	2300      	movs	r3, #0
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016c8:	2301      	movs	r3, #1
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	480d      	ldr	r0, [pc, #52]	; (8001708 <HAL_TIM_MspPostInit+0xac>)
 80016d4:	f000 fa60 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RED_Pin;
 80016d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016de:	2302      	movs	r3, #2
 80016e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016ea:	2301      	movs	r3, #1
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RED_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 0314 	add.w	r3, r7, #20
 80016f2:	4619      	mov	r1, r3
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <HAL_TIM_MspPostInit+0xb0>)
 80016f6:	f000 fa4f 	bl	8001b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80016fa:	bf00      	nop
 80016fc:	3728      	adds	r7, #40	; 0x28
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400
 800170c:	40020000 	.word	0x40020000

08001710 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_USART1_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	; (8001760 <MX_USART1_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_USART1_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_USART1_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_USART1_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_USART1_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_USART1_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_USART1_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_USART1_UART_Init+0x4c>)
 8001748:	f002 f8f2 	bl	8003930 <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f7ff fdfb 	bl	800134c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000124 	.word	0x20000124
 8001760:	40011000 	.word	0x40011000

08001764 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_UART_MspInit+0x84>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12c      	bne.n	80017e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_UART_MspInit+0x88>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_UART_MspInit+0x88>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	6453      	str	r3, [r2, #68]	; 0x44
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_UART_MspInit+0x88>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_UART_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017d0:	2307      	movs	r3, #7
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_UART_MspInit+0x8c>)
 80017dc:	f000 f9dc 	bl	8001b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40011000 	.word	0x40011000
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000

080017f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800182c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f8:	480d      	ldr	r0, [pc, #52]	; (8001830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017fa:	490e      	ldr	r1, [pc, #56]	; (8001834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017fc:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001800:	e002      	b.n	8001808 <LoopCopyDataInit>

08001802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001806:	3304      	adds	r3, #4

08001808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800180a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800180c:	d3f9      	bcc.n	8001802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180e:	4a0b      	ldr	r2, [pc, #44]	; (800183c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001810:	4c0b      	ldr	r4, [pc, #44]	; (8001840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001814:	e001      	b.n	800181a <LoopFillZerobss>

08001816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001818:	3204      	adds	r2, #4

0800181a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800181a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800181c:	d3fb      	bcc.n	8001816 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181e:	f7ff fdf7 	bl	8001410 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001822:	f003 f9c9 	bl	8004bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001826:	f7ff fbeb 	bl	8001000 <main>
  bx  lr    
 800182a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800182c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001834:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001838:	08004cec 	.word	0x08004cec
  ldr r2, =_sbss
 800183c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001840:	20000174 	.word	0x20000174

08001844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001844:	e7fe      	b.n	8001844 <ADC_IRQHandler>
	...

08001848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_Init+0x40>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_Init+0x40>)
 8001852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_Init+0x40>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_Init+0x40>)
 800185e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001864:	4b08      	ldr	r3, [pc, #32]	; (8001888 <HAL_Init+0x40>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a07      	ldr	r2, [pc, #28]	; (8001888 <HAL_Init+0x40>)
 800186a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001870:	2003      	movs	r0, #3
 8001872:	f000 f94f 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001876:	200f      	movs	r0, #15
 8001878:	f000 f808 	bl	800188c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800187c:	f7ff fd6c 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023c00 	.word	0x40023c00

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x54>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_InitTick+0x58>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	4619      	mov	r1, r3
 800189e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f967 	bl	8001b7e <HAL_SYSTICK_Config>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e00e      	b.n	80018d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b0f      	cmp	r3, #15
 80018be:	d80a      	bhi.n	80018d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c0:	2200      	movs	r2, #0
 80018c2:	6879      	ldr	r1, [r7, #4]
 80018c4:	f04f 30ff 	mov.w	r0, #4294967295
 80018c8:	f000 f92f 	bl	8001b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018cc:	4a06      	ldr	r2, [pc, #24]	; (80018e8 <HAL_InitTick+0x5c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	e000      	b.n	80018d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	20000010 	.word	0x20000010
 80018e4:	20000018 	.word	0x20000018
 80018e8:	20000014 	.word	0x20000014

080018ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x20>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	461a      	mov	r2, r3
 80018f6:	4b06      	ldr	r3, [pc, #24]	; (8001910 <HAL_IncTick+0x24>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4413      	add	r3, r2
 80018fc:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_IncTick+0x24>)
 80018fe:	6013      	str	r3, [r2, #0]
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000018 	.word	0x20000018
 8001910:	20000168 	.word	0x20000168

08001914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return uwTick;
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GetTick+0x14>)
 800191a:	681b      	ldr	r3, [r3, #0]
}
 800191c:	4618      	mov	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000168 	.word	0x20000168

0800192c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001934:	f7ff ffee 	bl	8001914 <HAL_GetTick>
 8001938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d005      	beq.n	8001952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <HAL_Delay+0x44>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001952:	bf00      	nop
 8001954:	f7ff ffde 	bl	8001914 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	429a      	cmp	r2, r3
 8001962:	d8f7      	bhi.n	8001954 <HAL_Delay+0x28>
  {
  }
}
 8001964:	bf00      	nop
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000018 	.word	0x20000018

08001974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001990:	4013      	ands	r3, r2
 8001992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800199c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <__NVIC_SetPriorityGrouping+0x44>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <__NVIC_GetPriorityGrouping+0x18>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	0a1b      	lsrs	r3, r3, #8
 80019c6:	f003 0307 	and.w	r3, r3, #7
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db0b      	blt.n	8001a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	f003 021f 	and.w	r2, r3, #31
 80019f0:	4907      	ldr	r1, [pc, #28]	; (8001a10 <__NVIC_EnableIRQ+0x38>)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	2001      	movs	r0, #1
 80019fa:	fa00 f202 	lsl.w	r2, r0, r2
 80019fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000e100 	.word	0xe000e100

08001a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	6039      	str	r1, [r7, #0]
 8001a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	db0a      	blt.n	8001a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	490c      	ldr	r1, [pc, #48]	; (8001a60 <__NVIC_SetPriority+0x4c>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	440b      	add	r3, r1
 8001a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a3c:	e00a      	b.n	8001a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4908      	ldr	r1, [pc, #32]	; (8001a64 <__NVIC_SetPriority+0x50>)
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	3b04      	subs	r3, #4
 8001a4c:	0112      	lsls	r2, r2, #4
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	440b      	add	r3, r1
 8001a52:	761a      	strb	r2, [r3, #24]
}
 8001a54:	bf00      	nop
 8001a56:	370c      	adds	r7, #12
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	e000e100 	.word	0xe000e100
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b089      	sub	sp, #36	; 0x24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	f1c3 0307 	rsb	r3, r3, #7
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	bf28      	it	cs
 8001a86:	2304      	movcs	r3, #4
 8001a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3304      	adds	r3, #4
 8001a8e:	2b06      	cmp	r3, #6
 8001a90:	d902      	bls.n	8001a98 <NVIC_EncodePriority+0x30>
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	3b03      	subs	r3, #3
 8001a96:	e000      	b.n	8001a9a <NVIC_EncodePriority+0x32>
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa0:	69bb      	ldr	r3, [r7, #24]
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	401a      	ands	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aba:	43d9      	mvns	r1, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac0:	4313      	orrs	r3, r2
         );
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3724      	adds	r7, #36	; 0x24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ae0:	d301      	bcc.n	8001ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e00f      	b.n	8001b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <SysTick_Config+0x40>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aee:	210f      	movs	r1, #15
 8001af0:	f04f 30ff 	mov.w	r0, #4294967295
 8001af4:	f7ff ff8e 	bl	8001a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af8:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <SysTick_Config+0x40>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afe:	4b04      	ldr	r3, [pc, #16]	; (8001b10 <SysTick_Config+0x40>)
 8001b00:	2207      	movs	r2, #7
 8001b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	e000e010 	.word	0xe000e010

08001b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff ff29 	bl	8001974 <__NVIC_SetPriorityGrouping>
}
 8001b22:	bf00      	nop
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b086      	sub	sp, #24
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b3c:	f7ff ff3e 	bl	80019bc <__NVIC_GetPriorityGrouping>
 8001b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	68b9      	ldr	r1, [r7, #8]
 8001b46:	6978      	ldr	r0, [r7, #20]
 8001b48:	f7ff ff8e 	bl	8001a68 <NVIC_EncodePriority>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b52:	4611      	mov	r1, r2
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff5d 	bl	8001a14 <__NVIC_SetPriority>
}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	4603      	mov	r3, r0
 8001b6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ff31 	bl	80019d8 <__NVIC_EnableIRQ>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff ffa2 	bl	8001ad0 <SysTick_Config>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e159      	b.n	8001e68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8148 	bne.w	8001e62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d005      	beq.n	8001bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d130      	bne.n	8001c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	43db      	mvns	r3, r3
 8001c2a:	69ba      	ldr	r2, [r7, #24]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	091b      	lsrs	r3, r3, #4
 8001c36:	f003 0201 	and.w	r2, r3, #1
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b03      	cmp	r3, #3
 8001c56:	d017      	beq.n	8001c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80a2 	beq.w	8001e62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b57      	ldr	r3, [pc, #348]	; (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a56      	ldr	r2, [pc, #344]	; (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <HAL_GPIO_Init+0x2e8>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3a:	4a52      	ldr	r2, [pc, #328]	; (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a49      	ldr	r2, [pc, #292]	; (8001e88 <HAL_GPIO_Init+0x2f0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x202>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a48      	ldr	r2, [pc, #288]	; (8001e8c <HAL_GPIO_Init+0x2f4>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x1fe>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a47      	ldr	r2, [pc, #284]	; (8001e90 <HAL_GPIO_Init+0x2f8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x1fa>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a46      	ldr	r2, [pc, #280]	; (8001e94 <HAL_GPIO_Init+0x2fc>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x1f6>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a45      	ldr	r2, [pc, #276]	; (8001e98 <HAL_GPIO_Init+0x300>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x1f2>
 8001d86:	2304      	movs	r3, #4
 8001d88:	e008      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d8a:	2307      	movs	r3, #7
 8001d8c:	e006      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e004      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e002      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e000      	b.n	8001d9c <HAL_GPIO_Init+0x204>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	f002 0203 	and.w	r2, r2, #3
 8001da2:	0092      	lsls	r2, r2, #2
 8001da4:	4093      	lsls	r3, r2
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dac:	4935      	ldr	r1, [pc, #212]	; (8001e84 <HAL_GPIO_Init+0x2ec>)
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	089b      	lsrs	r3, r3, #2
 8001db2:	3302      	adds	r3, #2
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dba:	4b38      	ldr	r3, [pc, #224]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dde:	4a2f      	ldr	r2, [pc, #188]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001de4:	4b2d      	ldr	r3, [pc, #180]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e08:	4a24      	ldr	r2, [pc, #144]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e0e:	4b23      	ldr	r3, [pc, #140]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	43db      	mvns	r3, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e32:	4a1a      	ldr	r2, [pc, #104]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d003      	beq.n	8001e5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e5c:	4a0f      	ldr	r2, [pc, #60]	; (8001e9c <HAL_GPIO_Init+0x304>)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	2b0f      	cmp	r3, #15
 8001e6c:	f67f aea2 	bls.w	8001bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	40013800 	.word	0x40013800
 8001e88:	40020000 	.word	0x40020000
 8001e8c:	40020400 	.word	0x40020400
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	887b      	ldrh	r3, [r7, #2]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d002      	beq.n	8001ebe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	e001      	b.n	8001ec2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3714      	adds	r7, #20
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
 8001edc:	4613      	mov	r3, r2
 8001ede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee0:	787b      	ldrb	r3, [r7, #1]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ee6:	887a      	ldrh	r2, [r7, #2]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eec:	e003      	b.n	8001ef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eee:	887b      	ldrh	r3, [r7, #2]
 8001ef0:	041a      	lsls	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	619a      	str	r2, [r3, #24]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f02:	b480      	push	{r7}
 8001f04:	b085      	sub	sp, #20
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f14:	887a      	ldrh	r2, [r7, #2]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	041a      	lsls	r2, r3, #16
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	43d9      	mvns	r1, r3
 8001f20:	887b      	ldrh	r3, [r7, #2]
 8001f22:	400b      	ands	r3, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e12b      	b.n	80021a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff f806 	bl	8000f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2224      	movs	r2, #36	; 0x24
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f9c:	f000 fd40 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8001fa0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	4a81      	ldr	r2, [pc, #516]	; (80021ac <HAL_I2C_Init+0x274>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d807      	bhi.n	8001fbc <HAL_I2C_Init+0x84>
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4a80      	ldr	r2, [pc, #512]	; (80021b0 <HAL_I2C_Init+0x278>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	bf94      	ite	ls
 8001fb4:	2301      	movls	r3, #1
 8001fb6:	2300      	movhi	r3, #0
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	e006      	b.n	8001fca <HAL_I2C_Init+0x92>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4a7d      	ldr	r2, [pc, #500]	; (80021b4 <HAL_I2C_Init+0x27c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	bf94      	ite	ls
 8001fc4:	2301      	movls	r3, #1
 8001fc6:	2300      	movhi	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e0e7      	b.n	80021a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	4a78      	ldr	r2, [pc, #480]	; (80021b8 <HAL_I2C_Init+0x280>)
 8001fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fda:	0c9b      	lsrs	r3, r3, #18
 8001fdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68ba      	ldr	r2, [r7, #8]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4a6a      	ldr	r2, [pc, #424]	; (80021ac <HAL_I2C_Init+0x274>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d802      	bhi.n	800200c <HAL_I2C_Init+0xd4>
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3301      	adds	r3, #1
 800200a:	e009      	b.n	8002020 <HAL_I2C_Init+0xe8>
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002012:	fb02 f303 	mul.w	r3, r2, r3
 8002016:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_I2C_Init+0x284>)
 8002018:	fba2 2303 	umull	r2, r3, r2, r3
 800201c:	099b      	lsrs	r3, r3, #6
 800201e:	3301      	adds	r3, #1
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6812      	ldr	r2, [r2, #0]
 8002024:	430b      	orrs	r3, r1
 8002026:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	69db      	ldr	r3, [r3, #28]
 800202e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002032:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	495c      	ldr	r1, [pc, #368]	; (80021ac <HAL_I2C_Init+0x274>)
 800203c:	428b      	cmp	r3, r1
 800203e:	d819      	bhi.n	8002074 <HAL_I2C_Init+0x13c>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	1e59      	subs	r1, r3, #1
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	fbb1 f3f3 	udiv	r3, r1, r3
 800204e:	1c59      	adds	r1, r3, #1
 8002050:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002054:	400b      	ands	r3, r1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00a      	beq.n	8002070 <HAL_I2C_Init+0x138>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1e59      	subs	r1, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fbb1 f3f3 	udiv	r3, r1, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206e:	e051      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 8002070:	2304      	movs	r3, #4
 8002072:	e04f      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d111      	bne.n	80020a0 <HAL_I2C_Init+0x168>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1e58      	subs	r0, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6859      	ldr	r1, [r3, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	440b      	add	r3, r1
 800208a:	fbb0 f3f3 	udiv	r3, r0, r3
 800208e:	3301      	adds	r3, #1
 8002090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	e012      	b.n	80020c6 <HAL_I2C_Init+0x18e>
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1e58      	subs	r0, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6859      	ldr	r1, [r3, #4]
 80020a8:	460b      	mov	r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	0099      	lsls	r1, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b6:	3301      	adds	r3, #1
 80020b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Init+0x196>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e022      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10e      	bne.n	80020f4 <HAL_I2C_Init+0x1bc>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1e58      	subs	r0, r3, #1
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	440b      	add	r3, r1
 80020e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020f2:	e00f      	b.n	8002114 <HAL_I2C_Init+0x1dc>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	6809      	ldr	r1, [r1, #0]
 8002118:	4313      	orrs	r3, r2
 800211a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	430a      	orrs	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002142:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6911      	ldr	r1, [r2, #16]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	68d2      	ldr	r2, [r2, #12]
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	430b      	orrs	r3, r1
 8002156:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695a      	ldr	r2, [r3, #20]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2220      	movs	r2, #32
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	000186a0 	.word	0x000186a0
 80021b0:	001e847f 	.word	0x001e847f
 80021b4:	003d08ff 	.word	0x003d08ff
 80021b8:	431bde83 	.word	0x431bde83
 80021bc:	10624dd3 	.word	0x10624dd3

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e267      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d075      	beq.n	80022ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021de:	4b88      	ldr	r3, [pc, #544]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	d00c      	beq.n	8002204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ea:	4b85      	ldr	r3, [pc, #532]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021f2:	2b08      	cmp	r3, #8
 80021f4:	d112      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f6:	4b82      	ldr	r3, [pc, #520]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002202:	d10b      	bne.n	800221c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	4b7e      	ldr	r3, [pc, #504]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d05b      	beq.n	80022c8 <HAL_RCC_OscConfig+0x108>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d157      	bne.n	80022c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e242      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002224:	d106      	bne.n	8002234 <HAL_RCC_OscConfig+0x74>
 8002226:	4b76      	ldr	r3, [pc, #472]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a75      	ldr	r2, [pc, #468]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x98>
 800223e:	4b70      	ldr	r3, [pc, #448]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a6f      	ldr	r2, [pc, #444]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b6d      	ldr	r3, [pc, #436]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6c      	ldr	r2, [pc, #432]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xb0>
 8002258:	4b69      	ldr	r3, [pc, #420]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a68      	ldr	r2, [pc, #416]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b66      	ldr	r3, [pc, #408]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a65      	ldr	r2, [pc, #404]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800226e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fb4c 	bl	8001914 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fb48 	bl	8001914 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e207      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b5b      	ldr	r3, [pc, #364]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xc0>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fb38 	bl	8001914 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fb34 	bl	8001914 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1f3      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b51      	ldr	r3, [pc, #324]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0xe8>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022d6:	4b4a      	ldr	r3, [pc, #296]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ee:	4b44      	ldr	r3, [pc, #272]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x152>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1c7      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3b      	ldr	r3, [pc, #236]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4937      	ldr	r1, [pc, #220]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b34      	ldr	r3, [pc, #208]	; (8002404 <HAL_RCC_OscConfig+0x244>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7ff faed 	bl	8001914 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fae9 	bl	8001914 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1a8      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b28      	ldr	r3, [pc, #160]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4925      	ldr	r1, [pc, #148]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <HAL_RCC_OscConfig+0x244>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7ff facc 	bl	8001914 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff fac8 	bl	8001914 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e187      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d036      	beq.n	8002418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d016      	beq.n	80023e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <HAL_RCC_OscConfig+0x248>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7ff faac 	bl	8001914 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff faa8 	bl	8001914 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e167      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_OscConfig+0x240>)
 80023d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x200>
 80023de:	e01b      	b.n	8002418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <HAL_RCC_OscConfig+0x248>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7ff fa95 	bl	8001914 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023ec:	e00e      	b.n	800240c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ee:	f7ff fa91 	bl	8001914 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d907      	bls.n	800240c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e150      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
 8002400:	40023800 	.word	0x40023800
 8002404:	42470000 	.word	0x42470000
 8002408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	4b88      	ldr	r3, [pc, #544]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1ea      	bne.n	80023ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 8097 	beq.w	8002554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800242a:	4b81      	ldr	r3, [pc, #516]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10f      	bne.n	8002456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	4b7d      	ldr	r3, [pc, #500]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	4a7c      	ldr	r2, [pc, #496]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 8002440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002444:	6413      	str	r3, [r2, #64]	; 0x40
 8002446:	4b7a      	ldr	r3, [pc, #488]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800244e:	60bb      	str	r3, [r7, #8]
 8002450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002452:	2301      	movs	r3, #1
 8002454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002456:	4b77      	ldr	r3, [pc, #476]	; (8002634 <HAL_RCC_OscConfig+0x474>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800245e:	2b00      	cmp	r3, #0
 8002460:	d118      	bne.n	8002494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002462:	4b74      	ldr	r3, [pc, #464]	; (8002634 <HAL_RCC_OscConfig+0x474>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a73      	ldr	r2, [pc, #460]	; (8002634 <HAL_RCC_OscConfig+0x474>)
 8002468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246e:	f7ff fa51 	bl	8001914 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	e008      	b.n	8002488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002476:	f7ff fa4d 	bl	8001914 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e10c      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b6a      	ldr	r3, [pc, #424]	; (8002634 <HAL_RCC_OscConfig+0x474>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d0f0      	beq.n	8002476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d106      	bne.n	80024aa <HAL_RCC_OscConfig+0x2ea>
 800249c:	4b64      	ldr	r3, [pc, #400]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a0:	4a63      	ldr	r2, [pc, #396]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	6713      	str	r3, [r2, #112]	; 0x70
 80024a8:	e01c      	b.n	80024e4 <HAL_RCC_OscConfig+0x324>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2b05      	cmp	r3, #5
 80024b0:	d10c      	bne.n	80024cc <HAL_RCC_OscConfig+0x30c>
 80024b2:	4b5f      	ldr	r3, [pc, #380]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	4a5e      	ldr	r2, [pc, #376]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024b8:	f043 0304 	orr.w	r3, r3, #4
 80024bc:	6713      	str	r3, [r2, #112]	; 0x70
 80024be:	4b5c      	ldr	r3, [pc, #368]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c2:	4a5b      	ldr	r2, [pc, #364]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ca:	e00b      	b.n	80024e4 <HAL_RCC_OscConfig+0x324>
 80024cc:	4b58      	ldr	r3, [pc, #352]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a57      	ldr	r2, [pc, #348]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024d2:	f023 0301 	bic.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	4b55      	ldr	r3, [pc, #340]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a54      	ldr	r2, [pc, #336]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80024de:	f023 0304 	bic.w	r3, r3, #4
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d015      	beq.n	8002518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7ff fa12 	bl	8001914 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f2:	e00a      	b.n	800250a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024f4:	f7ff fa0e 	bl	8001914 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002502:	4293      	cmp	r3, r2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e0cb      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	4b49      	ldr	r3, [pc, #292]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 800250c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0ee      	beq.n	80024f4 <HAL_RCC_OscConfig+0x334>
 8002516:	e014      	b.n	8002542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002518:	f7ff f9fc 	bl	8001914 <HAL_GetTick>
 800251c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7ff f9f8 	bl	8001914 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e0b5      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002536:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ee      	bne.n	8002520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002542:	7dfb      	ldrb	r3, [r7, #23]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d105      	bne.n	8002554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002548:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 800254a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254c:	4a38      	ldr	r2, [pc, #224]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 800254e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 80a1 	beq.w	80026a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255e:	4b34      	ldr	r3, [pc, #208]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f003 030c 	and.w	r3, r3, #12
 8002566:	2b08      	cmp	r3, #8
 8002568:	d05c      	beq.n	8002624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d141      	bne.n	80025f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002572:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCC_OscConfig+0x478>)
 8002574:	2200      	movs	r2, #0
 8002576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002578:	f7ff f9cc 	bl	8001914 <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002580:	f7ff f9c8 	bl	8001914 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e087      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	4b27      	ldr	r3, [pc, #156]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f0      	bne.n	8002580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69da      	ldr	r2, [r3, #28]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	019b      	lsls	r3, r3, #6
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	3b01      	subs	r3, #1
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	491b      	ldr	r1, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <HAL_RCC_OscConfig+0x478>)
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff f9a1 	bl	8001914 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025d6:	f7ff f99d 	bl	8001914 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e05c      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e8:	4b11      	ldr	r3, [pc, #68]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0f0      	beq.n	80025d6 <HAL_RCC_OscConfig+0x416>
 80025f4:	e054      	b.n	80026a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f6:	4b10      	ldr	r3, [pc, #64]	; (8002638 <HAL_RCC_OscConfig+0x478>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff f98a 	bl	8001914 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002604:	f7ff f986 	bl	8001914 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e045      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_OscConfig+0x470>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1f0      	bne.n	8002604 <HAL_RCC_OscConfig+0x444>
 8002622:	e03d      	b.n	80026a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d107      	bne.n	800263c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e038      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
 8002630:	40023800 	.word	0x40023800
 8002634:	40007000 	.word	0x40007000
 8002638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_RCC_OscConfig+0x4ec>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d028      	beq.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d121      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d11a      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002666:	68fa      	ldr	r2, [r7, #12]
 8002668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800266c:	4013      	ands	r3, r2
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002674:	4293      	cmp	r3, r2
 8002676:	d111      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	085b      	lsrs	r3, r3, #1
 8002684:	3b01      	subs	r3, #1
 8002686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d001      	beq.n	80026a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800

080026b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e0cc      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d90c      	bls.n	80026ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026da:	4b63      	ldr	r3, [pc, #396]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0307 	and.w	r3, r3, #7
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d001      	beq.n	80026ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e0b8      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d020      	beq.n	800273a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	4a58      	ldr	r2, [pc, #352]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800270a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800270e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0308 	and.w	r3, r3, #8
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a52      	ldr	r2, [pc, #328]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002728:	4b50      	ldr	r3, [pc, #320]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	494d      	ldr	r1, [pc, #308]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d044      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274e:	4b47      	ldr	r3, [pc, #284]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d119      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e07f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800276a:	2b03      	cmp	r3, #3
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276e:	4b3f      	ldr	r3, [pc, #252]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277e:	4b3b      	ldr	r3, [pc, #236]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e067      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 0203 	bic.w	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	4934      	ldr	r1, [pc, #208]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800279c:	4313      	orrs	r3, r2
 800279e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a0:	f7ff f8b8 	bl	8001914 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a6:	e00a      	b.n	80027be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a8:	f7ff f8b4 	bl	8001914 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e04f      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027be:	4b2b      	ldr	r3, [pc, #172]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 020c 	and.w	r2, r3, #12
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d1eb      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027d0:	4b25      	ldr	r3, [pc, #148]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0307 	and.w	r3, r3, #7
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d20c      	bcs.n	80027f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027de:	4b22      	ldr	r3, [pc, #136]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e0:	683a      	ldr	r2, [r7, #0]
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <HAL_RCC_ClockConfig+0x1b8>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	683a      	ldr	r2, [r7, #0]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e032      	b.n	800285e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0304 	and.w	r3, r3, #4
 8002800:	2b00      	cmp	r3, #0
 8002802:	d008      	beq.n	8002816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002804:	4b19      	ldr	r3, [pc, #100]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4916      	ldr	r1, [pc, #88]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002812:	4313      	orrs	r3, r2
 8002814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d009      	beq.n	8002836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	00db      	lsls	r3, r3, #3
 8002830:	490e      	ldr	r1, [pc, #56]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002836:	f000 f821 	bl	800287c <HAL_RCC_GetSysClockFreq>
 800283a:	4602      	mov	r2, r0
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_RCC_ClockConfig+0x1bc>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	091b      	lsrs	r3, r3, #4
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	490a      	ldr	r1, [pc, #40]	; (8002870 <HAL_RCC_ClockConfig+0x1c0>)
 8002848:	5ccb      	ldrb	r3, [r1, r3]
 800284a:	fa22 f303 	lsr.w	r3, r2, r3
 800284e:	4a09      	ldr	r2, [pc, #36]	; (8002874 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff f818 	bl	800188c <HAL_InitTick>

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023c00 	.word	0x40023c00
 800286c:	40023800 	.word	0x40023800
 8002870:	08004cc4 	.word	0x08004cc4
 8002874:	20000010 	.word	0x20000010
 8002878:	20000014 	.word	0x20000014

0800287c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800287c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002880:	b090      	sub	sp, #64	; 0x40
 8002882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	637b      	str	r3, [r7, #52]	; 0x34
 8002888:	2300      	movs	r3, #0
 800288a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800288c:	2300      	movs	r3, #0
 800288e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002894:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
 800289c:	2b08      	cmp	r3, #8
 800289e:	d00d      	beq.n	80028bc <HAL_RCC_GetSysClockFreq+0x40>
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	f200 80a1 	bhi.w	80029e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_GetSysClockFreq+0x34>
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ae:	e09b      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80028b4:	e09b      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b6:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028ba:	e098      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028bc:	4b4f      	ldr	r3, [pc, #316]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c6:	4b4d      	ldr	r3, [pc, #308]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d028      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028d2:	4b4a      	ldr	r3, [pc, #296]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	099b      	lsrs	r3, r3, #6
 80028d8:	2200      	movs	r2, #0
 80028da:	623b      	str	r3, [r7, #32]
 80028dc:	627a      	str	r2, [r7, #36]	; 0x24
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80028e4:	2100      	movs	r1, #0
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028e8:	fb03 f201 	mul.w	r2, r3, r1
 80028ec:	2300      	movs	r3, #0
 80028ee:	fb00 f303 	mul.w	r3, r0, r3
 80028f2:	4413      	add	r3, r2
 80028f4:	4a43      	ldr	r2, [pc, #268]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x188>)
 80028f6:	fba0 1202 	umull	r1, r2, r0, r2
 80028fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028fc:	460a      	mov	r2, r1
 80028fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8002900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002902:	4413      	add	r3, r2
 8002904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002908:	2200      	movs	r2, #0
 800290a:	61bb      	str	r3, [r7, #24]
 800290c:	61fa      	str	r2, [r7, #28]
 800290e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002912:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002916:	f7fe f8fb 	bl	8000b10 <__aeabi_uldivmod>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	4613      	mov	r3, r2
 8002920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002922:	e053      	b.n	80029cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002924:	4b35      	ldr	r3, [pc, #212]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	2200      	movs	r2, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	617a      	str	r2, [r7, #20]
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002936:	f04f 0b00 	mov.w	fp, #0
 800293a:	4652      	mov	r2, sl
 800293c:	465b      	mov	r3, fp
 800293e:	f04f 0000 	mov.w	r0, #0
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	0159      	lsls	r1, r3, #5
 8002948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294c:	0150      	lsls	r0, r2, #5
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	ebb2 080a 	subs.w	r8, r2, sl
 8002956:	eb63 090b 	sbc.w	r9, r3, fp
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002966:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800296a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800296e:	ebb2 0408 	subs.w	r4, r2, r8
 8002972:	eb63 0509 	sbc.w	r5, r3, r9
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	f04f 0300 	mov.w	r3, #0
 800297e:	00eb      	lsls	r3, r5, #3
 8002980:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002984:	00e2      	lsls	r2, r4, #3
 8002986:	4614      	mov	r4, r2
 8002988:	461d      	mov	r5, r3
 800298a:	eb14 030a 	adds.w	r3, r4, sl
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	eb45 030b 	adc.w	r3, r5, fp
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029a2:	4629      	mov	r1, r5
 80029a4:	028b      	lsls	r3, r1, #10
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ac:	4621      	mov	r1, r4
 80029ae:	028a      	lsls	r2, r1, #10
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b6:	2200      	movs	r2, #0
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	60fa      	str	r2, [r7, #12]
 80029bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c0:	f7fe f8a6 	bl	8000b10 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_GetSysClockFreq+0x180>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	0c1b      	lsrs	r3, r3, #16
 80029d2:	f003 0303 	and.w	r3, r3, #3
 80029d6:	3301      	adds	r3, #1
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80029dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029e6:	e002      	b.n	80029ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x184>)
 80029ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80029ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3740      	adds	r7, #64	; 0x40
 80029f4:	46bd      	mov	sp, r7
 80029f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	017d7840 	.word	0x017d7840

08002a08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	20000010 	.word	0x20000010

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a9b      	lsrs	r3, r3, #10
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4903      	ldr	r1, [pc, #12]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40023800 	.word	0x40023800
 8002a44:	08004cd4 	.word	0x08004cd4

08002a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a4c:	f7ff ffdc 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0b5b      	lsrs	r3, r3, #13
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08004cd4 	.word	0x08004cd4

08002a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e041      	b.n	8002b06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d106      	bne.n	8002a9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fe fda4 	bl	80015e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3304      	adds	r3, #4
 8002aac:	4619      	mov	r1, r3
 8002aae:	4610      	mov	r0, r2
 8002ab0:	f000 fbf0 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e041      	b.n	8002ba4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d106      	bne.n	8002b3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f839 	bl	8002bac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2202      	movs	r2, #2
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	3304      	adds	r3, #4
 8002b4a:	4619      	mov	r1, r3
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	f000 fba1 	bl	8003294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d109      	bne.n	8002be4 <HAL_TIM_PWM_Start+0x24>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf14      	ite	ne
 8002bdc:	2301      	movne	r3, #1
 8002bde:	2300      	moveq	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	e022      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d109      	bne.n	8002bfe <HAL_TIM_PWM_Start+0x3e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	bf14      	ite	ne
 8002bf6:	2301      	movne	r3, #1
 8002bf8:	2300      	moveq	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	e015      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d109      	bne.n	8002c18 <HAL_TIM_PWM_Start+0x58>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e008      	b.n	8002c2a <HAL_TIM_PWM_Start+0x6a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e068      	b.n	8002d04 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d104      	bne.n	8002c42 <HAL_TIM_PWM_Start+0x82>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c40:	e013      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d104      	bne.n	8002c52 <HAL_TIM_PWM_Start+0x92>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	e00b      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b08      	cmp	r3, #8
 8002c56:	d104      	bne.n	8002c62 <HAL_TIM_PWM_Start+0xa2>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c60:	e003      	b.n	8002c6a <HAL_TIM_PWM_Start+0xaa>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	6839      	ldr	r1, [r7, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fdb4 	bl	80037e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a23      	ldr	r2, [pc, #140]	; (8002d0c <HAL_TIM_PWM_Start+0x14c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_TIM_PWM_Start+0x14c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d013      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <HAL_TIM_PWM_Start+0x150>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_TIM_PWM_Start+0x154>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_TIM_PWM_Start+0x158>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_TIM_PWM_Start+0x10e>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_TIM_PWM_Start+0x15c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d111      	bne.n	8002cf2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	d010      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf0:	e007      	b.n	8002d02 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0201 	orr.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	40010000 	.word	0x40010000
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800
 8002d18:	40000c00 	.word	0x40000c00
 8002d1c:	40014000 	.word	0x40014000

08002d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d122      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d11b      	bne.n	8002d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f06f 0202 	mvn.w	r2, #2
 8002d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	f003 0303 	and.w	r3, r3, #3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa77 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002d68:	e005      	b.n	8002d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 fa69 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fa7a 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	f003 0304 	and.w	r3, r3, #4
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d122      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d11b      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f06f 0204 	mvn.w	r2, #4
 8002da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 fa4d 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002dbc:	e005      	b.n	8002dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fa3f 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 fa50 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d122      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0308 	and.w	r3, r3, #8
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d11b      	bne.n	8002e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0208 	mvn.w	r2, #8
 8002df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	69db      	ldr	r3, [r3, #28]
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d003      	beq.n	8002e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fa23 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e10:	e005      	b.n	8002e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 fa15 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fa26 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f003 0310 	and.w	r3, r3, #16
 8002e2e:	2b10      	cmp	r3, #16
 8002e30:	d122      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d11b      	bne.n	8002e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f06f 0210 	mvn.w	r2, #16
 8002e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f9f9 	bl	8003256 <HAL_TIM_IC_CaptureCallback>
 8002e64:	e005      	b.n	8002e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 f9eb 	bl	8003242 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f9fc 	bl	800326a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d10e      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d107      	bne.n	8002ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f06f 0201 	mvn.w	r2, #1
 8002e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f7fe fa3e 	bl	8001320 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eae:	2b80      	cmp	r3, #128	; 0x80
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	d107      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fd26 	bl	800391c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d10e      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee8:	2b40      	cmp	r3, #64	; 0x40
 8002eea:	d107      	bne.n	8002efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f9c1 	bl	800327e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b20      	cmp	r3, #32
 8002f08:	d10e      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d107      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f06f 0220 	mvn.w	r2, #32
 8002f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fcf0 	bl	8003908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f28:	bf00      	nop
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e0ae      	b.n	80030ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b0c      	cmp	r3, #12
 8002f5a:	f200 809f 	bhi.w	800309c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002f5e:	a201      	add	r2, pc, #4	; (adr r2, 8002f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002f99 	.word	0x08002f99
 8002f68:	0800309d 	.word	0x0800309d
 8002f6c:	0800309d 	.word	0x0800309d
 8002f70:	0800309d 	.word	0x0800309d
 8002f74:	08002fd9 	.word	0x08002fd9
 8002f78:	0800309d 	.word	0x0800309d
 8002f7c:	0800309d 	.word	0x0800309d
 8002f80:	0800309d 	.word	0x0800309d
 8002f84:	0800301b 	.word	0x0800301b
 8002f88:	0800309d 	.word	0x0800309d
 8002f8c:	0800309d 	.word	0x0800309d
 8002f90:	0800309d 	.word	0x0800309d
 8002f94:	0800305b 	.word	0x0800305b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68b9      	ldr	r1, [r7, #8]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 f9f8 	bl	8003394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699a      	ldr	r2, [r3, #24]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f042 0208 	orr.w	r2, r2, #8
 8002fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0204 	bic.w	r2, r2, #4
 8002fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6999      	ldr	r1, [r3, #24]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	691a      	ldr	r2, [r3, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	619a      	str	r2, [r3, #24]
      break;
 8002fd6:	e064      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68b9      	ldr	r1, [r7, #8]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fa3e 	bl	8003460 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699a      	ldr	r2, [r3, #24]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6999      	ldr	r1, [r3, #24]
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	021a      	lsls	r2, r3, #8
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	619a      	str	r2, [r3, #24]
      break;
 8003018:	e043      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	4618      	mov	r0, r3
 8003022:	f000 fa89 	bl	8003538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	69da      	ldr	r2, [r3, #28]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0208 	orr.w	r2, r2, #8
 8003034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0204 	bic.w	r2, r2, #4
 8003044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	69d9      	ldr	r1, [r3, #28]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	691a      	ldr	r2, [r3, #16]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	61da      	str	r2, [r3, #28]
      break;
 8003058:	e023      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	4618      	mov	r0, r3
 8003062:	f000 fad3 	bl	800360c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	69d9      	ldr	r1, [r3, #28]
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	021a      	lsls	r2, r3, #8
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
      break;
 800309a:	e002      	b.n	80030a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	75fb      	strb	r3, [r7, #23]
      break;
 80030a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030be:	2300      	movs	r3, #0
 80030c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_TIM_ConfigClockSource+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e0b4      	b.n	800323a <HAL_TIM_ConfigClockSource+0x186>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003108:	d03e      	beq.n	8003188 <HAL_TIM_ConfigClockSource+0xd4>
 800310a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800310e:	f200 8087 	bhi.w	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	f000 8086 	beq.w	8003226 <HAL_TIM_ConfigClockSource+0x172>
 800311a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800311e:	d87f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003120:	2b70      	cmp	r3, #112	; 0x70
 8003122:	d01a      	beq.n	800315a <HAL_TIM_ConfigClockSource+0xa6>
 8003124:	2b70      	cmp	r3, #112	; 0x70
 8003126:	d87b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003128:	2b60      	cmp	r3, #96	; 0x60
 800312a:	d050      	beq.n	80031ce <HAL_TIM_ConfigClockSource+0x11a>
 800312c:	2b60      	cmp	r3, #96	; 0x60
 800312e:	d877      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003130:	2b50      	cmp	r3, #80	; 0x50
 8003132:	d03c      	beq.n	80031ae <HAL_TIM_ConfigClockSource+0xfa>
 8003134:	2b50      	cmp	r3, #80	; 0x50
 8003136:	d873      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d058      	beq.n	80031ee <HAL_TIM_ConfigClockSource+0x13a>
 800313c:	2b40      	cmp	r3, #64	; 0x40
 800313e:	d86f      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003140:	2b30      	cmp	r3, #48	; 0x30
 8003142:	d064      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003144:	2b30      	cmp	r3, #48	; 0x30
 8003146:	d86b      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b20      	cmp	r3, #32
 800314a:	d060      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 800314c:	2b20      	cmp	r3, #32
 800314e:	d867      	bhi.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b00      	cmp	r3, #0
 8003152:	d05c      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003154:	2b10      	cmp	r3, #16
 8003156:	d05a      	beq.n	800320e <HAL_TIM_ConfigClockSource+0x15a>
 8003158:	e062      	b.n	8003220 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6899      	ldr	r1, [r3, #8]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	f000 fb19 	bl	80037a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800317c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
      break;
 8003186:	e04f      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6818      	ldr	r0, [r3, #0]
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	6899      	ldr	r1, [r3, #8]
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f000 fb02 	bl	80037a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031aa:	609a      	str	r2, [r3, #8]
      break;
 80031ac:	e03c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f000 fa76 	bl	80036ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	2150      	movs	r1, #80	; 0x50
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 facf 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 80031cc:	e02c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	461a      	mov	r2, r3
 80031dc:	f000 fa95 	bl	800370a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2160      	movs	r1, #96	; 0x60
 80031e6:	4618      	mov	r0, r3
 80031e8:	f000 fabf 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 80031ec:	e01c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6818      	ldr	r0, [r3, #0]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	6859      	ldr	r1, [r3, #4]
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f000 fa56 	bl	80036ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2140      	movs	r1, #64	; 0x40
 8003206:	4618      	mov	r0, r3
 8003208:	f000 faaf 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 800320c:	e00c      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	4610      	mov	r0, r2
 800321a:	f000 faa6 	bl	800376a <TIM_ITRx_SetConfig>
      break;
 800321e:	e003      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	73fb      	strb	r3, [r7, #15]
      break;
 8003224:	e000      	b.n	8003228 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003226:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003238:	7bfb      	ldrb	r3, [r7, #15]
}
 800323a:	4618      	mov	r0, r3
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}

08003242 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003242:	b480      	push	{r7}
 8003244:	b083      	sub	sp, #12
 8003246:	af00      	add	r7, sp, #0
 8003248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800324a:	bf00      	nop
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr

0800326a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	4a34      	ldr	r2, [pc, #208]	; (8003378 <TIM_Base_SetConfig+0xe4>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00f      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b2:	d00b      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a31      	ldr	r2, [pc, #196]	; (800337c <TIM_Base_SetConfig+0xe8>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d007      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a30      	ldr	r2, [pc, #192]	; (8003380 <TIM_Base_SetConfig+0xec>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <TIM_Base_SetConfig+0x38>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a2f      	ldr	r2, [pc, #188]	; (8003384 <TIM_Base_SetConfig+0xf0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d108      	bne.n	80032de <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a25      	ldr	r2, [pc, #148]	; (8003378 <TIM_Base_SetConfig+0xe4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01b      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ec:	d017      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a22      	ldr	r2, [pc, #136]	; (800337c <TIM_Base_SetConfig+0xe8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a21      	ldr	r2, [pc, #132]	; (8003380 <TIM_Base_SetConfig+0xec>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d00f      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a20      	ldr	r2, [pc, #128]	; (8003384 <TIM_Base_SetConfig+0xf0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d00b      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <TIM_Base_SetConfig+0xf4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d007      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a1e      	ldr	r2, [pc, #120]	; (800338c <TIM_Base_SetConfig+0xf8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d003      	beq.n	800331e <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <TIM_Base_SetConfig+0xfc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d108      	bne.n	8003330 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	4313      	orrs	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <TIM_Base_SetConfig+0xe4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	691a      	ldr	r2, [r3, #16]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	615a      	str	r2, [r3, #20]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40000c00 	.word	0x40000c00
 8003388:	40014000 	.word	0x40014000
 800338c:	40014400 	.word	0x40014400
 8003390:	40014800 	.word	0x40014800

08003394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	f023 0201 	bic.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0303 	bic.w	r3, r3, #3
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f023 0302 	bic.w	r3, r3, #2
 80033dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <TIM_OC1_SetConfig+0xc8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d10c      	bne.n	800340a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	f023 0308 	bic.w	r3, r3, #8
 80033f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f023 0304 	bic.w	r3, r3, #4
 8003408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <TIM_OC1_SetConfig+0xc8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d111      	bne.n	8003436 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685a      	ldr	r2, [r3, #4]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	621a      	str	r2, [r3, #32]
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	40010000 	.word	0x40010000

08003460 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003460:	b480      	push	{r7}
 8003462:	b087      	sub	sp, #28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0210 	bic.w	r2, r3, #16
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800348e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	021b      	lsls	r3, r3, #8
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0320 	bic.w	r3, r3, #32
 80034aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a1e      	ldr	r2, [pc, #120]	; (8003534 <TIM_OC2_SetConfig+0xd4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d10d      	bne.n	80034dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a15      	ldr	r2, [pc, #84]	; (8003534 <TIM_OC2_SetConfig+0xd4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d113      	bne.n	800350c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	621a      	str	r2, [r3, #32]
}
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40010000 	.word	0x40010000

08003538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003538:	b480      	push	{r7}
 800353a:	b087      	sub	sp, #28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0303 	bic.w	r3, r3, #3
 800356e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	697a      	ldr	r2, [r7, #20]
 800358a:	4313      	orrs	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a1d      	ldr	r2, [pc, #116]	; (8003608 <TIM_OC3_SetConfig+0xd0>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10d      	bne.n	80035b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800359c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	021b      	lsls	r3, r3, #8
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a14      	ldr	r2, [pc, #80]	; (8003608 <TIM_OC3_SetConfig+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d113      	bne.n	80035e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	011b      	lsls	r3, r3, #4
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	621a      	str	r2, [r3, #32]
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	40010000 	.word	0x40010000

0800360c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800360c:	b480      	push	{r7}
 800360e:	b087      	sub	sp, #28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a1b      	ldr	r3, [r3, #32]
 8003626:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69db      	ldr	r3, [r3, #28]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	021b      	lsls	r3, r3, #8
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003656:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	031b      	lsls	r3, r3, #12
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a10      	ldr	r2, [pc, #64]	; (80036a8 <TIM_OC4_SetConfig+0x9c>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d109      	bne.n	8003680 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003672:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	621a      	str	r2, [r3, #32]
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40010000 	.word	0x40010000

080036ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0201 	bic.w	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f023 030a 	bic.w	r3, r3, #10
 80036e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	621a      	str	r2, [r3, #32]
}
 80036fe:	bf00      	nop
 8003700:	371c      	adds	r7, #28
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800370a:	b480      	push	{r7}
 800370c:	b087      	sub	sp, #28
 800370e:	af00      	add	r7, sp, #0
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	60b9      	str	r1, [r7, #8]
 8003714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	f023 0210 	bic.w	r2, r3, #16
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003734:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	031b      	lsls	r3, r3, #12
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	4313      	orrs	r3, r2
 800373e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003746:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800376a:	b480      	push	{r7}
 800376c:	b085      	sub	sp, #20
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003780:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	f043 0307 	orr.w	r3, r3, #7
 800378c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	609a      	str	r2, [r3, #8]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	021a      	lsls	r2, r3, #8
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	609a      	str	r2, [r3, #8]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 031f 	and.w	r3, r3, #31
 80037f2:	2201      	movs	r2, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a1a      	ldr	r2, [r3, #32]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	43db      	mvns	r3, r3
 8003802:	401a      	ands	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a1a      	ldr	r2, [r3, #32]
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	6879      	ldr	r1, [r7, #4]
 8003814:	fa01 f303 	lsl.w	r3, r1, r3
 8003818:	431a      	orrs	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800382c:	b480      	push	{r7}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003840:	2302      	movs	r3, #2
 8003842:	e050      	b.n	80038e6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2202      	movs	r2, #2
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a1c      	ldr	r2, [pc, #112]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d018      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003890:	d013      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a18      	ldr	r2, [pc, #96]	; (80038f8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00e      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a16      	ldr	r2, [pc, #88]	; (80038fc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d009      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a15      	ldr	r2, [pc, #84]	; (8003900 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d004      	beq.n	80038ba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10c      	bne.n	80038d4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40000400 	.word	0x40000400
 80038fc:	40000800 	.word	0x40000800
 8003900:	40000c00 	.word	0x40000c00
 8003904:	40014000 	.word	0x40014000

08003908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003924:	bf00      	nop
 8003926:	370c      	adds	r7, #12
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e03f      	b.n	80039c2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fd ff04 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2224      	movs	r2, #36	; 0x24
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68da      	ldr	r2, [r3, #12]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003972:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f929 	bl	8003bcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	691a      	ldr	r2, [r3, #16]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003988:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695a      	ldr	r2, [r3, #20]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003998:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b08a      	sub	sp, #40	; 0x28
 80039ce:	af02      	add	r7, sp, #8
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	603b      	str	r3, [r7, #0]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039da:	2300      	movs	r3, #0
 80039dc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b20      	cmp	r3, #32
 80039e8:	d17c      	bne.n	8003ae4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d002      	beq.n	80039f6 <HAL_UART_Transmit+0x2c>
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e075      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_UART_Transmit+0x3e>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e06e      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2221      	movs	r2, #33	; 0x21
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a1e:	f7fd ff79 	bl	8001914 <HAL_GetTick>
 8003a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	88fa      	ldrh	r2, [r7, #6]
 8003a28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	88fa      	ldrh	r2, [r7, #6]
 8003a2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a38:	d108      	bne.n	8003a4c <HAL_UART_Transmit+0x82>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	61bb      	str	r3, [r7, #24]
 8003a4a:	e003      	b.n	8003a54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a5c:	e02a      	b.n	8003ab4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2200      	movs	r2, #0
 8003a66:	2180      	movs	r1, #128	; 0x80
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f840 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e036      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	3302      	adds	r3, #2
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e007      	b.n	8003aa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1cf      	bne.n	8003a5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2140      	movs	r1, #64	; 0x40
 8003ac8:	68f8      	ldr	r0, [r7, #12]
 8003aca:	f000 f810 	bl	8003aee <UART_WaitOnFlagUntilTimeout>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ad4:	2303      	movs	r3, #3
 8003ad6:	e006      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3720      	adds	r7, #32
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b090      	sub	sp, #64	; 0x40
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afe:	e050      	b.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b06:	d04c      	beq.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x30>
 8003b0e:	f7fd ff01 	bl	8001914 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d241      	bcs.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	330c      	adds	r3, #12
 8003b24:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	330c      	adds	r3, #12
 8003b3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b3e:	637a      	str	r2, [r7, #52]	; 0x34
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b46:	e841 2300 	strex	r3, r2, [r1]
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1e5      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3314      	adds	r3, #20
 8003b58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	613b      	str	r3, [r7, #16]
   return(result);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3314      	adds	r3, #20
 8003b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b72:	623a      	str	r2, [r7, #32]
 8003b74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b76:	69f9      	ldr	r1, [r7, #28]
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	e841 2300 	strex	r3, r2, [r1]
 8003b7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1e5      	bne.n	8003b52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2220      	movs	r2, #32
 8003b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e00f      	b.n	8003bc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4013      	ands	r3, r2
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	bf0c      	ite	eq
 8003bb2:	2301      	moveq	r3, #1
 8003bb4:	2300      	movne	r3, #0
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	461a      	mov	r2, r3
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	429a      	cmp	r2, r3
 8003bbe:	d09f      	beq.n	8003b00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3740      	adds	r7, #64	; 0x40
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd0:	b0c0      	sub	sp, #256	; 0x100
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	691b      	ldr	r3, [r3, #16]
 8003be0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be8:	68d9      	ldr	r1, [r3, #12]
 8003bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	ea40 0301 	orr.w	r3, r0, r1
 8003bf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	695b      	ldr	r3, [r3, #20]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c24:	f021 010c 	bic.w	r1, r1, #12
 8003c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c32:	430b      	orrs	r3, r1
 8003c34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c46:	6999      	ldr	r1, [r3, #24]
 8003c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	ea40 0301 	orr.w	r3, r0, r1
 8003c52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	4b8f      	ldr	r3, [pc, #572]	; (8003e98 <UART_SetConfig+0x2cc>)
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d005      	beq.n	8003c6c <UART_SetConfig+0xa0>
 8003c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	4b8d      	ldr	r3, [pc, #564]	; (8003e9c <UART_SetConfig+0x2d0>)
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d104      	bne.n	8003c76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c6c:	f7fe feec 	bl	8002a48 <HAL_RCC_GetPCLK2Freq>
 8003c70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c74:	e003      	b.n	8003c7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c76:	f7fe fed3 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8003c7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c88:	f040 810c 	bne.w	8003ea4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c9e:	4622      	mov	r2, r4
 8003ca0:	462b      	mov	r3, r5
 8003ca2:	1891      	adds	r1, r2, r2
 8003ca4:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ca6:	415b      	adcs	r3, r3
 8003ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003caa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003cae:	4621      	mov	r1, r4
 8003cb0:	eb12 0801 	adds.w	r8, r2, r1
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	eb43 0901 	adc.w	r9, r3, r1
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cce:	4690      	mov	r8, r2
 8003cd0:	4699      	mov	r9, r3
 8003cd2:	4623      	mov	r3, r4
 8003cd4:	eb18 0303 	adds.w	r3, r8, r3
 8003cd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cdc:	462b      	mov	r3, r5
 8003cde:	eb49 0303 	adc.w	r3, r9, r3
 8003ce2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	18db      	adds	r3, r3, r3
 8003cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8003d00:	4613      	mov	r3, r2
 8003d02:	eb42 0303 	adc.w	r3, r2, r3
 8003d06:	657b      	str	r3, [r7, #84]	; 0x54
 8003d08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d10:	f7fc fefe 	bl	8000b10 <__aeabi_uldivmod>
 8003d14:	4602      	mov	r2, r0
 8003d16:	460b      	mov	r3, r1
 8003d18:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <UART_SetConfig+0x2d4>)
 8003d1a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d1e:	095b      	lsrs	r3, r3, #5
 8003d20:	011c      	lsls	r4, r3, #4
 8003d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	1891      	adds	r1, r2, r2
 8003d3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d3c:	415b      	adcs	r3, r3
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d44:	4641      	mov	r1, r8
 8003d46:	eb12 0a01 	adds.w	sl, r2, r1
 8003d4a:	4649      	mov	r1, r9
 8003d4c:	eb43 0b01 	adc.w	fp, r3, r1
 8003d50:	f04f 0200 	mov.w	r2, #0
 8003d54:	f04f 0300 	mov.w	r3, #0
 8003d58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d64:	4692      	mov	sl, r2
 8003d66:	469b      	mov	fp, r3
 8003d68:	4643      	mov	r3, r8
 8003d6a:	eb1a 0303 	adds.w	r3, sl, r3
 8003d6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d72:	464b      	mov	r3, r9
 8003d74:	eb4b 0303 	adc.w	r3, fp, r3
 8003d78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d90:	460b      	mov	r3, r1
 8003d92:	18db      	adds	r3, r3, r3
 8003d94:	643b      	str	r3, [r7, #64]	; 0x40
 8003d96:	4613      	mov	r3, r2
 8003d98:	eb42 0303 	adc.w	r3, r2, r3
 8003d9c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003da2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003da6:	f7fc feb3 	bl	8000b10 <__aeabi_uldivmod>
 8003daa:	4602      	mov	r2, r0
 8003dac:	460b      	mov	r3, r1
 8003dae:	4611      	mov	r1, r2
 8003db0:	4b3b      	ldr	r3, [pc, #236]	; (8003ea0 <UART_SetConfig+0x2d4>)
 8003db2:	fba3 2301 	umull	r2, r3, r3, r1
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	2264      	movs	r2, #100	; 0x64
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	1acb      	subs	r3, r1, r3
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <UART_SetConfig+0x2d4>)
 8003dc8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	005b      	lsls	r3, r3, #1
 8003dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dd4:	441c      	add	r4, r3
 8003dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003de0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003de4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003de8:	4642      	mov	r2, r8
 8003dea:	464b      	mov	r3, r9
 8003dec:	1891      	adds	r1, r2, r2
 8003dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8003df0:	415b      	adcs	r3, r3
 8003df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003df8:	4641      	mov	r1, r8
 8003dfa:	1851      	adds	r1, r2, r1
 8003dfc:	6339      	str	r1, [r7, #48]	; 0x30
 8003dfe:	4649      	mov	r1, r9
 8003e00:	414b      	adcs	r3, r1
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e10:	4659      	mov	r1, fp
 8003e12:	00cb      	lsls	r3, r1, #3
 8003e14:	4651      	mov	r1, sl
 8003e16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1a:	4651      	mov	r1, sl
 8003e1c:	00ca      	lsls	r2, r1, #3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	4603      	mov	r3, r0
 8003e24:	4642      	mov	r2, r8
 8003e26:	189b      	adds	r3, r3, r2
 8003e28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e2c:	464b      	mov	r3, r9
 8003e2e:	460a      	mov	r2, r1
 8003e30:	eb42 0303 	adc.w	r3, r2, r3
 8003e34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	18db      	adds	r3, r3, r3
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e52:	4613      	mov	r3, r2
 8003e54:	eb42 0303 	adc.w	r3, r2, r3
 8003e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e62:	f7fc fe55 	bl	8000b10 <__aeabi_uldivmod>
 8003e66:	4602      	mov	r2, r0
 8003e68:	460b      	mov	r3, r1
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	; (8003ea0 <UART_SetConfig+0x2d4>)
 8003e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	3332      	adds	r3, #50	; 0x32
 8003e7e:	4a08      	ldr	r2, [pc, #32]	; (8003ea0 <UART_SetConfig+0x2d4>)
 8003e80:	fba2 2303 	umull	r2, r3, r2, r3
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	f003 0207 	and.w	r2, r3, #7
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4422      	add	r2, r4
 8003e92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e94:	e105      	b.n	80040a2 <UART_SetConfig+0x4d6>
 8003e96:	bf00      	nop
 8003e98:	40011000 	.word	0x40011000
 8003e9c:	40011400 	.word	0x40011400
 8003ea0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003eae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003eb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003eb6:	4642      	mov	r2, r8
 8003eb8:	464b      	mov	r3, r9
 8003eba:	1891      	adds	r1, r2, r2
 8003ebc:	6239      	str	r1, [r7, #32]
 8003ebe:	415b      	adcs	r3, r3
 8003ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ec6:	4641      	mov	r1, r8
 8003ec8:	1854      	adds	r4, r2, r1
 8003eca:	4649      	mov	r1, r9
 8003ecc:	eb43 0501 	adc.w	r5, r3, r1
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	00eb      	lsls	r3, r5, #3
 8003eda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ede:	00e2      	lsls	r2, r4, #3
 8003ee0:	4614      	mov	r4, r2
 8003ee2:	461d      	mov	r5, r3
 8003ee4:	4643      	mov	r3, r8
 8003ee6:	18e3      	adds	r3, r4, r3
 8003ee8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003eec:	464b      	mov	r3, r9
 8003eee:	eb45 0303 	adc.w	r3, r5, r3
 8003ef2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003f02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f06:	f04f 0200 	mov.w	r2, #0
 8003f0a:	f04f 0300 	mov.w	r3, #0
 8003f0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f12:	4629      	mov	r1, r5
 8003f14:	008b      	lsls	r3, r1, #2
 8003f16:	4621      	mov	r1, r4
 8003f18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	008a      	lsls	r2, r1, #2
 8003f20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f24:	f7fc fdf4 	bl	8000b10 <__aeabi_uldivmod>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4b60      	ldr	r3, [pc, #384]	; (80040b0 <UART_SetConfig+0x4e4>)
 8003f2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003f32:	095b      	lsrs	r3, r3, #5
 8003f34:	011c      	lsls	r4, r3, #4
 8003f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f48:	4642      	mov	r2, r8
 8003f4a:	464b      	mov	r3, r9
 8003f4c:	1891      	adds	r1, r2, r2
 8003f4e:	61b9      	str	r1, [r7, #24]
 8003f50:	415b      	adcs	r3, r3
 8003f52:	61fb      	str	r3, [r7, #28]
 8003f54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f58:	4641      	mov	r1, r8
 8003f5a:	1851      	adds	r1, r2, r1
 8003f5c:	6139      	str	r1, [r7, #16]
 8003f5e:	4649      	mov	r1, r9
 8003f60:	414b      	adcs	r3, r1
 8003f62:	617b      	str	r3, [r7, #20]
 8003f64:	f04f 0200 	mov.w	r2, #0
 8003f68:	f04f 0300 	mov.w	r3, #0
 8003f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f70:	4659      	mov	r1, fp
 8003f72:	00cb      	lsls	r3, r1, #3
 8003f74:	4651      	mov	r1, sl
 8003f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7a:	4651      	mov	r1, sl
 8003f7c:	00ca      	lsls	r2, r1, #3
 8003f7e:	4610      	mov	r0, r2
 8003f80:	4619      	mov	r1, r3
 8003f82:	4603      	mov	r3, r0
 8003f84:	4642      	mov	r2, r8
 8003f86:	189b      	adds	r3, r3, r2
 8003f88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f8c:	464b      	mov	r3, r9
 8003f8e:	460a      	mov	r2, r1
 8003f90:	eb42 0303 	adc.w	r3, r2, r3
 8003f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fa2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	008b      	lsls	r3, r1, #2
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fba:	4641      	mov	r1, r8
 8003fbc:	008a      	lsls	r2, r1, #2
 8003fbe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fc2:	f7fc fda5 	bl	8000b10 <__aeabi_uldivmod>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	460b      	mov	r3, r1
 8003fca:	4b39      	ldr	r3, [pc, #228]	; (80040b0 <UART_SetConfig+0x4e4>)
 8003fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd0:	095b      	lsrs	r3, r3, #5
 8003fd2:	2164      	movs	r1, #100	; 0x64
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	3332      	adds	r3, #50	; 0x32
 8003fde:	4a34      	ldr	r2, [pc, #208]	; (80040b0 <UART_SetConfig+0x4e4>)
 8003fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe4:	095b      	lsrs	r3, r3, #5
 8003fe6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fea:	441c      	add	r4, r3
 8003fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	673b      	str	r3, [r7, #112]	; 0x70
 8003ff4:	677a      	str	r2, [r7, #116]	; 0x74
 8003ff6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ffa:	4642      	mov	r2, r8
 8003ffc:	464b      	mov	r3, r9
 8003ffe:	1891      	adds	r1, r2, r2
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	415b      	adcs	r3, r3
 8004004:	60fb      	str	r3, [r7, #12]
 8004006:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800400a:	4641      	mov	r1, r8
 800400c:	1851      	adds	r1, r2, r1
 800400e:	6039      	str	r1, [r7, #0]
 8004010:	4649      	mov	r1, r9
 8004012:	414b      	adcs	r3, r1
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	f04f 0300 	mov.w	r3, #0
 800401e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004022:	4659      	mov	r1, fp
 8004024:	00cb      	lsls	r3, r1, #3
 8004026:	4651      	mov	r1, sl
 8004028:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800402c:	4651      	mov	r1, sl
 800402e:	00ca      	lsls	r2, r1, #3
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	4603      	mov	r3, r0
 8004036:	4642      	mov	r2, r8
 8004038:	189b      	adds	r3, r3, r2
 800403a:	66bb      	str	r3, [r7, #104]	; 0x68
 800403c:	464b      	mov	r3, r9
 800403e:	460a      	mov	r2, r1
 8004040:	eb42 0303 	adc.w	r3, r2, r3
 8004044:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	663b      	str	r3, [r7, #96]	; 0x60
 8004050:	667a      	str	r2, [r7, #100]	; 0x64
 8004052:	f04f 0200 	mov.w	r2, #0
 8004056:	f04f 0300 	mov.w	r3, #0
 800405a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800405e:	4649      	mov	r1, r9
 8004060:	008b      	lsls	r3, r1, #2
 8004062:	4641      	mov	r1, r8
 8004064:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004068:	4641      	mov	r1, r8
 800406a:	008a      	lsls	r2, r1, #2
 800406c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004070:	f7fc fd4e 	bl	8000b10 <__aeabi_uldivmod>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4b0d      	ldr	r3, [pc, #52]	; (80040b0 <UART_SetConfig+0x4e4>)
 800407a:	fba3 1302 	umull	r1, r3, r3, r2
 800407e:	095b      	lsrs	r3, r3, #5
 8004080:	2164      	movs	r1, #100	; 0x64
 8004082:	fb01 f303 	mul.w	r3, r1, r3
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	3332      	adds	r3, #50	; 0x32
 800408c:	4a08      	ldr	r2, [pc, #32]	; (80040b0 <UART_SetConfig+0x4e4>)
 800408e:	fba2 2303 	umull	r2, r3, r2, r3
 8004092:	095b      	lsrs	r3, r3, #5
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4422      	add	r2, r4
 80040a0:	609a      	str	r2, [r3, #8]
}
 80040a2:	bf00      	nop
 80040a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040a8:	46bd      	mov	sp, r7
 80040aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ae:	bf00      	nop
 80040b0:	51eb851f 	.word	0x51eb851f

080040b4 <rgb_pwm_star>:
 *      Author: Daniel Meneses
 */

#include "rgb_pwm.h"

void rgb_pwm_star(void){
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(RGB_HANDLER, TIM_CHANNEL_RED);
 80040b8:	2100      	movs	r1, #0
 80040ba:	4806      	ldr	r0, [pc, #24]	; (80040d4 <rgb_pwm_star+0x20>)
 80040bc:	f7fe fd80 	bl	8002bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(RGB_HANDLER, TIM_CHANNEL_GREEN);
 80040c0:	2104      	movs	r1, #4
 80040c2:	4804      	ldr	r0, [pc, #16]	; (80040d4 <rgb_pwm_star+0x20>)
 80040c4:	f7fe fd7c 	bl	8002bc0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(RGB_HANDLER, TIM_CHANNEL_BLUE);
 80040c8:	2108      	movs	r1, #8
 80040ca:	4802      	ldr	r0, [pc, #8]	; (80040d4 <rgb_pwm_star+0x20>)
 80040cc:	f7fe fd78 	bl	8002bc0 <HAL_TIM_PWM_Start>
}
 80040d0:	bf00      	nop
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000094 	.word	0x20000094

080040d8 <rgb_pwm_update>:
	HAL_TIM_PWM_Stop(RGB_HANDLER, TIM_CHANNEL_RED);
	HAL_TIM_PWM_Stop(RGB_HANDLER, TIM_CHANNEL_GREEN);
	HAL_TIM_PWM_Stop(RGB_HANDLER, TIM_CHANNEL_BLUE);
}

void rgb_pwm_update(rgb_color_t *rgb_color){
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	uint8_t r,g,b;

	r = (uint8_t)(rgb_color->colors.red);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	73fb      	strb	r3, [r7, #15]
	g = (uint8_t)(rgb_color->colors.green);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	73bb      	strb	r3, [r7, #14]
	b = (uint8_t)(rgb_color->colors.blue);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	789b      	ldrb	r3, [r3, #2]
 80040f0:	737b      	strb	r3, [r7, #13]
	__HAL_TIM_SET_COMPARE(RGB_HANDLER, TIM_CHANNEL_RED, r);
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <rgb_pwm_update+0x40>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(RGB_HANDLER, TIM_CHANNEL_GREEN, g);
 80040fa:	4b07      	ldr	r3, [pc, #28]	; (8004118 <rgb_pwm_update+0x40>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	7bba      	ldrb	r2, [r7, #14]
 8004100:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(RGB_HANDLER, TIM_CHANNEL_BLUE, b);
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <rgb_pwm_update+0x40>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	7b7a      	ldrb	r2, [r7, #13]
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800410a:	bf00      	nop
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr
 8004116:	bf00      	nop
 8004118:	20000094 	.word	0x20000094

0800411c <uart_xprintf_write>:
 *  Created on: Jul 20, 2022
 *      Author: edx
 */
#include "edx_xprintf.h"

 void uart_xprintf_write(int byte){
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART_XPRINTF, (uint8_t *)&byte, 1, 100);
 8004124:	1d39      	adds	r1, r7, #4
 8004126:	2364      	movs	r3, #100	; 0x64
 8004128:	2201      	movs	r2, #1
 800412a:	4803      	ldr	r0, [pc, #12]	; (8004138 <uart_xprintf_write+0x1c>)
 800412c:	f7ff fc4d 	bl	80039ca <HAL_UART_Transmit>
	}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000124 	.word	0x20000124

0800413c <xprintf_init>:

extern void xprintf_init(void){
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
	  xdev_out(uart_xprintf_write);
 8004140:	4b03      	ldr	r3, [pc, #12]	; (8004150 <xprintf_init+0x14>)
 8004142:	4a04      	ldr	r2, [pc, #16]	; (8004154 <xprintf_init+0x18>)
 8004144:	601a      	str	r2, [r3, #0]
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	2000016c 	.word	0x2000016c
 8004154:	0800411d 	.word	0x0800411d

08004158 <xprint_clear>:

void xprint_clear(void){
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
	xprintf("\r\x1b[2J\r");
 800415c:	4802      	ldr	r0, [pc, #8]	; (8004168 <xprint_clear+0x10>)
 800415e:	f000 fd13 	bl	8004b88 <xprintf>
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	08004cac 	.word	0x08004cac
 800416c:	00000000 	.word	0x00000000

08004170 <ilog10>:
/*----------------------------------------------*/
#include <math.h>


static int ilog10 (double n)	/* Calculate log10(n) in integer output */
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	ed87 0b00 	vstr	d0, [r7]
	int rv = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	60fb      	str	r3, [r7, #12]

	while (n >= 10) {	/* Decimate digit in right shift */
 800417e:	e026      	b.n	80041ce <ilog10+0x5e>
		if (n >= 100000) {
 8004180:	a335      	add	r3, pc, #212	; (adr r3, 8004258 <ilog10+0xe8>)
 8004182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004186:	e9d7 0100 	ldrd	r0, r1, [r7]
 800418a:	f7fc fc6f 	bl	8000a6c <__aeabi_dcmpge>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00e      	beq.n	80041b2 <ilog10+0x42>
			n /= 100000; rv += 5;
 8004194:	a330      	add	r3, pc, #192	; (adr r3, 8004258 <ilog10+0xe8>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800419e:	f7fc fb09 	bl	80007b4 <__aeabi_ddiv>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	e9c7 2300 	strd	r2, r3, [r7]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	3305      	adds	r3, #5
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e00d      	b.n	80041ce <ilog10+0x5e>
		} else {
			n /= 10; rv++;
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	4b2a      	ldr	r3, [pc, #168]	; (8004260 <ilog10+0xf0>)
 80041b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041bc:	f7fc fafa 	bl	80007b4 <__aeabi_ddiv>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	e9c7 2300 	strd	r2, r3, [r7]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	3301      	adds	r3, #1
 80041cc:	60fb      	str	r3, [r7, #12]
	while (n >= 10) {	/* Decimate digit in right shift */
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	4b23      	ldr	r3, [pc, #140]	; (8004260 <ilog10+0xf0>)
 80041d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041d8:	f7fc fc48 	bl	8000a6c <__aeabi_dcmpge>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ce      	bne.n	8004180 <ilog10+0x10>
		}
	}
	while (n < 1) {		/* Decimate digit in left shift */
 80041e2:	e026      	b.n	8004232 <ilog10+0xc2>
		if (n < 0.00001) {
 80041e4:	a31a      	add	r3, pc, #104	; (adr r3, 8004250 <ilog10+0xe0>)
 80041e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80041ee:	f7fc fc29 	bl	8000a44 <__aeabi_dcmplt>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00e      	beq.n	8004216 <ilog10+0xa6>
			n *= 100000; rv -= 5;
 80041f8:	a317      	add	r3, pc, #92	; (adr r3, 8004258 <ilog10+0xe8>)
 80041fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004202:	f7fc f9ad 	bl	8000560 <__aeabi_dmul>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	e9c7 2300 	strd	r2, r3, [r7]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b05      	subs	r3, #5
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	e00d      	b.n	8004232 <ilog10+0xc2>
		} else {
			n *= 10; rv--;
 8004216:	f04f 0200 	mov.w	r2, #0
 800421a:	4b11      	ldr	r3, [pc, #68]	; (8004260 <ilog10+0xf0>)
 800421c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004220:	f7fc f99e 	bl	8000560 <__aeabi_dmul>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	e9c7 2300 	strd	r2, r3, [r7]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	3b01      	subs	r3, #1
 8004230:	60fb      	str	r3, [r7, #12]
	while (n < 1) {		/* Decimate digit in left shift */
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	4b0b      	ldr	r3, [pc, #44]	; (8004264 <ilog10+0xf4>)
 8004238:	e9d7 0100 	ldrd	r0, r1, [r7]
 800423c:	f7fc fc02 	bl	8000a44 <__aeabi_dcmplt>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ce      	bne.n	80041e4 <ilog10+0x74>
		}
	}
	return rv;
 8004246:	68fb      	ldr	r3, [r7, #12]
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	88e368f1 	.word	0x88e368f1
 8004254:	3ee4f8b5 	.word	0x3ee4f8b5
 8004258:	00000000 	.word	0x00000000
 800425c:	40f86a00 	.word	0x40f86a00
 8004260:	40240000 	.word	0x40240000
 8004264:	3ff00000 	.word	0x3ff00000

08004268 <i10x>:


static double i10x (int n)	/* Calculate 10^n */
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
	double rv = 1;
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	4b2e      	ldr	r3, [pc, #184]	; (8004330 <i10x+0xc8>)
 8004276:	e9c7 2302 	strd	r2, r3, [r7, #8]

	while (n > 0) {		/* Left shift */
 800427a:	e01f      	b.n	80042bc <i10x+0x54>
		if (n >= 5) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b04      	cmp	r3, #4
 8004280:	dd0e      	ble.n	80042a0 <i10x+0x38>
			rv *= 100000; n -= 5;
 8004282:	a329      	add	r3, pc, #164	; (adr r3, 8004328 <i10x+0xc0>)
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800428c:	f7fc f968 	bl	8000560 <__aeabi_dmul>
 8004290:	4602      	mov	r2, r0
 8004292:	460b      	mov	r3, r1
 8004294:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3b05      	subs	r3, #5
 800429c:	607b      	str	r3, [r7, #4]
 800429e:	e00d      	b.n	80042bc <i10x+0x54>
		} else {
			rv *= 10; n--;
 80042a0:	f04f 0200 	mov.w	r2, #0
 80042a4:	4b23      	ldr	r3, [pc, #140]	; (8004334 <i10x+0xcc>)
 80042a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042aa:	f7fc f959 	bl	8000560 <__aeabi_dmul>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	607b      	str	r3, [r7, #4]
	while (n > 0) {		/* Left shift */
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	dcdc      	bgt.n	800427c <i10x+0x14>
		}
	}
	while (n < 0) {		/* Right shift */
 80042c2:	e020      	b.n	8004306 <i10x+0x9e>
		if (n <= -5) {
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f113 0f04 	cmn.w	r3, #4
 80042ca:	da0e      	bge.n	80042ea <i10x+0x82>
			rv /= 100000; n += 5;
 80042cc:	a316      	add	r3, pc, #88	; (adr r3, 8004328 <i10x+0xc0>)
 80042ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042d6:	f7fc fa6d 	bl	80007b4 <__aeabi_ddiv>
 80042da:	4602      	mov	r2, r0
 80042dc:	460b      	mov	r3, r1
 80042de:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3305      	adds	r3, #5
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	e00d      	b.n	8004306 <i10x+0x9e>
		} else {
			rv /= 10; n++;
 80042ea:	f04f 0200 	mov.w	r2, #0
 80042ee:	4b11      	ldr	r3, [pc, #68]	; (8004334 <i10x+0xcc>)
 80042f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80042f4:	f7fc fa5e 	bl	80007b4 <__aeabi_ddiv>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	3301      	adds	r3, #1
 8004304:	607b      	str	r3, [r7, #4]
	while (n < 0) {		/* Right shift */
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	dbdb      	blt.n	80042c4 <i10x+0x5c>
		}
	}
	return rv;
 800430c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004310:	ec43 2b17 	vmov	d7, r2, r3
}
 8004314:	eeb0 0a47 	vmov.f32	s0, s14
 8004318:	eef0 0a67 	vmov.f32	s1, s15
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	f3af 8000 	nop.w
 8004328:	00000000 	.word	0x00000000
 800432c:	40f86a00 	.word	0x40f86a00
 8004330:	3ff00000 	.word	0x3ff00000
 8004334:	40240000 	.word	0x40240000

08004338 <ftoa>:
	char* buf,	/* Buffer to output the generated string */
	double val,	/* Real number to output */
	int prec,	/* Number of fractinal digits */
	char fmt	/* Notation */
)
{
 8004338:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433a:	b091      	sub	sp, #68	; 0x44
 800433c:	af00      	add	r7, sp, #0
 800433e:	61f8      	str	r0, [r7, #28]
 8004340:	ed87 0b04 	vstr	d0, [r7, #16]
 8004344:	61b9      	str	r1, [r7, #24]
 8004346:	4613      	mov	r3, r2
 8004348:	73fb      	strb	r3, [r7, #15]
	int d;
	int e = 0, m = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800434e:	2300      	movs	r3, #0
 8004350:	63bb      	str	r3, [r7, #56]	; 0x38
	char sign = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	double w;
	const char *er = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	633b      	str	r3, [r7, #48]	; 0x30


	if (isnan(val)) {			/* Not a number? */
 800435c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004360:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004364:	f7fc fb96 	bl	8000a94 <__aeabi_dcmpun>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <ftoa+0x3c>
		er = "NaN";
 800436e:	4b8e      	ldr	r3, [pc, #568]	; (80045a8 <ftoa+0x270>)
 8004370:	633b      	str	r3, [r7, #48]	; 0x30
 8004372:	e147      	b.n	8004604 <ftoa+0x2cc>
	} else {
		if (prec < 0) prec = 6;	/* Default precision (6 fractional digits) */
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	2b00      	cmp	r3, #0
 8004378:	da01      	bge.n	800437e <ftoa+0x46>
 800437a:	2306      	movs	r3, #6
 800437c:	61bb      	str	r3, [r7, #24]
		if (val < 0) {			/* Nagative value? */
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	f04f 0300 	mov.w	r3, #0
 8004386:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800438a:	f7fc fb5b 	bl	8000a44 <__aeabi_dcmplt>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <ftoa+0x78>
			val = -val; sign = '-';
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	ed97 7b00 	vldr	d7, [r7]
 80043a4:	ed87 7b04 	vstr	d7, [r7, #16]
 80043a8:	232d      	movs	r3, #45	; 0x2d
 80043aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80043ae:	e002      	b.n	80043b6 <ftoa+0x7e>
		} else {
			sign = '+';
 80043b0:	232b      	movs	r3, #43	; 0x2b
 80043b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		}
		if (isinf(val)) {		/* Infinite? */
 80043b6:	693c      	ldr	r4, [r7, #16]
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80043be:	2301      	movs	r3, #1
 80043c0:	461e      	mov	r6, r3
 80043c2:	f04f 32ff 	mov.w	r2, #4294967295
 80043c6:	4b79      	ldr	r3, [pc, #484]	; (80045ac <ftoa+0x274>)
 80043c8:	4620      	mov	r0, r4
 80043ca:	4629      	mov	r1, r5
 80043cc:	f7fc fb62 	bl	8000a94 <__aeabi_dcmpun>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d10b      	bne.n	80043ee <ftoa+0xb6>
 80043d6:	f04f 32ff 	mov.w	r2, #4294967295
 80043da:	4b74      	ldr	r3, [pc, #464]	; (80045ac <ftoa+0x274>)
 80043dc:	4620      	mov	r0, r4
 80043de:	4629      	mov	r1, r5
 80043e0:	f7fc fb3a 	bl	8000a58 <__aeabi_dcmple>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d101      	bne.n	80043ee <ftoa+0xb6>
 80043ea:	2300      	movs	r3, #0
 80043ec:	461e      	mov	r6, r3
 80043ee:	b2f3      	uxtb	r3, r6
 80043f0:	f083 0301 	eor.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <ftoa+0xc8>
			er = "INF";
 80043fa:	4b6d      	ldr	r3, [pc, #436]	; (80045b0 <ftoa+0x278>)
 80043fc:	633b      	str	r3, [r7, #48]	; 0x30
 80043fe:	e074      	b.n	80044ea <ftoa+0x1b2>
		} else {
			if (fmt == 'f') {	/* Decimal notation? */
 8004400:	7bfb      	ldrb	r3, [r7, #15]
 8004402:	2b66      	cmp	r3, #102	; 0x66
 8004404:	d128      	bne.n	8004458 <ftoa+0x120>
				val += i10x(-prec) / 2;	/* Round (nearest) */
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	425b      	negs	r3, r3
 800440a:	4618      	mov	r0, r3
 800440c:	f7ff ff2c 	bl	8004268 <i10x>
 8004410:	ec51 0b10 	vmov	r0, r1, d0
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800441c:	f7fc f9ca 	bl	80007b4 <__aeabi_ddiv>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004428:	f7fb fee4 	bl	80001f4 <__adddf3>
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	e9c7 2304 	strd	r2, r3, [r7, #16]
				m = ilog10(val);
 8004434:	ed97 0b04 	vldr	d0, [r7, #16]
 8004438:	f7ff fe9a 	bl	8004170 <ilog10>
 800443c:	63b8      	str	r0, [r7, #56]	; 0x38
				if (m < 0) m = 0;
 800443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	da01      	bge.n	8004448 <ftoa+0x110>
 8004444:	2300      	movs	r3, #0
 8004446:	63bb      	str	r3, [r7, #56]	; 0x38
				if (m + prec + 3 >= SZB_OUTPUT) er = "OV";	/* Buffer overflow? */
 8004448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	4413      	add	r3, r2
 800444e:	2b1c      	cmp	r3, #28
 8004450:	dd4b      	ble.n	80044ea <ftoa+0x1b2>
 8004452:	4b58      	ldr	r3, [pc, #352]	; (80045b4 <ftoa+0x27c>)
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
 8004456:	e048      	b.n	80044ea <ftoa+0x1b2>
			} else {			/* E notation */
				if (val != 0) {		/* Not a true zero? */
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004464:	f7fc fae4 	bl	8000a30 <__aeabi_dcmpeq>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d13d      	bne.n	80044ea <ftoa+0x1b2>
					val += i10x(ilog10(val) - prec) / 2;	/* Round (nearest) */
 800446e:	ed97 0b04 	vldr	d0, [r7, #16]
 8004472:	f7ff fe7d 	bl	8004170 <ilog10>
 8004476:	4602      	mov	r2, r0
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	4618      	mov	r0, r3
 800447e:	f7ff fef3 	bl	8004268 <i10x>
 8004482:	ec51 0b10 	vmov	r0, r1, d0
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800448e:	f7fc f991 	bl	80007b4 <__aeabi_ddiv>
 8004492:	4602      	mov	r2, r0
 8004494:	460b      	mov	r3, r1
 8004496:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800449a:	f7fb feab 	bl	80001f4 <__adddf3>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
					e = ilog10(val);
 80044a6:	ed97 0b04 	vldr	d0, [r7, #16]
 80044aa:	f7ff fe61 	bl	8004170 <ilog10>
 80044ae:	63f8      	str	r0, [r7, #60]	; 0x3c
					if (e > 99 || prec + 6 >= SZB_OUTPUT) {	/* Buffer overflow or E > +99? */
 80044b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b2:	2b63      	cmp	r3, #99	; 0x63
 80044b4:	dc02      	bgt.n	80044bc <ftoa+0x184>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b19      	cmp	r3, #25
 80044ba:	dd02      	ble.n	80044c2 <ftoa+0x18a>
						er = "OV";
 80044bc:	4b3d      	ldr	r3, [pc, #244]	; (80045b4 <ftoa+0x27c>)
 80044be:	633b      	str	r3, [r7, #48]	; 0x30
 80044c0:	e013      	b.n	80044ea <ftoa+0x1b2>
					} else {
						if (e < -99) e = -99;
 80044c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044c4:	f113 0f63 	cmn.w	r3, #99	; 0x63
 80044c8:	da02      	bge.n	80044d0 <ftoa+0x198>
 80044ca:	f06f 0362 	mvn.w	r3, #98	; 0x62
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
						val /= i10x(e);	/* Normalize */
 80044d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80044d2:	f7ff fec9 	bl	8004268 <i10x>
 80044d6:	ec53 2b10 	vmov	r2, r3, d0
 80044da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044de:	f7fc f969 	bl	80007b4 <__aeabi_ddiv>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	e9c7 2304 	strd	r2, r3, [r7, #16]
					}
				}
			}
		}
		if (!er) {	/* Not error condition */
 80044ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	f040 8089 	bne.w	8004604 <ftoa+0x2cc>
			if (sign == '-') *buf++ = sign;	/* Add a - if negative value */
 80044f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80044f6:	2b2d      	cmp	r3, #45	; 0x2d
 80044f8:	d105      	bne.n	8004506 <ftoa+0x1ce>
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8004504:	701a      	strb	r2, [r3, #0]
			do {				/* Put decimal number */
				w = i10x(m);				/* Snip the highest digit d */
 8004506:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004508:	f7ff feae 	bl	8004268 <i10x>
 800450c:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
				d = val / w; val -= d * w;
 8004510:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004514:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004518:	f7fc f94c 	bl	80007b4 <__aeabi_ddiv>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f7fc facc 	bl	8000ac0 <__aeabi_d2iz>
 8004528:	4603      	mov	r3, r0
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800452e:	f7fb ffad 	bl	800048c <__aeabi_i2d>
 8004532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004536:	f7fc f813 	bl	8000560 <__aeabi_dmul>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004542:	f7fb fe55 	bl	80001f0 <__aeabi_dsub>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	e9c7 2304 	strd	r2, r3, [r7, #16]
				if (m == -1) *buf++ = XF_DPC;	/* Insert a decimal separarot if get into fractional part */
 800454e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d104      	bne.n	8004560 <ftoa+0x228>
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	61fa      	str	r2, [r7, #28]
 800455c:	222e      	movs	r2, #46	; 0x2e
 800455e:	701a      	strb	r2, [r3, #0]
				*buf++ = '0' + d;			/* Put the digit */
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	b2da      	uxtb	r2, r3
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	1c59      	adds	r1, r3, #1
 8004568:	61f9      	str	r1, [r7, #28]
 800456a:	3230      	adds	r2, #48	; 0x30
 800456c:	b2d2      	uxtb	r2, r2
 800456e:	701a      	strb	r2, [r3, #0]
			} while (--m >= -prec);			/* Output all digits specified by prec */
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	3b01      	subs	r3, #1
 8004574:	63bb      	str	r3, [r7, #56]	; 0x38
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	425b      	negs	r3, r3
 800457a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800457c:	429a      	cmp	r2, r3
 800457e:	dac2      	bge.n	8004506 <ftoa+0x1ce>
			if (fmt != 'f') {	/* Put exponent if needed */
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	2b66      	cmp	r3, #102	; 0x66
 8004584:	d03e      	beq.n	8004604 <ftoa+0x2cc>
				*buf++ = fmt;
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	61fa      	str	r2, [r7, #28]
 800458c:	7bfa      	ldrb	r2, [r7, #15]
 800458e:	701a      	strb	r2, [r3, #0]
				if (e < 0) {
 8004590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004592:	2b00      	cmp	r3, #0
 8004594:	da10      	bge.n	80045b8 <ftoa+0x280>
					e = -e; *buf++ = '-';
 8004596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004598:	425b      	negs	r3, r3
 800459a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	61fa      	str	r2, [r7, #28]
 80045a2:	222d      	movs	r2, #45	; 0x2d
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e00c      	b.n	80045c2 <ftoa+0x28a>
 80045a8:	08004cb4 	.word	0x08004cb4
 80045ac:	7fefffff 	.word	0x7fefffff
 80045b0:	08004cb8 	.word	0x08004cb8
 80045b4:	08004cbc 	.word	0x08004cbc
				} else {
					*buf++ = '+';
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	61fa      	str	r2, [r7, #28]
 80045be:	222b      	movs	r2, #43	; 0x2b
 80045c0:	701a      	strb	r2, [r3, #0]
				}
				*buf++ = '0' + e / 10;
 80045c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <ftoa+0x30c>)
 80045c6:	fb82 1203 	smull	r1, r2, r2, r3
 80045ca:	1092      	asrs	r2, r2, #2
 80045cc:	17db      	asrs	r3, r3, #31
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	1c59      	adds	r1, r3, #1
 80045d6:	61f9      	str	r1, [r7, #28]
 80045d8:	3230      	adds	r2, #48	; 0x30
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]
				*buf++ = '0' + e % 10;
 80045de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045e0:	4b18      	ldr	r3, [pc, #96]	; (8004644 <ftoa+0x30c>)
 80045e2:	fb83 1302 	smull	r1, r3, r3, r2
 80045e6:	1099      	asrs	r1, r3, #2
 80045e8:	17d3      	asrs	r3, r2, #31
 80045ea:	1ac9      	subs	r1, r1, r3
 80045ec:	460b      	mov	r3, r1
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	440b      	add	r3, r1
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	1ad1      	subs	r1, r2, r3
 80045f6:	b2ca      	uxtb	r2, r1
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	1c59      	adds	r1, r3, #1
 80045fc:	61f9      	str	r1, [r7, #28]
 80045fe:	3230      	adds	r2, #48	; 0x30
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (er) {	/* Error condition? */
 8004604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004606:	2b00      	cmp	r3, #0
 8004608:	d015      	beq.n	8004636 <ftoa+0x2fe>
		if (sign) *buf++ = sign;		/* Add sign if needed */
 800460a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <ftoa+0x2e6>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	61fa      	str	r2, [r7, #28]
 8004618:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800461c:	701a      	strb	r2, [r3, #0]
		do *buf++ = *er++; while (*er);	/* Put error symbol */
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	1c53      	adds	r3, r2, #1
 8004622:	633b      	str	r3, [r7, #48]	; 0x30
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	1c59      	adds	r1, r3, #1
 8004628:	61f9      	str	r1, [r7, #28]
 800462a:	7812      	ldrb	r2, [r2, #0]
 800462c:	701a      	strb	r2, [r3, #0]
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f3      	bne.n	800461e <ftoa+0x2e6>
	}
	*buf = 0;	/* Term */
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
}
 800463c:	bf00      	nop
 800463e:	3744      	adds	r7, #68	; 0x44
 8004640:	46bd      	mov	sp, r7
 8004642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004644:	66666667 	.word	0x66666667

08004648 <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */

	if (func) {
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <xfputc+0x18>
		func(chr);		/* Write a character to the output device */
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6838      	ldr	r0, [r7, #0]
 800465c:	4798      	blx	r3
	} else if (strptr) {
		 *strptr++ = chr;	/* Write a character to the memory */
	}
}
 800465e:	e00b      	b.n	8004678 <xfputc+0x30>
	} else if (strptr) {
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <xfputc+0x38>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d007      	beq.n	8004678 <xfputc+0x30>
		 *strptr++ = chr;	/* Write a character to the memory */
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <xfputc+0x38>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	4904      	ldr	r1, [pc, #16]	; (8004680 <xfputc+0x38>)
 8004670:	600a      	str	r2, [r1, #0]
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]
}
 8004678:	bf00      	nop
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}
 8004680:	20000170 	.word	0x20000170

08004684 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b098      	sub	sp, #96	; 0x60
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	1c5a      	adds	r2, r3, #1
 8004694:	60ba      	str	r2, [r7, #8]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (!c) break;				/* End of format? */
 800469c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	f000 8267 	beq.w	8004b74 <xvfprintf+0x4f0>
		if (c != '%') {				/* Pass it through if not a % sequense */
 80046a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046aa:	2b25      	cmp	r3, #37	; 0x25
 80046ac:	d006      	beq.n	80046bc <xvfprintf+0x38>
			xfputc(func, c); continue;
 80046ae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046b2:	4619      	mov	r1, r3
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f7ff ffc7 	bl	8004648 <xfputc>
 80046ba:	e25a      	b.n	8004b72 <xvfprintf+0x4ee>
		}
		f = w = 0;			 		/* Clear parms */
 80046bc:	2300      	movs	r3, #0
 80046be:	653b      	str	r3, [r7, #80]	; 0x50
 80046c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		pad = ' '; prec = -1;
 80046c4:	2320      	movs	r3, #32
 80046c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295
 80046ce:	647b      	str	r3, [r7, #68]	; 0x44
		c = *fmt++;					/* Get first char of the sequense */
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	60ba      	str	r2, [r7, #8]
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		if (c == '0') {				/* Flag: left '0' padded */
 80046dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046e0:	2b30      	cmp	r3, #48	; 0x30
 80046e2:	d109      	bne.n	80046f8 <xvfprintf+0x74>
			pad = '0'; c = *fmt++;
 80046e4:	2330      	movs	r3, #48	; 0x30
 80046e6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	60ba      	str	r2, [r7, #8]
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f6:	e00b      	b.n	8004710 <xvfprintf+0x8c>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80046f8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046fc:	2b2d      	cmp	r3, #45	; 0x2d
 80046fe:	d107      	bne.n	8004710 <xvfprintf+0x8c>
				f = 2; c = *fmt++;
 8004700:	2302      	movs	r3, #2
 8004702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	1c5a      	adds	r2, r3, #1
 8004708:	60ba      	str	r2, [r7, #8]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
 8004710:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004714:	2b2a      	cmp	r3, #42	; 0x2a
 8004716:	d126      	bne.n	8004766 <xvfprintf+0xe2>
			n = va_arg(arp, int);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1d1a      	adds	r2, r3, #4
 800471c:	607a      	str	r2, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	64bb      	str	r3, [r7, #72]	; 0x48
			if (n < 0) {			/* Flag: left justified */
 8004722:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004724:	2b00      	cmp	r3, #0
 8004726:	da04      	bge.n	8004732 <xvfprintf+0xae>
				n = 0 - n; f = 2;
 8004728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800472a:	425b      	negs	r3, r3
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
 800472e:	2302      	movs	r3, #2
 8004730:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			w = n; c = *fmt++;
 8004732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004734:	653b      	str	r3, [r7, #80]	; 0x50
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	60ba      	str	r2, [r7, #8]
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004742:	e018      	b.n	8004776 <xvfprintf+0xf2>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
 8004744:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	461a      	mov	r2, r3
 8004750:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004754:	4413      	add	r3, r2
 8004756:	3b30      	subs	r3, #48	; 0x30
 8004758:	653b      	str	r3, [r7, #80]	; 0x50
				c = *fmt++;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	60ba      	str	r2, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			while (c >= '0' && c <= '9') {	/* Minimum width */
 8004766:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800476a:	2b2f      	cmp	r3, #47	; 0x2f
 800476c:	d903      	bls.n	8004776 <xvfprintf+0xf2>
 800476e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004772:	2b39      	cmp	r3, #57	; 0x39
 8004774:	d9e6      	bls.n	8004744 <xvfprintf+0xc0>
			}
		}
		if (c == '.') {				/* Precision */
 8004776:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800477a:	2b2e      	cmp	r3, #46	; 0x2e
 800477c:	d131      	bne.n	80047e2 <xvfprintf+0x15e>
			c = *fmt++;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	60ba      	str	r2, [r7, #8]
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == '*') {				/* Precision from an argument */
 800478a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800478e:	2b2a      	cmp	r3, #42	; 0x2a
 8004790:	d10b      	bne.n	80047aa <xvfprintf+0x126>
				prec = va_arg(arp, int);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	1d1a      	adds	r2, r3, #4
 8004796:	607a      	str	r2, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	647b      	str	r3, [r7, #68]	; 0x44
				c = *fmt++;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	60ba      	str	r2, [r7, #8]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047a8:	e01b      	b.n	80047e2 <xvfprintf+0x15e>
			} else {
				prec = 0;
 80047aa:	2300      	movs	r3, #0
 80047ac:	647b      	str	r3, [r7, #68]	; 0x44
				while (c >= '0' && c <= '9') {
 80047ae:	e010      	b.n	80047d2 <xvfprintf+0x14e>
					prec = prec * 10 + c - '0';
 80047b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	461a      	mov	r2, r3
 80047bc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047c0:	4413      	add	r3, r2
 80047c2:	3b30      	subs	r3, #48	; 0x30
 80047c4:	647b      	str	r3, [r7, #68]	; 0x44
					c = *fmt++;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	60ba      	str	r2, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				while (c >= '0' && c <= '9') {
 80047d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047d6:	2b2f      	cmp	r3, #47	; 0x2f
 80047d8:	d903      	bls.n	80047e2 <xvfprintf+0x15e>
 80047da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047de:	2b39      	cmp	r3, #57	; 0x39
 80047e0:	d9e6      	bls.n	80047b0 <xvfprintf+0x12c>
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
 80047e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047e6:	2b6c      	cmp	r3, #108	; 0x6c
 80047e8:	d109      	bne.n	80047fe <xvfprintf+0x17a>
			f |= 4; c = *fmt++;
 80047ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ec:	f043 0304 	orr.w	r3, r3, #4
 80047f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	60ba      	str	r2, [r7, #8]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			if (c == 'l') {	/* Prefix: Size is long long */
				f |= 8; c = *fmt++;
			}
#endif
		}
		if (!c) break;				/* End of format? */
 80047fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 81b8 	beq.w	8004b78 <xvfprintf+0x4f4>
		switch (c) {				/* Type is... */
 8004808:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800480c:	3b45      	subs	r3, #69	; 0x45
 800480e:	2b33      	cmp	r3, #51	; 0x33
 8004810:	f200 8111 	bhi.w	8004a36 <xvfprintf+0x3b2>
 8004814:	a201      	add	r2, pc, #4	; (adr r2, 800481c <xvfprintf+0x198>)
 8004816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800481a:	bf00      	nop
 800481c:	080049a9 	.word	0x080049a9
 8004820:	08004a37 	.word	0x08004a37
 8004824:	08004a37 	.word	0x08004a37
 8004828:	08004a37 	.word	0x08004a37
 800482c:	08004a37 	.word	0x08004a37
 8004830:	08004a37 	.word	0x08004a37
 8004834:	08004a37 	.word	0x08004a37
 8004838:	08004a37 	.word	0x08004a37
 800483c:	08004a37 	.word	0x08004a37
 8004840:	08004a37 	.word	0x08004a37
 8004844:	08004a37 	.word	0x08004a37
 8004848:	08004a37 	.word	0x08004a37
 800484c:	08004a37 	.word	0x08004a37
 8004850:	08004a37 	.word	0x08004a37
 8004854:	08004a37 	.word	0x08004a37
 8004858:	08004a37 	.word	0x08004a37
 800485c:	08004a37 	.word	0x08004a37
 8004860:	08004a37 	.word	0x08004a37
 8004864:	08004a37 	.word	0x08004a37
 8004868:	080048ff 	.word	0x080048ff
 800486c:	08004a37 	.word	0x08004a37
 8004870:	08004a37 	.word	0x08004a37
 8004874:	08004a37 	.word	0x08004a37
 8004878:	08004a37 	.word	0x08004a37
 800487c:	08004a37 	.word	0x08004a37
 8004880:	08004a37 	.word	0x08004a37
 8004884:	08004a37 	.word	0x08004a37
 8004888:	08004a37 	.word	0x08004a37
 800488c:	08004a37 	.word	0x08004a37
 8004890:	080048ed 	.word	0x080048ed
 8004894:	08004905 	.word	0x08004905
 8004898:	080048f9 	.word	0x080048f9
 800489c:	080049a9 	.word	0x080049a9
 80048a0:	080049a9 	.word	0x080049a9
 80048a4:	08004a37 	.word	0x08004a37
 80048a8:	08004a37 	.word	0x08004a37
 80048ac:	08004a37 	.word	0x08004a37
 80048b0:	08004a37 	.word	0x08004a37
 80048b4:	08004a37 	.word	0x08004a37
 80048b8:	08004a37 	.word	0x08004a37
 80048bc:	08004a37 	.word	0x08004a37
 80048c0:	08004a37 	.word	0x08004a37
 80048c4:	080048f3 	.word	0x080048f3
 80048c8:	08004a37 	.word	0x08004a37
 80048cc:	08004a37 	.word	0x08004a37
 80048d0:	08004a37 	.word	0x08004a37
 80048d4:	08004919 	.word	0x08004919
 80048d8:	08004a37 	.word	0x08004a37
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	08004a37 	.word	0x08004a37
 80048e4:	08004a37 	.word	0x08004a37
 80048e8:	080048ff 	.word	0x080048ff
		case 'b':					/* Unsigned binary */
			r = 2; break;
 80048ec:	2302      	movs	r3, #2
 80048ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f0:	e0a8      	b.n	8004a44 <xvfprintf+0x3c0>
		case 'o':					/* Unsigned octal */
			r = 8; break;
 80048f2:	2308      	movs	r3, #8
 80048f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048f6:	e0a5      	b.n	8004a44 <xvfprintf+0x3c0>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
 80048f8:	230a      	movs	r3, #10
 80048fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048fc:	e0a2      	b.n	8004a44 <xvfprintf+0x3c0>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
 80048fe:	2310      	movs	r3, #16
 8004900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004902:	e09f      	b.n	8004a44 <xvfprintf+0x3c0>
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	b2db      	uxtb	r3, r3
 800490e:	4619      	mov	r1, r3
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f7ff fe99 	bl	8004648 <xfputc>
 8004916:	e12c      	b.n	8004b72 <xvfprintf+0x4ee>
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	1d1a      	adds	r2, r3, #4
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (!p) p = "";				/* Null ptr generates a null string */
 8004922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <xvfprintf+0x2a8>
 8004928:	4b96      	ldr	r3, [pc, #600]	; (8004b84 <xvfprintf+0x500>)
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
			j = strlen(p);
 800492c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800492e:	f7fb fc53 	bl	80001d8 <strlen>
 8004932:	6578      	str	r0, [r7, #84]	; 0x54
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
 8004934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004936:	2b00      	cmp	r3, #0
 8004938:	db0f      	blt.n	800495a <xvfprintf+0x2d6>
 800493a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800493c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800493e:	429a      	cmp	r2, r3
 8004940:	d90b      	bls.n	800495a <xvfprintf+0x2d6>
 8004942:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004944:	657b      	str	r3, [r7, #84]	; 0x54
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 8004946:	e008      	b.n	800495a <xvfprintf+0x2d6>
 8004948:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800494c:	4619      	mov	r1, r3
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7ff fe7a 	bl	8004648 <xfputc>
 8004954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004956:	3301      	adds	r3, #1
 8004958:	657b      	str	r3, [r7, #84]	; 0x54
 800495a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800495c:	f003 0302 	and.w	r3, r3, #2
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10c      	bne.n	800497e <xvfprintf+0x2fa>
 8004964:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004968:	429a      	cmp	r2, r3
 800496a:	d3ed      	bcc.n	8004948 <xvfprintf+0x2c4>
			while (*p && prec--) xfputc(func, *p++);/* String body */
 800496c:	e007      	b.n	800497e <xvfprintf+0x2fa>
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	1c5a      	adds	r2, r3, #1
 8004972:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f7ff fe65 	bl	8004648 <xfputc>
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <xvfprintf+0x316>
 8004986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004988:	1e5a      	subs	r2, r3, #1
 800498a:	647a      	str	r2, [r7, #68]	; 0x44
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1ee      	bne.n	800496e <xvfprintf+0x2ea>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
 8004990:	e003      	b.n	800499a <xvfprintf+0x316>
 8004992:	2120      	movs	r1, #32
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f7ff fe57 	bl	8004648 <xfputc>
 800499a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	657a      	str	r2, [r7, #84]	; 0x54
 80049a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d8f5      	bhi.n	8004992 <xvfprintf+0x30e>
			continue;
 80049a6:	e0e4      	b.n	8004b72 <xvfprintf+0x4ee>
#if XF_USE_FP
		case 'f':					/* Float (decimal) */
		case 'e':					/* Float (e) */
		case 'E':					/* Float (E) */
			ftoa(p = str, va_arg(arp, double), prec, c);	/* Make fp string */
 80049a8:	f107 0310 	add.w	r3, r7, #16
 80049ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3307      	adds	r3, #7
 80049b2:	f023 0307 	bic.w	r3, r3, #7
 80049b6:	f103 0208 	add.w	r2, r3, #8
 80049ba:	607a      	str	r2, [r7, #4]
 80049bc:	ed93 7b00 	vldr	d7, [r3]
 80049c0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80049c4:	461a      	mov	r2, r3
 80049c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049c8:	eeb0 0a47 	vmov.f32	s0, s14
 80049cc:	eef0 0a67 	vmov.f32	s1, s15
 80049d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049d2:	f7ff fcb1 	bl	8004338 <ftoa>
			for (j = strlen(p); !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 80049d6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80049d8:	f7fb fbfe 	bl	80001d8 <strlen>
 80049dc:	6578      	str	r0, [r7, #84]	; 0x54
 80049de:	e008      	b.n	80049f2 <xvfprintf+0x36e>
 80049e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80049e4:	4619      	mov	r1, r3
 80049e6:	68f8      	ldr	r0, [r7, #12]
 80049e8:	f7ff fe2e 	bl	8004648 <xfputc>
 80049ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ee:	3301      	adds	r3, #1
 80049f0:	657b      	str	r3, [r7, #84]	; 0x54
 80049f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10c      	bne.n	8004a16 <xvfprintf+0x392>
 80049fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80049fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3ed      	bcc.n	80049e0 <xvfprintf+0x35c>
			while (*p) xfputc(func, *p++);		/* Value */
 8004a04:	e007      	b.n	8004a16 <xvfprintf+0x392>
 8004a06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f7ff fe19 	bl	8004648 <xfputc>
 8004a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1f3      	bne.n	8004a06 <xvfprintf+0x382>
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
 8004a1e:	e003      	b.n	8004a28 <xvfprintf+0x3a4>
 8004a20:	2120      	movs	r1, #32
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f7ff fe10 	bl	8004648 <xfputc>
 8004a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a2a:	1c5a      	adds	r2, r3, #1
 8004a2c:	657a      	str	r2, [r7, #84]	; 0x54
 8004a2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d8f5      	bhi.n	8004a20 <xvfprintf+0x39c>
			continue;
 8004a34:	e09d      	b.n	8004b72 <xvfprintf+0x4ee>
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
 8004a36:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7ff fe03 	bl	8004648 <xfputc>
 8004a42:	e096      	b.n	8004b72 <xvfprintf+0x4ee>
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
			}
		}
#else
		if (f & 4) {	/* long argument? */
 8004a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a46:	f003 0304 	and.w	r3, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <xvfprintf+0x3d6>
			v = (long)va_arg(arp, long);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	1d1a      	adds	r2, r3, #4
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	637b      	str	r3, [r7, #52]	; 0x34
 8004a58:	e00d      	b.n	8004a76 <xvfprintf+0x3f2>
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
 8004a5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a5e:	2b64      	cmp	r3, #100	; 0x64
 8004a60:	d104      	bne.n	8004a6c <xvfprintf+0x3e8>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1d1a      	adds	r2, r3, #4
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	e003      	b.n	8004a74 <xvfprintf+0x3f0>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1d1a      	adds	r2, r3, #4
 8004a70:	607a      	str	r2, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
 8004a76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004a7a:	2b64      	cmp	r3, #100	; 0x64
 8004a7c:	d109      	bne.n	8004a92 <xvfprintf+0x40e>
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	da06      	bge.n	8004a92 <xvfprintf+0x40e>
			v = 0 - v; f |= 1;
 8004a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a86:	425b      	negs	r3, r3
 8004a88:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a8c:	f043 0301 	orr.w	r3, r3, #1
 8004a90:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		i = 0; uv = v;
 8004a92:	2300      	movs	r3, #0
 8004a94:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a98:	633b      	str	r3, [r7, #48]	; 0x30
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
 8004a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004a9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004aa2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8004aa4:	fb01 f202 	mul.w	r2, r1, r2
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004aae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ab0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	633b      	str	r3, [r7, #48]	; 0x30
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8004ab8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004abc:	2b09      	cmp	r3, #9
 8004abe:	d90b      	bls.n	8004ad8 <xvfprintf+0x454>
 8004ac0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ac4:	2b78      	cmp	r3, #120	; 0x78
 8004ac6:	d101      	bne.n	8004acc <xvfprintf+0x448>
 8004ac8:	2227      	movs	r2, #39	; 0x27
 8004aca:	e000      	b.n	8004ace <xvfprintf+0x44a>
 8004acc:	2207      	movs	r2, #7
 8004ace:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			str[i++] = d + '0';
 8004ad8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ada:	1c5a      	adds	r2, r3, #1
 8004adc:	65ba      	str	r2, [r7, #88]	; 0x58
 8004ade:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8004ae2:	3230      	adds	r2, #48	; 0x30
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	3360      	adds	r3, #96	; 0x60
 8004ae8:	443b      	add	r3, r7
 8004aea:	f803 2c50 	strb.w	r2, [r3, #-80]
		} while (uv != 0 && i < sizeof str);
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <xvfprintf+0x476>
 8004af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004af6:	2b1f      	cmp	r3, #31
 8004af8:	d9cf      	bls.n	8004a9a <xvfprintf+0x416>
		if (f & 1) str[i++] = '-';					/* Sign */
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <xvfprintf+0x490>
 8004b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b0a:	3360      	adds	r3, #96	; 0x60
 8004b0c:	443b      	add	r3, r7
 8004b0e:	222d      	movs	r2, #45	; 0x2d
 8004b10:	f803 2c50 	strb.w	r2, [r3, #-80]
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
 8004b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b16:	657b      	str	r3, [r7, #84]	; 0x54
 8004b18:	e008      	b.n	8004b2c <xvfprintf+0x4a8>
 8004b1a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff fd91 	bl	8004648 <xfputc>
 8004b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b28:	3301      	adds	r3, #1
 8004b2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b2e:	f003 0302 	and.w	r3, r3, #2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d103      	bne.n	8004b3e <xvfprintf+0x4ba>
 8004b36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d3ed      	bcc.n	8004b1a <xvfprintf+0x496>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
 8004b3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b40:	3b01      	subs	r3, #1
 8004b42:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b44:	f107 0210 	add.w	r2, r7, #16
 8004b48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b4a:	4413      	add	r3, r2
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	4619      	mov	r1, r3
 8004b50:	68f8      	ldr	r0, [r7, #12]
 8004b52:	f7ff fd79 	bl	8004648 <xfputc>
 8004b56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <xvfprintf+0x4ba>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
 8004b5c:	e003      	b.n	8004b66 <xvfprintf+0x4e2>
 8004b5e:	2120      	movs	r1, #32
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fd71 	bl	8004648 <xfputc>
 8004b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	657a      	str	r2, [r7, #84]	; 0x54
 8004b6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d8f5      	bhi.n	8004b5e <xvfprintf+0x4da>
		c = *fmt++;					/* Get a format character */
 8004b72:	e58d      	b.n	8004690 <xvfprintf+0xc>
		if (!c) break;				/* End of format? */
 8004b74:	bf00      	nop
 8004b76:	e000      	b.n	8004b7a <xvfprintf+0x4f6>
		if (!c) break;				/* End of format? */
 8004b78:	bf00      	nop
	}
}
 8004b7a:	bf00      	nop
 8004b7c:	3760      	adds	r7, #96	; 0x60
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	08004cc0 	.word	0x08004cc0

08004b88 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 8004b88:	b40f      	push	{r0, r1, r2, r3}
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b082      	sub	sp, #8
 8004b8e:	af00      	add	r7, sp, #0
	va_list arp;


	va_start(arp, fmt);
 8004b90:	f107 0314 	add.w	r3, r7, #20
 8004b94:	607b      	str	r3, [r7, #4]
	xvfprintf(xfunc_output, fmt, arp);
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <xprintf+0x2c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	687a      	ldr	r2, [r7, #4]
 8004b9c:	6939      	ldr	r1, [r7, #16]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7ff fd70 	bl	8004684 <xvfprintf>
	va_end(arp);
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bae:	b004      	add	sp, #16
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	2000016c 	.word	0x2000016c

08004bb8 <__libc_init_array>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4d0d      	ldr	r5, [pc, #52]	; (8004bf0 <__libc_init_array+0x38>)
 8004bbc:	4c0d      	ldr	r4, [pc, #52]	; (8004bf4 <__libc_init_array+0x3c>)
 8004bbe:	1b64      	subs	r4, r4, r5
 8004bc0:	10a4      	asrs	r4, r4, #2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	42a6      	cmp	r6, r4
 8004bc6:	d109      	bne.n	8004bdc <__libc_init_array+0x24>
 8004bc8:	4d0b      	ldr	r5, [pc, #44]	; (8004bf8 <__libc_init_array+0x40>)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <__libc_init_array+0x44>)
 8004bcc:	f000 f820 	bl	8004c10 <_init>
 8004bd0:	1b64      	subs	r4, r4, r5
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	42a6      	cmp	r6, r4
 8004bd8:	d105      	bne.n	8004be6 <__libc_init_array+0x2e>
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be0:	4798      	blx	r3
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7ee      	b.n	8004bc4 <__libc_init_array+0xc>
 8004be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bea:	4798      	blx	r3
 8004bec:	3601      	adds	r6, #1
 8004bee:	e7f2      	b.n	8004bd6 <__libc_init_array+0x1e>
 8004bf0:	08004ce4 	.word	0x08004ce4
 8004bf4:	08004ce4 	.word	0x08004ce4
 8004bf8:	08004ce4 	.word	0x08004ce4
 8004bfc:	08004ce8 	.word	0x08004ce8

08004c00 <memset>:
 8004c00:	4402      	add	r2, r0
 8004c02:	4603      	mov	r3, r0
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d100      	bne.n	8004c0a <memset+0xa>
 8004c08:	4770      	bx	lr
 8004c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c0e:	e7f9      	b.n	8004c04 <memset+0x4>

08004c10 <_init>:
 8004c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c12:	bf00      	nop
 8004c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c16:	bc08      	pop	{r3}
 8004c18:	469e      	mov	lr, r3
 8004c1a:	4770      	bx	lr

08004c1c <_fini>:
 8004c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1e:	bf00      	nop
 8004c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c22:	bc08      	pop	{r3}
 8004c24:	469e      	mov	lr, r3
 8004c26:	4770      	bx	lr


timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d80  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004f18  08004f18  00014f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f30  08004f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f30  08004f30  00014f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f38  08004f38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f3c  08004f3c  00014f3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000000c  08004f4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000bc  08004f4c  000200bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1ed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f05  00000000  00000000  0002e229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00030130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b98  00000000  00000000  00030d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015d1e  00000000  00000000  00031928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101fb  00000000  00000000  00047646  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a0d7  00000000  00000000  00057841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e1918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003348  00000000  00000000  000e1968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f00 	.word	0x08004f00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004f00 	.word	0x08004f00

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_GPIO_Init+0x80>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a18      	ldr	r2, [pc, #96]	; (800055c <MX_GPIO_Init+0x80>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b16      	ldr	r3, [pc, #88]	; (800055c <MX_GPIO_Init+0x80>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <MX_GPIO_Init+0x80>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a11      	ldr	r2, [pc, #68]	; (800055c <MX_GPIO_Init+0x80>)
 8000518:	f043 0302 	orr.w	r3, r3, #2
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <MX_GPIO_Init+0x80>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0302 	and.w	r3, r3, #2
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800052a:	2200      	movs	r2, #0
 800052c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000530:	480b      	ldr	r0, [pc, #44]	; (8000560 <MX_GPIO_Init+0x84>)
 8000532:	f002 fb41 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800053a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2300      	movs	r3, #0
 8000546:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	4619      	mov	r1, r3
 800054e:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_GPIO_Init+0x84>)
 8000550:	f002 f9ae 	bl	80028b0 <HAL_GPIO_Init>

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40023800 	.word	0x40023800
 8000560:	40020400 	.word	0x40020400

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f001 ff68 	bl	800243c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f896 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f7ff ffb4 	bl	80004dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000574:	f001 fe4c 	bl	8002210 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000578:	f001 febc 	bl	80022f4 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // HAL_TIM_Base_Start_IT(&htim2);

  tx_buff = 48;
 800057c:	4b43      	ldr	r3, [pc, #268]	; (800068c <main+0x128>)
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart1, &tx_buff, 1, 200);
 8000582:	23c8      	movs	r3, #200	; 0xc8
 8000584:	2201      	movs	r2, #1
 8000586:	4941      	ldr	r1, [pc, #260]	; (800068c <main+0x128>)
 8000588:	4841      	ldr	r0, [pc, #260]	; (8000690 <main+0x12c>)
 800058a:	f003 fc62 	bl	8003e52 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart1, &rx_buff, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	4940      	ldr	r1, [pc, #256]	; (8000694 <main+0x130>)
 8000592:	483f      	ldr	r0, [pc, #252]	; (8000690 <main+0x12c>)
 8000594:	f003 fcef 	bl	8003f76 <HAL_UART_Receive_IT>

  Tapion();
 8000598:	f000 f938 	bl	800080c <Tapion>

  HAL_TIM_Base_Stop_IT(&htim2);
 800059c:	483e      	ldr	r0, [pc, #248]	; (8000698 <main+0x134>)
 800059e:	f003 f849 	bl	8003634 <HAL_TIM_Base_Stop_IT>

  // tone(4000, 1000);

  while (1)
  {
	  while(rx_buff == 0);
 80005a2:	bf00      	nop
 80005a4:	4b3b      	ldr	r3, [pc, #236]	; (8000694 <main+0x130>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d0fb      	beq.n	80005a4 <main+0x40>
	  switch (rx_buff) {
 80005ac:	4b39      	ldr	r3, [pc, #228]	; (8000694 <main+0x130>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	3b61      	subs	r3, #97	; 0x61
 80005b2:	2b12      	cmp	r3, #18
 80005b4:	d867      	bhi.n	8000686 <main+0x122>
 80005b6:	a201      	add	r2, pc, #4	; (adr r2, 80005bc <main+0x58>)
 80005b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005bc:	08000609 	.word	0x08000609
 80005c0:	08000687 	.word	0x08000687
 80005c4:	08000687 	.word	0x08000687
 80005c8:	0800062d 	.word	0x0800062d
 80005cc:	08000687 	.word	0x08000687
 80005d0:	0800063f 	.word	0x0800063f
 80005d4:	08000651 	.word	0x08000651
 80005d8:	08000663 	.word	0x08000663
 80005dc:	08000687 	.word	0x08000687
 80005e0:	08000675 	.word	0x08000675
 80005e4:	08000687 	.word	0x08000687
 80005e8:	08000687 	.word	0x08000687
 80005ec:	08000687 	.word	0x08000687
 80005f0:	08000687 	.word	0x08000687
 80005f4:	08000687 	.word	0x08000687
 80005f8:	08000687 	.word	0x08000687
 80005fc:	08000687 	.word	0x08000687
 8000600:	08000687 	.word	0x08000687
 8000604:	0800061b 	.word	0x0800061b
		case 'a':
			tone(DO, 100);
 8000608:	2164      	movs	r1, #100	; 0x64
 800060a:	f240 4016 	movw	r0, #1046	; 0x416
 800060e:	f000 f8a3 	bl	8000758 <tone>
			rx_buff = 0;
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <main+0x130>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
			break;
 8000618:	e036      	b.n	8000688 <main+0x124>
		case 's':
			tone(RE, 100);
 800061a:	2164      	movs	r1, #100	; 0x64
 800061c:	f240 4097 	movw	r0, #1175	; 0x497
 8000620:	f000 f89a 	bl	8000758 <tone>
			rx_buff = 0;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <main+0x130>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
			break;
 800062a:	e02d      	b.n	8000688 <main+0x124>
		case 'd':
			tone(MI, 100);
 800062c:	2164      	movs	r1, #100	; 0x64
 800062e:	f240 5026 	movw	r0, #1318	; 0x526
 8000632:	f000 f891 	bl	8000758 <tone>
			rx_buff = 0;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <main+0x130>)
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
			break;
 800063c:	e024      	b.n	8000688 <main+0x124>
		case 'f':
			tone(FA, 100);
 800063e:	2164      	movs	r1, #100	; 0x64
 8000640:	f240 5075 	movw	r0, #1397	; 0x575
 8000644:	f000 f888 	bl	8000758 <tone>
			rx_buff = 0;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <main+0x130>)
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
			break;
 800064e:	e01b      	b.n	8000688 <main+0x124>
		case 'g':
			tone(SOL, 100);
 8000650:	2164      	movs	r1, #100	; 0x64
 8000652:	f44f 60c4 	mov.w	r0, #1568	; 0x620
 8000656:	f000 f87f 	bl	8000758 <tone>
			rx_buff = 0;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <main+0x130>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
			break;
 8000660:	e012      	b.n	8000688 <main+0x124>
		case 'h':
			tone(LA, 100);
 8000662:	2164      	movs	r1, #100	; 0x64
 8000664:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8000668:	f000 f876 	bl	8000758 <tone>
			rx_buff = 0;
 800066c:	4b09      	ldr	r3, [pc, #36]	; (8000694 <main+0x130>)
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
			break;
 8000672:	e009      	b.n	8000688 <main+0x124>
		case 'j':
			tone(SI, 100);
 8000674:	2164      	movs	r1, #100	; 0x64
 8000676:	f240 70b7 	movw	r0, #1975	; 0x7b7
 800067a:	f000 f86d 	bl	8000758 <tone>
			rx_buff = 0;
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <main+0x130>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
			break;
 8000684:	e000      	b.n	8000688 <main+0x124>
		default:
			break;
 8000686:	bf00      	nop
	  while(rx_buff == 0);
 8000688:	e78b      	b.n	80005a2 <main+0x3e>
 800068a:	bf00      	nop
 800068c:	20000028 	.word	0x20000028
 8000690:	20000074 	.word	0x20000074
 8000694:	20000029 	.word	0x20000029
 8000698:	2000002c 	.word	0x2000002c

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fc20 	bl	8004ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <SystemClock_Config+0xb4>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a21      	ldr	r2, [pc, #132]	; (8000750 <SystemClock_Config+0xb4>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <SystemClock_Config+0xb4>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <SystemClock_Config+0xb8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a1b      	ldr	r2, [pc, #108]	; (8000754 <SystemClock_Config+0xb8>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b19      	ldr	r3, [pc, #100]	; (8000754 <SystemClock_Config+0xb8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000704:	2300      	movs	r3, #0
 8000706:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f002 fa87 	bl	8002c20 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000718:	f001 fcfd 	bl	8002116 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fcea 	bl	8003110 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000742:	f001 fce8 	bl	8002116 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <tone>:

/* USER CODE BEGIN 4 */
void tone(uint32_t freq, uint32_t time) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b084      	sub	sp, #16
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	uint32_t arr_value;

	arr_value = (float)((2*F_CPU) / (PRESCALER*freq*4));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	4a10      	ldr	r2, [pc, #64]	; (80007a8 <tone+0x50>)
 8000768:	fbb2 f3f3 	udiv	r3, r2, r3
 800076c:	ee07 3a90 	vmov	s15, r3
 8000770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000774:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000778:	ee17 3a90 	vmov	r3, s15
 800077c:	60fb      	str	r3, [r7, #12]

	HAL_TIM_Base_Stop_IT(&htim2);
 800077e:	480b      	ldr	r0, [pc, #44]	; (80007ac <tone+0x54>)
 8000780:	f002 ff58 	bl	8003634 <HAL_TIM_Base_Stop_IT>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <tone+0x54>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(&htim2, arr_value);
 800078c:	4b07      	ldr	r3, [pc, #28]	; (80007ac <tone+0x54>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
 8000794:	4a05      	ldr	r2, [pc, #20]	; (80007ac <tone+0x54>)
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	60d3      	str	r3, [r2, #12]
	HAL_TIM_Base_Start_IT(&htim2);
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <tone+0x54>)
 800079c:	f002 fee8 	bl	8003570 <HAL_TIM_Base_Start_IT>

//	HAL_Delay(time);
//
//	HAL_TIM_Base_Stop_IT(&htim2);
}
 80007a0:	bf00      	nop
 80007a2:	3710      	adds	r7, #16
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	01e84800 	.word	0x01e84800
 80007ac:	2000002c 	.word	0x2000002c

080007b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80007b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80007be:	f002 fa14 	bl	8002bea <HAL_GPIO_TogglePin>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020400 	.word	0x40020400

080007d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_UART_RxCpltCallback+0x30>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d10a      	bne.n	80007f8 <HAL_UART_RxCpltCallback+0x28>
		HAL_UART_Transmit(&huart1, &rx_buff, 1, 200);
 80007e2:	23c8      	movs	r3, #200	; 0xc8
 80007e4:	2201      	movs	r2, #1
 80007e6:	4907      	ldr	r1, [pc, #28]	; (8000804 <HAL_UART_RxCpltCallback+0x34>)
 80007e8:	4807      	ldr	r0, [pc, #28]	; (8000808 <HAL_UART_RxCpltCallback+0x38>)
 80007ea:	f003 fb32 	bl	8003e52 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart1, &rx_buff, 1);
 80007ee:	2201      	movs	r2, #1
 80007f0:	4904      	ldr	r1, [pc, #16]	; (8000804 <HAL_UART_RxCpltCallback+0x34>)
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <HAL_UART_RxCpltCallback+0x38>)
 80007f4:	f003 fbbf 	bl	8003f76 <HAL_UART_Receive_IT>
	}
}
 80007f8:	bf00      	nop
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40011000 	.word	0x40011000
 8000804:	20000029 	.word	0x20000029
 8000808:	20000074 	.word	0x20000074

0800080c <Tapion>:

void Tapion() {
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  tone(1046, 203);
 8000810:	21cb      	movs	r1, #203	; 0xcb
 8000812:	f240 4016 	movw	r0, #1046	; 0x416
 8000816:	f7ff ff9f 	bl	8000758 <tone>
  HAL_Delay(226);
 800081a:	20e2      	movs	r0, #226	; 0xe2
 800081c:	f001 fe80 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000820:	2009      	movs	r0, #9
 8000822:	f001 fe7d 	bl	8002520 <HAL_Delay>
  HAL_Delay(380);
 8000826:	f44f 70be 	mov.w	r0, #380	; 0x17c
 800082a:	f001 fe79 	bl	8002520 <HAL_Delay>
  tone(1046, 611);
 800082e:	f240 2163 	movw	r1, #611	; 0x263
 8000832:	f240 4016 	movw	r0, #1046	; 0x416
 8000836:	f7ff ff8f 	bl	8000758 <tone>
  HAL_Delay(679);
 800083a:	f240 20a7 	movw	r0, #679	; 0x2a7
 800083e:	f001 fe6f 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000842:	202d      	movs	r0, #45	; 0x2d
 8000844:	f001 fe6c 	bl	8002520 <HAL_Delay>
  tone(1046, 57);
 8000848:	2139      	movs	r1, #57	; 0x39
 800084a:	f240 4016 	movw	r0, #1046	; 0x416
 800084e:	f7ff ff83 	bl	8000758 <tone>
  HAL_Delay(63);
 8000852:	203f      	movs	r0, #63	; 0x3f
 8000854:	f001 fe64 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000858:	2012      	movs	r0, #18
 800085a:	f001 fe61 	bl	8002520 <HAL_Delay>
  tone(1046, 65);
 800085e:	2141      	movs	r1, #65	; 0x41
 8000860:	f240 4016 	movw	r0, #1046	; 0x416
 8000864:	f7ff ff78 	bl	8000758 <tone>
  HAL_Delay(72);
 8000868:	2048      	movs	r0, #72	; 0x48
 800086a:	f001 fe59 	bl	8002520 <HAL_Delay>
  HAL_Delay(706);
 800086e:	f240 20c2 	movw	r0, #706	; 0x2c2
 8000872:	f001 fe55 	bl	8002520 <HAL_Delay>
  HAL_Delay(289);
 8000876:	f240 1021 	movw	r0, #289	; 0x121
 800087a:	f001 fe51 	bl	8002520 <HAL_Delay>
  tone(2093, 73);
 800087e:	2149      	movs	r1, #73	; 0x49
 8000880:	f640 002d 	movw	r0, #2093	; 0x82d
 8000884:	f7ff ff68 	bl	8000758 <tone>
  HAL_Delay(81);
 8000888:	2051      	movs	r0, #81	; 0x51
 800088a:	f001 fe49 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 800088e:	2009      	movs	r0, #9
 8000890:	f001 fe46 	bl	8002520 <HAL_Delay>
  tone(1396, 105);
 8000894:	2169      	movs	r1, #105	; 0x69
 8000896:	f240 5074 	movw	r0, #1396	; 0x574
 800089a:	f7ff ff5d 	bl	8000758 <tone>
  HAL_Delay(117);
 800089e:	2075      	movs	r0, #117	; 0x75
 80008a0:	f001 fe3e 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 80008a4:	201b      	movs	r0, #27
 80008a6:	f001 fe3b 	bl	8002520 <HAL_Delay>
  HAL_Delay(63);
 80008aa:	203f      	movs	r0, #63	; 0x3f
 80008ac:	f001 fe38 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 80008b0:	2118      	movs	r1, #24
 80008b2:	f240 5074 	movw	r0, #1396	; 0x574
 80008b6:	f7ff ff4f 	bl	8000758 <tone>
  HAL_Delay(27);
 80008ba:	201b      	movs	r0, #27
 80008bc:	f001 fe30 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 80008c0:	202d      	movs	r0, #45	; 0x2d
 80008c2:	f001 fe2d 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 80008c6:	2128      	movs	r1, #40	; 0x28
 80008c8:	f640 002d 	movw	r0, #2093	; 0x82d
 80008cc:	f7ff ff44 	bl	8000758 <tone>
  HAL_Delay(45);
 80008d0:	202d      	movs	r0, #45	; 0x2d
 80008d2:	f001 fe25 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 80008d6:	2110      	movs	r1, #16
 80008d8:	f240 5074 	movw	r0, #1396	; 0x574
 80008dc:	f7ff ff3c 	bl	8000758 <tone>
  HAL_Delay(18);
 80008e0:	2012      	movs	r0, #18
 80008e2:	f001 fe1d 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80008e6:	2012      	movs	r0, #18
 80008e8:	f001 fe1a 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 80008ec:	201b      	movs	r0, #27
 80008ee:	f001 fe17 	bl	8002520 <HAL_Delay>
  tone(1396, 65);
 80008f2:	2141      	movs	r1, #65	; 0x41
 80008f4:	f240 5074 	movw	r0, #1396	; 0x574
 80008f8:	f7ff ff2e 	bl	8000758 <tone>
  HAL_Delay(72);
 80008fc:	2048      	movs	r0, #72	; 0x48
 80008fe:	f001 fe0f 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 8000902:	2128      	movs	r1, #40	; 0x28
 8000904:	f640 002d 	movw	r0, #2093	; 0x82d
 8000908:	f7ff ff26 	bl	8000758 <tone>
  HAL_Delay(45);
 800090c:	202d      	movs	r0, #45	; 0x2d
 800090e:	f001 fe07 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000912:	2012      	movs	r0, #18
 8000914:	f001 fe04 	bl	8002520 <HAL_Delay>
  tone(1396, 32);
 8000918:	2120      	movs	r1, #32
 800091a:	f240 5074 	movw	r0, #1396	; 0x574
 800091e:	f7ff ff1b 	bl	8000758 <tone>
  HAL_Delay(36);
 8000922:	2024      	movs	r0, #36	; 0x24
 8000924:	f001 fdfc 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8000928:	2048      	movs	r0, #72	; 0x48
 800092a:	f001 fdf9 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 800092e:	2128      	movs	r1, #40	; 0x28
 8000930:	f640 002d 	movw	r0, #2093	; 0x82d
 8000934:	f7ff ff10 	bl	8000758 <tone>
  HAL_Delay(45);
 8000938:	202d      	movs	r0, #45	; 0x2d
 800093a:	f001 fdf1 	bl	8002520 <HAL_Delay>
  tone(1661, 285);
 800093e:	f240 111d 	movw	r1, #285	; 0x11d
 8000942:	f240 607d 	movw	r0, #1661	; 0x67d
 8000946:	f7ff ff07 	bl	8000758 <tone>
  HAL_Delay(317);
 800094a:	f240 103d 	movw	r0, #317	; 0x13d
 800094e:	f001 fde7 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000952:	202d      	movs	r0, #45	; 0x2d
 8000954:	f001 fde4 	bl	8002520 <HAL_Delay>
  tone(1760, 24);
 8000958:	2118      	movs	r1, #24
 800095a:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 800095e:	f7ff fefb 	bl	8000758 <tone>
  HAL_Delay(27);
 8000962:	201b      	movs	r0, #27
 8000964:	f001 fddc 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8000968:	201b      	movs	r0, #27
 800096a:	f001 fdd9 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 800096e:	2128      	movs	r1, #40	; 0x28
 8000970:	f240 607d 	movw	r0, #1661	; 0x67d
 8000974:	f7ff fef0 	bl	8000758 <tone>
  HAL_Delay(45);
 8000978:	202d      	movs	r0, #45	; 0x2d
 800097a:	f001 fdd1 	bl	8002520 <HAL_Delay>
  tone(1864, 847);
 800097e:	f240 314f 	movw	r1, #847	; 0x34f
 8000982:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8000986:	f7ff fee7 	bl	8000758 <tone>
  HAL_Delay(942);
 800098a:	f240 30ae 	movw	r0, #942	; 0x3ae
 800098e:	f001 fdc7 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000992:	2009      	movs	r0, #9
 8000994:	f001 fdc4 	bl	8002520 <HAL_Delay>
  tone(1864, 187);
 8000998:	21bb      	movs	r1, #187	; 0xbb
 800099a:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800099e:	f7ff fedb 	bl	8000758 <tone>
  HAL_Delay(208);
 80009a2:	20d0      	movs	r0, #208	; 0xd0
 80009a4:	f001 fdbc 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80009a8:	2009      	movs	r0, #9
 80009aa:	f001 fdb9 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 80009ae:	2048      	movs	r0, #72	; 0x48
 80009b0:	f001 fdb6 	bl	8002520 <HAL_Delay>
  tone(1864, 16);
 80009b4:	2110      	movs	r1, #16
 80009b6:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 80009ba:	f7ff fecd 	bl	8000758 <tone>
  HAL_Delay(18);
 80009be:	2012      	movs	r0, #18
 80009c0:	f001 fdae 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80009c4:	2009      	movs	r0, #9
 80009c6:	f001 fdab 	bl	8002520 <HAL_Delay>
  tone(1864, 48);
 80009ca:	2130      	movs	r1, #48	; 0x30
 80009cc:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 80009d0:	f7ff fec2 	bl	8000758 <tone>
  HAL_Delay(54);
 80009d4:	2036      	movs	r0, #54	; 0x36
 80009d6:	f001 fda3 	bl	8002520 <HAL_Delay>
  HAL_Delay(226);
 80009da:	20e2      	movs	r0, #226	; 0xe2
 80009dc:	f001 fda0 	bl	8002520 <HAL_Delay>
  tone(1396, 114);
 80009e0:	2172      	movs	r1, #114	; 0x72
 80009e2:	f240 5074 	movw	r0, #1396	; 0x574
 80009e6:	f7ff feb7 	bl	8000758 <tone>
  HAL_Delay(126);
 80009ea:	207e      	movs	r0, #126	; 0x7e
 80009ec:	f001 fd98 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80009f0:	2009      	movs	r0, #9
 80009f2:	f001 fd95 	bl	8002520 <HAL_Delay>
  HAL_Delay(172);
 80009f6:	20ac      	movs	r0, #172	; 0xac
 80009f8:	f001 fd92 	bl	8002520 <HAL_Delay>
  tone(1396, 57);
 80009fc:	2139      	movs	r1, #57	; 0x39
 80009fe:	f240 5074 	movw	r0, #1396	; 0x574
 8000a02:	f7ff fea9 	bl	8000758 <tone>
  HAL_Delay(63);
 8000a06:	203f      	movs	r0, #63	; 0x3f
 8000a08:	f001 fd8a 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000a0c:	2009      	movs	r0, #9
 8000a0e:	f001 fd87 	bl	8002520 <HAL_Delay>
  tone(1396, 203);
 8000a12:	21cb      	movs	r1, #203	; 0xcb
 8000a14:	f240 5074 	movw	r0, #1396	; 0x574
 8000a18:	f7ff fe9e 	bl	8000758 <tone>
  HAL_Delay(226);
 8000a1c:	20e2      	movs	r0, #226	; 0xe2
 8000a1e:	f001 fd7f 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000a22:	202d      	movs	r0, #45	; 0x2d
 8000a24:	f001 fd7c 	bl	8002520 <HAL_Delay>
  tone(1396, 65);
 8000a28:	2141      	movs	r1, #65	; 0x41
 8000a2a:	f240 5074 	movw	r0, #1396	; 0x574
 8000a2e:	f7ff fe93 	bl	8000758 <tone>
  HAL_Delay(72);
 8000a32:	2048      	movs	r0, #72	; 0x48
 8000a34:	f001 fd74 	bl	8002520 <HAL_Delay>
  tone(1567, 163);
 8000a38:	21a3      	movs	r1, #163	; 0xa3
 8000a3a:	f240 601f 	movw	r0, #1567	; 0x61f
 8000a3e:	f7ff fe8b 	bl	8000758 <tone>
  HAL_Delay(181);
 8000a42:	20b5      	movs	r0, #181	; 0xb5
 8000a44:	f001 fd6c 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8000a48:	2024      	movs	r0, #36	; 0x24
 8000a4a:	f001 fd69 	bl	8002520 <HAL_Delay>
  tone(1567, 57);
 8000a4e:	2139      	movs	r1, #57	; 0x39
 8000a50:	f240 601f 	movw	r0, #1567	; 0x61f
 8000a54:	f7ff fe80 	bl	8000758 <tone>
  HAL_Delay(63);
 8000a58:	203f      	movs	r0, #63	; 0x3f
 8000a5a:	f001 fd61 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000a5e:	2012      	movs	r0, #18
 8000a60:	f001 fd5e 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 8000a64:	2128      	movs	r1, #40	; 0x28
 8000a66:	f240 601f 	movw	r0, #1567	; 0x61f
 8000a6a:	f7ff fe75 	bl	8000758 <tone>
  HAL_Delay(45);
 8000a6e:	202d      	movs	r0, #45	; 0x2d
 8000a70:	f001 fd56 	bl	8002520 <HAL_Delay>
  HAL_Delay(1114);
 8000a74:	f240 405a 	movw	r0, #1114	; 0x45a
 8000a78:	f001 fd52 	bl	8002520 <HAL_Delay>
  HAL_Delay(606);
 8000a7c:	f240 205e 	movw	r0, #606	; 0x25e
 8000a80:	f001 fd4e 	bl	8002520 <HAL_Delay>
  tone(1864, 40);
 8000a84:	2128      	movs	r1, #40	; 0x28
 8000a86:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8000a8a:	f7ff fe65 	bl	8000758 <tone>
  HAL_Delay(45);
 8000a8e:	202d      	movs	r0, #45	; 0x2d
 8000a90:	f001 fd46 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000a94:	2009      	movs	r0, #9
 8000a96:	f001 fd43 	bl	8002520 <HAL_Delay>
  tone(1864, 24);
 8000a9a:	2118      	movs	r1, #24
 8000a9c:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8000aa0:	f7ff fe5a 	bl	8000758 <tone>
  HAL_Delay(27);
 8000aa4:	201b      	movs	r0, #27
 8000aa6:	f001 fd3b 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000aaa:	2009      	movs	r0, #9
 8000aac:	f001 fd38 	bl	8002520 <HAL_Delay>
  tone(1864, 114);
 8000ab0:	2172      	movs	r1, #114	; 0x72
 8000ab2:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8000ab6:	f7ff fe4f 	bl	8000758 <tone>
  HAL_Delay(126);
 8000aba:	207e      	movs	r0, #126	; 0x7e
 8000abc:	f001 fd30 	bl	8002520 <HAL_Delay>
  tone(1661, 8);
 8000ac0:	2108      	movs	r1, #8
 8000ac2:	f240 607d 	movw	r0, #1661	; 0x67d
 8000ac6:	f7ff fe47 	bl	8000758 <tone>
  HAL_Delay(9);
 8000aca:	2009      	movs	r0, #9
 8000acc:	f001 fd28 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000ad0:	2012      	movs	r0, #18
 8000ad2:	f001 fd25 	bl	8002520 <HAL_Delay>
  tone(1661, 130);
 8000ad6:	2182      	movs	r1, #130	; 0x82
 8000ad8:	f240 607d 	movw	r0, #1661	; 0x67d
 8000adc:	f7ff fe3c 	bl	8000758 <tone>
  HAL_Delay(144);
 8000ae0:	2090      	movs	r0, #144	; 0x90
 8000ae2:	f001 fd1d 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f001 fd1a 	bl	8002520 <HAL_Delay>
  tone(1661, 65);
 8000aec:	2141      	movs	r1, #65	; 0x41
 8000aee:	f240 607d 	movw	r0, #1661	; 0x67d
 8000af2:	f7ff fe31 	bl	8000758 <tone>
  HAL_Delay(72);
 8000af6:	2048      	movs	r0, #72	; 0x48
 8000af8:	f001 fd12 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000afc:	2012      	movs	r0, #18
 8000afe:	f001 fd0f 	bl	8002520 <HAL_Delay>
  tone(1661, 57);
 8000b02:	2139      	movs	r1, #57	; 0x39
 8000b04:	f240 607d 	movw	r0, #1661	; 0x67d
 8000b08:	f7ff fe26 	bl	8000758 <tone>
  HAL_Delay(63);
 8000b0c:	203f      	movs	r0, #63	; 0x3f
 8000b0e:	f001 fd07 	bl	8002520 <HAL_Delay>
  HAL_Delay(63);
 8000b12:	203f      	movs	r0, #63	; 0x3f
 8000b14:	f001 fd04 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 8000b18:	2120      	movs	r1, #32
 8000b1a:	f240 607d 	movw	r0, #1661	; 0x67d
 8000b1e:	f7ff fe1b 	bl	8000758 <tone>
  HAL_Delay(36);
 8000b22:	2024      	movs	r0, #36	; 0x24
 8000b24:	f001 fcfc 	bl	8002520 <HAL_Delay>
  HAL_Delay(561);
 8000b28:	f240 2031 	movw	r0, #561	; 0x231
 8000b2c:	f001 fcf8 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 8000b30:	2118      	movs	r1, #24
 8000b32:	f240 5074 	movw	r0, #1396	; 0x574
 8000b36:	f7ff fe0f 	bl	8000758 <tone>
  HAL_Delay(27);
 8000b3a:	201b      	movs	r0, #27
 8000b3c:	f001 fcf0 	bl	8002520 <HAL_Delay>
  tone(1567, 285);
 8000b40:	f240 111d 	movw	r1, #285	; 0x11d
 8000b44:	f240 601f 	movw	r0, #1567	; 0x61f
 8000b48:	f7ff fe06 	bl	8000758 <tone>
  HAL_Delay(317);
 8000b4c:	f240 103d 	movw	r0, #317	; 0x13d
 8000b50:	f001 fce6 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000b54:	2012      	movs	r0, #18
 8000b56:	f001 fce3 	bl	8002520 <HAL_Delay>
  tone(1567, 130);
 8000b5a:	2182      	movs	r1, #130	; 0x82
 8000b5c:	f240 601f 	movw	r0, #1567	; 0x61f
 8000b60:	f7ff fdfa 	bl	8000758 <tone>
  HAL_Delay(144);
 8000b64:	2090      	movs	r0, #144	; 0x90
 8000b66:	f001 fcdb 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000b6a:	2009      	movs	r0, #9
 8000b6c:	f001 fcd8 	bl	8002520 <HAL_Delay>
  tone(1567, 114);
 8000b70:	2172      	movs	r1, #114	; 0x72
 8000b72:	f240 601f 	movw	r0, #1567	; 0x61f
 8000b76:	f7ff fdef 	bl	8000758 <tone>
  HAL_Delay(126);
 8000b7a:	207e      	movs	r0, #126	; 0x7e
 8000b7c:	f001 fcd0 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000b80:	2012      	movs	r0, #18
 8000b82:	f001 fccd 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 8000b86:	2149      	movs	r1, #73	; 0x49
 8000b88:	f240 4016 	movw	r0, #1046	; 0x416
 8000b8c:	f7ff fde4 	bl	8000758 <tone>
  HAL_Delay(81);
 8000b90:	2051      	movs	r0, #81	; 0x51
 8000b92:	f001 fcc5 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000b96:	2009      	movs	r0, #9
 8000b98:	f001 fcc2 	bl	8002520 <HAL_Delay>
  tone(1567, 8);
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	f240 601f 	movw	r0, #1567	; 0x61f
 8000ba2:	f7ff fdd9 	bl	8000758 <tone>
  HAL_Delay(9);
 8000ba6:	2009      	movs	r0, #9
 8000ba8:	f001 fcba 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8000bac:	2024      	movs	r0, #36	; 0x24
 8000bae:	f001 fcb7 	bl	8002520 <HAL_Delay>
  tone(1567, 24);
 8000bb2:	2118      	movs	r1, #24
 8000bb4:	f240 601f 	movw	r0, #1567	; 0x61f
 8000bb8:	f7ff fdce 	bl	8000758 <tone>
  HAL_Delay(27);
 8000bbc:	201b      	movs	r0, #27
 8000bbe:	f001 fcaf 	bl	8002520 <HAL_Delay>
  HAL_Delay(307);
 8000bc2:	f240 1033 	movw	r0, #307	; 0x133
 8000bc6:	f001 fcab 	bl	8002520 <HAL_Delay>
  tone(1046, 611);
 8000bca:	f240 2163 	movw	r1, #611	; 0x263
 8000bce:	f240 4016 	movw	r0, #1046	; 0x416
 8000bd2:	f7ff fdc1 	bl	8000758 <tone>
  HAL_Delay(679);
 8000bd6:	f240 20a7 	movw	r0, #679	; 0x2a7
 8000bda:	f001 fca1 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000bde:	202d      	movs	r0, #45	; 0x2d
 8000be0:	f001 fc9e 	bl	8002520 <HAL_Delay>
  tone(1046, 57);
 8000be4:	2139      	movs	r1, #57	; 0x39
 8000be6:	f240 4016 	movw	r0, #1046	; 0x416
 8000bea:	f7ff fdb5 	bl	8000758 <tone>
  HAL_Delay(63);
 8000bee:	203f      	movs	r0, #63	; 0x3f
 8000bf0:	f001 fc96 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000bf4:	2012      	movs	r0, #18
 8000bf6:	f001 fc93 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 8000bfa:	2149      	movs	r1, #73	; 0x49
 8000bfc:	f240 4016 	movw	r0, #1046	; 0x416
 8000c00:	f7ff fdaa 	bl	8000758 <tone>
  HAL_Delay(81);
 8000c04:	2051      	movs	r0, #81	; 0x51
 8000c06:	f001 fc8b 	bl	8002520 <HAL_Delay>
  HAL_Delay(697);
 8000c0a:	f240 20b9 	movw	r0, #697	; 0x2b9
 8000c0e:	f001 fc87 	bl	8002520 <HAL_Delay>
  HAL_Delay(289);
 8000c12:	f240 1021 	movw	r0, #289	; 0x121
 8000c16:	f001 fc83 	bl	8002520 <HAL_Delay>
  tone(1396, 179);
 8000c1a:	21b3      	movs	r1, #179	; 0xb3
 8000c1c:	f240 5074 	movw	r0, #1396	; 0x574
 8000c20:	f7ff fd9a 	bl	8000758 <tone>
  HAL_Delay(199);
 8000c24:	20c7      	movs	r0, #199	; 0xc7
 8000c26:	f001 fc7b 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8000c2a:	201b      	movs	r0, #27
 8000c2c:	f001 fc78 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8000c30:	2048      	movs	r0, #72	; 0x48
 8000c32:	f001 fc75 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 8000c36:	2118      	movs	r1, #24
 8000c38:	f240 5074 	movw	r0, #1396	; 0x574
 8000c3c:	f7ff fd8c 	bl	8000758 <tone>
  HAL_Delay(27);
 8000c40:	201b      	movs	r0, #27
 8000c42:	f001 fc6d 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000c46:	202d      	movs	r0, #45	; 0x2d
 8000c48:	f001 fc6a 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 8000c4c:	2128      	movs	r1, #40	; 0x28
 8000c4e:	f640 002d 	movw	r0, #2093	; 0x82d
 8000c52:	f7ff fd81 	bl	8000758 <tone>
  HAL_Delay(45);
 8000c56:	202d      	movs	r0, #45	; 0x2d
 8000c58:	f001 fc62 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 8000c5c:	2118      	movs	r1, #24
 8000c5e:	f240 5074 	movw	r0, #1396	; 0x574
 8000c62:	f7ff fd79 	bl	8000758 <tone>
  HAL_Delay(27);
 8000c66:	201b      	movs	r0, #27
 8000c68:	f001 fc5a 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000c6c:	2009      	movs	r0, #9
 8000c6e:	f001 fc57 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8000c72:	201b      	movs	r0, #27
 8000c74:	f001 fc54 	bl	8002520 <HAL_Delay>
  tone(1396, 65);
 8000c78:	2141      	movs	r1, #65	; 0x41
 8000c7a:	f240 5074 	movw	r0, #1396	; 0x574
 8000c7e:	f7ff fd6b 	bl	8000758 <tone>
  HAL_Delay(72);
 8000c82:	2048      	movs	r0, #72	; 0x48
 8000c84:	f001 fc4c 	bl	8002520 <HAL_Delay>
  HAL_Delay(63);
 8000c88:	203f      	movs	r0, #63	; 0x3f
 8000c8a:	f001 fc49 	bl	8002520 <HAL_Delay>
  tone(2093, 16);
 8000c8e:	2110      	movs	r1, #16
 8000c90:	f640 002d 	movw	r0, #2093	; 0x82d
 8000c94:	f7ff fd60 	bl	8000758 <tone>
  HAL_Delay(18);
 8000c98:	2012      	movs	r0, #18
 8000c9a:	f001 fc41 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	f240 5074 	movw	r0, #1396	; 0x574
 8000ca4:	f7ff fd58 	bl	8000758 <tone>
  HAL_Delay(18);
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f001 fc39 	bl	8002520 <HAL_Delay>
  HAL_Delay(81);
 8000cae:	2051      	movs	r0, #81	; 0x51
 8000cb0:	f001 fc36 	bl	8002520 <HAL_Delay>
  tone(2093, 32);
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	f640 002d 	movw	r0, #2093	; 0x82d
 8000cba:	f7ff fd4d 	bl	8000758 <tone>
  HAL_Delay(36);
 8000cbe:	2024      	movs	r0, #36	; 0x24
 8000cc0:	f001 fc2e 	bl	8002520 <HAL_Delay>
  tone(1661, 220);
 8000cc4:	21dc      	movs	r1, #220	; 0xdc
 8000cc6:	f240 607d 	movw	r0, #1661	; 0x67d
 8000cca:	f7ff fd45 	bl	8000758 <tone>
  HAL_Delay(244);
 8000cce:	20f4      	movs	r0, #244	; 0xf4
 8000cd0:	f001 fc26 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000cd4:	2012      	movs	r0, #18
 8000cd6:	f001 fc23 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 8000cda:	2128      	movs	r1, #40	; 0x28
 8000cdc:	f240 607d 	movw	r0, #1661	; 0x67d
 8000ce0:	f7ff fd3a 	bl	8000758 <tone>
  HAL_Delay(45);
 8000ce4:	202d      	movs	r0, #45	; 0x2d
 8000ce6:	f001 fc1b 	bl	8002520 <HAL_Delay>
  HAL_Delay(126);
 8000cea:	207e      	movs	r0, #126	; 0x7e
 8000cec:	f001 fc18 	bl	8002520 <HAL_Delay>
  tone(1661, 24);
 8000cf0:	2118      	movs	r1, #24
 8000cf2:	f240 607d 	movw	r0, #1661	; 0x67d
 8000cf6:	f7ff fd2f 	bl	8000758 <tone>
  HAL_Delay(27);
 8000cfa:	201b      	movs	r0, #27
 8000cfc:	f001 fc10 	bl	8002520 <HAL_Delay>
  tone(1864, 1043);
 8000d00:	f240 4113 	movw	r1, #1043	; 0x413
 8000d04:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8000d08:	f7ff fd26 	bl	8000758 <tone>
  HAL_Delay(1159);
 8000d0c:	f240 4087 	movw	r0, #1159	; 0x487
 8000d10:	f001 fc06 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000d14:	2009      	movs	r0, #9
 8000d16:	f001 fc03 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8000d1a:	2048      	movs	r0, #72	; 0x48
 8000d1c:	f001 fc00 	bl	8002520 <HAL_Delay>
  tone(1864, 8);
 8000d20:	2108      	movs	r1, #8
 8000d22:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8000d26:	f7ff fd17 	bl	8000758 <tone>
  HAL_Delay(9);
 8000d2a:	2009      	movs	r0, #9
 8000d2c:	f001 fbf8 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000d30:	2012      	movs	r0, #18
 8000d32:	f001 fbf5 	bl	8002520 <HAL_Delay>
  tone(1864, 57);
 8000d36:	2139      	movs	r1, #57	; 0x39
 8000d38:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8000d3c:	f7ff fd0c 	bl	8000758 <tone>
  HAL_Delay(63);
 8000d40:	203f      	movs	r0, #63	; 0x3f
 8000d42:	f001 fbed 	bl	8002520 <HAL_Delay>
  HAL_Delay(217);
 8000d46:	20d9      	movs	r0, #217	; 0xd9
 8000d48:	f001 fbea 	bl	8002520 <HAL_Delay>
  tone(1396, 179);
 8000d4c:	21b3      	movs	r1, #179	; 0xb3
 8000d4e:	f240 5074 	movw	r0, #1396	; 0x574
 8000d52:	f7ff fd01 	bl	8000758 <tone>
  HAL_Delay(199);
 8000d56:	20c7      	movs	r0, #199	; 0xc7
 8000d58:	f001 fbe2 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000d5c:	2009      	movs	r0, #9
 8000d5e:	f001 fbdf 	bl	8002520 <HAL_Delay>
  HAL_Delay(99);
 8000d62:	2063      	movs	r0, #99	; 0x63
 8000d64:	f001 fbdc 	bl	8002520 <HAL_Delay>
  tone(1567, 211);
 8000d68:	21d3      	movs	r1, #211	; 0xd3
 8000d6a:	f240 601f 	movw	r0, #1567	; 0x61f
 8000d6e:	f7ff fcf3 	bl	8000758 <tone>
  HAL_Delay(235);
 8000d72:	20eb      	movs	r0, #235	; 0xeb
 8000d74:	f001 fbd4 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000d78:	2009      	movs	r0, #9
 8000d7a:	f001 fbd1 	bl	8002520 <HAL_Delay>
  tone(1396, 48);
 8000d7e:	2130      	movs	r1, #48	; 0x30
 8000d80:	f240 5074 	movw	r0, #1396	; 0x574
 8000d84:	f7ff fce8 	bl	8000758 <tone>
  HAL_Delay(54);
 8000d88:	2036      	movs	r0, #54	; 0x36
 8000d8a:	f001 fbc9 	bl	8002520 <HAL_Delay>
  tone(1567, 8);
 8000d8e:	2108      	movs	r1, #8
 8000d90:	f240 601f 	movw	r0, #1567	; 0x61f
 8000d94:	f7ff fce0 	bl	8000758 <tone>
  HAL_Delay(9);
 8000d98:	2009      	movs	r0, #9
 8000d9a:	f001 fbc1 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000d9e:	2009      	movs	r0, #9
 8000da0:	f001 fbbe 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8000da4:	201b      	movs	r0, #27
 8000da6:	f001 fbbb 	bl	8002520 <HAL_Delay>
  tone(1396, 57);
 8000daa:	2139      	movs	r1, #57	; 0x39
 8000dac:	f240 5074 	movw	r0, #1396	; 0x574
 8000db0:	f7ff fcd2 	bl	8000758 <tone>
  HAL_Delay(63);
 8000db4:	203f      	movs	r0, #63	; 0x3f
 8000db6:	f001 fbb3 	bl	8002520 <HAL_Delay>
  tone(1567, 57);
 8000dba:	2139      	movs	r1, #57	; 0x39
 8000dbc:	f240 601f 	movw	r0, #1567	; 0x61f
 8000dc0:	f7ff fcca 	bl	8000758 <tone>
  HAL_Delay(63);
 8000dc4:	203f      	movs	r0, #63	; 0x3f
 8000dc6:	f001 fbab 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000dca:	202d      	movs	r0, #45	; 0x2d
 8000dcc:	f001 fba8 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 8000dd0:	2128      	movs	r1, #40	; 0x28
 8000dd2:	f240 601f 	movw	r0, #1567	; 0x61f
 8000dd6:	f7ff fcbf 	bl	8000758 <tone>
  HAL_Delay(45);
 8000dda:	202d      	movs	r0, #45	; 0x2d
 8000ddc:	f001 fba0 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000de0:	2009      	movs	r0, #9
 8000de2:	f001 fb9d 	bl	8002520 <HAL_Delay>
  tone(1567, 32);
 8000de6:	2120      	movs	r1, #32
 8000de8:	f240 601f 	movw	r0, #1567	; 0x61f
 8000dec:	f7ff fcb4 	bl	8000758 <tone>
  HAL_Delay(36);
 8000df0:	2024      	movs	r0, #36	; 0x24
 8000df2:	f001 fb95 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000df6:	202d      	movs	r0, #45	; 0x2d
 8000df8:	f001 fb92 	bl	8002520 <HAL_Delay>
  tone(1567, 32);
 8000dfc:	2120      	movs	r1, #32
 8000dfe:	f240 601f 	movw	r0, #1567	; 0x61f
 8000e02:	f7ff fca9 	bl	8000758 <tone>
  HAL_Delay(36);
 8000e06:	2024      	movs	r0, #36	; 0x24
 8000e08:	f001 fb8a 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8000e0c:	2024      	movs	r0, #36	; 0x24
 8000e0e:	f001 fb87 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 8000e12:	2128      	movs	r1, #40	; 0x28
 8000e14:	f240 601f 	movw	r0, #1567	; 0x61f
 8000e18:	f7ff fc9e 	bl	8000758 <tone>
  HAL_Delay(45);
 8000e1c:	202d      	movs	r0, #45	; 0x2d
 8000e1e:	f001 fb7f 	bl	8002520 <HAL_Delay>
  HAL_Delay(425);
 8000e22:	f240 10a9 	movw	r0, #425	; 0x1a9
 8000e26:	f001 fb7b 	bl	8002520 <HAL_Delay>
  tone(1661, 260);
 8000e2a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000e2e:	f240 607d 	movw	r0, #1661	; 0x67d
 8000e32:	f7ff fc91 	bl	8000758 <tone>
  HAL_Delay(289);
 8000e36:	f240 1021 	movw	r0, #289	; 0x121
 8000e3a:	f001 fb71 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000e3e:	2012      	movs	r0, #18
 8000e40:	f001 fb6e 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 8000e44:	2128      	movs	r1, #40	; 0x28
 8000e46:	f240 607d 	movw	r0, #1661	; 0x67d
 8000e4a:	f7ff fc85 	bl	8000758 <tone>
  HAL_Delay(45);
 8000e4e:	202d      	movs	r0, #45	; 0x2d
 8000e50:	f001 fb66 	bl	8002520 <HAL_Delay>
  HAL_Delay(126);
 8000e54:	207e      	movs	r0, #126	; 0x7e
 8000e56:	f001 fb63 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8000e5a:	2048      	movs	r0, #72	; 0x48
 8000e5c:	f001 fb60 	bl	8002520 <HAL_Delay>
  tone(1661, 24);
 8000e60:	2118      	movs	r1, #24
 8000e62:	f240 607d 	movw	r0, #1661	; 0x67d
 8000e66:	f7ff fc77 	bl	8000758 <tone>
  HAL_Delay(27);
 8000e6a:	201b      	movs	r0, #27
 8000e6c:	f001 fb58 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8000e70:	201b      	movs	r0, #27
 8000e72:	f001 fb55 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 8000e76:	2128      	movs	r1, #40	; 0x28
 8000e78:	f240 607d 	movw	r0, #1661	; 0x67d
 8000e7c:	f7ff fc6c 	bl	8000758 <tone>
  HAL_Delay(45);
 8000e80:	202d      	movs	r0, #45	; 0x2d
 8000e82:	f001 fb4d 	bl	8002520 <HAL_Delay>
  tone(1567, 171);
 8000e86:	21ab      	movs	r1, #171	; 0xab
 8000e88:	f240 601f 	movw	r0, #1567	; 0x61f
 8000e8c:	f7ff fc64 	bl	8000758 <tone>
  HAL_Delay(190);
 8000e90:	20be      	movs	r0, #190	; 0xbe
 8000e92:	f001 fb45 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000e96:	2012      	movs	r0, #18
 8000e98:	f001 fb42 	bl	8002520 <HAL_Delay>
  tone(1396, 48);
 8000e9c:	2130      	movs	r1, #48	; 0x30
 8000e9e:	f240 5074 	movw	r0, #1396	; 0x574
 8000ea2:	f7ff fc59 	bl	8000758 <tone>
  HAL_Delay(54);
 8000ea6:	2036      	movs	r0, #54	; 0x36
 8000ea8:	f001 fb3a 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000eac:	2012      	movs	r0, #18
 8000eae:	f001 fb37 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000eb2:	2012      	movs	r0, #18
 8000eb4:	f001 fb34 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000eb8:	2009      	movs	r0, #9
 8000eba:	f001 fb31 	bl	8002520 <HAL_Delay>
  tone(1567, 65);
 8000ebe:	2141      	movs	r1, #65	; 0x41
 8000ec0:	f240 601f 	movw	r0, #1567	; 0x61f
 8000ec4:	f7ff fc48 	bl	8000758 <tone>
  HAL_Delay(72);
 8000ec8:	2048      	movs	r0, #72	; 0x48
 8000eca:	f001 fb29 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8000ece:	2110      	movs	r1, #16
 8000ed0:	f240 5074 	movw	r0, #1396	; 0x574
 8000ed4:	f7ff fc40 	bl	8000758 <tone>
  HAL_Delay(18);
 8000ed8:	2012      	movs	r0, #18
 8000eda:	f001 fb21 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000ede:	2012      	movs	r0, #18
 8000ee0:	f001 fb1e 	bl	8002520 <HAL_Delay>
  tone(1396, 40);
 8000ee4:	2128      	movs	r1, #40	; 0x28
 8000ee6:	f240 5074 	movw	r0, #1396	; 0x574
 8000eea:	f7ff fc35 	bl	8000758 <tone>
  HAL_Delay(45);
 8000eee:	202d      	movs	r0, #45	; 0x2d
 8000ef0:	f001 fb16 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000ef4:	2012      	movs	r0, #18
 8000ef6:	f001 fb13 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000efa:	202d      	movs	r0, #45	; 0x2d
 8000efc:	f001 fb10 	bl	8002520 <HAL_Delay>
  tone(1318, 24);
 8000f00:	2118      	movs	r1, #24
 8000f02:	f240 5026 	movw	r0, #1318	; 0x526
 8000f06:	f7ff fc27 	bl	8000758 <tone>
  HAL_Delay(27);
 8000f0a:	201b      	movs	r0, #27
 8000f0c:	f001 fb08 	bl	8002520 <HAL_Delay>
  tone(1244, 57);
 8000f10:	2139      	movs	r1, #57	; 0x39
 8000f12:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8000f16:	f7ff fc1f 	bl	8000758 <tone>
  HAL_Delay(63);
 8000f1a:	203f      	movs	r0, #63	; 0x3f
 8000f1c:	f001 fb00 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000f20:	2009      	movs	r0, #9
 8000f22:	f001 fafd 	bl	8002520 <HAL_Delay>
  tone(1244, 195);
 8000f26:	21c3      	movs	r1, #195	; 0xc3
 8000f28:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8000f2c:	f7ff fc14 	bl	8000758 <tone>
  HAL_Delay(217);
 8000f30:	20d9      	movs	r0, #217	; 0xd9
 8000f32:	f001 faf5 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000f36:	2009      	movs	r0, #9
 8000f38:	f001 faf2 	bl	8002520 <HAL_Delay>
  tone(1244, 122);
 8000f3c:	217a      	movs	r1, #122	; 0x7a
 8000f3e:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8000f42:	f7ff fc09 	bl	8000758 <tone>
  HAL_Delay(135);
 8000f46:	2087      	movs	r0, #135	; 0x87
 8000f48:	f001 faea 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8000f4c:	2012      	movs	r0, #18
 8000f4e:	f001 fae7 	bl	8002520 <HAL_Delay>
  tone(1244, 211);
 8000f52:	21d3      	movs	r1, #211	; 0xd3
 8000f54:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8000f58:	f7ff fbfe 	bl	8000758 <tone>
  HAL_Delay(235);
 8000f5c:	20eb      	movs	r0, #235	; 0xeb
 8000f5e:	f001 fadf 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8000f62:	2024      	movs	r0, #36	; 0x24
 8000f64:	f001 fadc 	bl	8002520 <HAL_Delay>
  tone(1244, 24);
 8000f68:	2118      	movs	r1, #24
 8000f6a:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8000f6e:	f7ff fbf3 	bl	8000758 <tone>
  HAL_Delay(27);
 8000f72:	201b      	movs	r0, #27
 8000f74:	f001 fad4 	bl	8002520 <HAL_Delay>
  tone(1396, 57);
 8000f78:	2139      	movs	r1, #57	; 0x39
 8000f7a:	f240 5074 	movw	r0, #1396	; 0x574
 8000f7e:	f7ff fbeb 	bl	8000758 <tone>
  HAL_Delay(63);
 8000f82:	203f      	movs	r0, #63	; 0x3f
 8000f84:	f001 facc 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000f88:	2009      	movs	r0, #9
 8000f8a:	f001 fac9 	bl	8002520 <HAL_Delay>
  tone(1396, 774);
 8000f8e:	f240 3106 	movw	r1, #774	; 0x306
 8000f92:	f240 5074 	movw	r0, #1396	; 0x574
 8000f96:	f7ff fbdf 	bl	8000758 <tone>
  HAL_Delay(860);
 8000f9a:	f44f 7057 	mov.w	r0, #860	; 0x35c
 8000f9e:	f001 fabf 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8000fa2:	202d      	movs	r0, #45	; 0x2d
 8000fa4:	f001 fabc 	bl	8002520 <HAL_Delay>
  tone(1396, 40);
 8000fa8:	2128      	movs	r1, #40	; 0x28
 8000faa:	f240 5074 	movw	r0, #1396	; 0x574
 8000fae:	f7ff fbd3 	bl	8000758 <tone>
  HAL_Delay(45);
 8000fb2:	202d      	movs	r0, #45	; 0x2d
 8000fb4:	f001 fab4 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000fb8:	2009      	movs	r0, #9
 8000fba:	f001 fab1 	bl	8002520 <HAL_Delay>
  tone(1046, 383);
 8000fbe:	f240 117f 	movw	r1, #383	; 0x17f
 8000fc2:	f240 4016 	movw	r0, #1046	; 0x416
 8000fc6:	f7ff fbc7 	bl	8000758 <tone>
  HAL_Delay(425);
 8000fca:	f240 10a9 	movw	r0, #425	; 0x1a9
 8000fce:	f001 faa7 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000fd2:	2009      	movs	r0, #9
 8000fd4:	f001 faa4 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 8000fd8:	2149      	movs	r1, #73	; 0x49
 8000fda:	f240 4016 	movw	r0, #1046	; 0x416
 8000fde:	f7ff fbbb 	bl	8000758 <tone>
  HAL_Delay(81);
 8000fe2:	2051      	movs	r0, #81	; 0x51
 8000fe4:	f001 fa9c 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8000fe8:	2009      	movs	r0, #9
 8000fea:	f001 fa99 	bl	8002520 <HAL_Delay>
  HAL_Delay(99);
 8000fee:	2063      	movs	r0, #99	; 0x63
 8000ff0:	f001 fa96 	bl	8002520 <HAL_Delay>
  tone(1046, 611);
 8000ff4:	f240 2163 	movw	r1, #611	; 0x263
 8000ff8:	f240 4016 	movw	r0, #1046	; 0x416
 8000ffc:	f7ff fbac 	bl	8000758 <tone>
  HAL_Delay(679);
 8001000:	f240 20a7 	movw	r0, #679	; 0x2a7
 8001004:	f001 fa8c 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001008:	2024      	movs	r0, #36	; 0x24
 800100a:	f001 fa89 	bl	8002520 <HAL_Delay>
  tone(1046, 57);
 800100e:	2139      	movs	r1, #57	; 0x39
 8001010:	f240 4016 	movw	r0, #1046	; 0x416
 8001014:	f7ff fba0 	bl	8000758 <tone>
  HAL_Delay(63);
 8001018:	203f      	movs	r0, #63	; 0x3f
 800101a:	f001 fa81 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 800101e:	2012      	movs	r0, #18
 8001020:	f001 fa7e 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 8001024:	2149      	movs	r1, #73	; 0x49
 8001026:	f240 4016 	movw	r0, #1046	; 0x416
 800102a:	f7ff fb95 	bl	8000758 <tone>
  HAL_Delay(81);
 800102e:	2051      	movs	r0, #81	; 0x51
 8001030:	f001 fa76 	bl	8002520 <HAL_Delay>
  HAL_Delay(697);
 8001034:	f240 20b9 	movw	r0, #697	; 0x2b9
 8001038:	f001 fa72 	bl	8002520 <HAL_Delay>
  HAL_Delay(289);
 800103c:	f240 1021 	movw	r0, #289	; 0x121
 8001040:	f001 fa6e 	bl	8002520 <HAL_Delay>
  tone(1396, 187);
 8001044:	21bb      	movs	r1, #187	; 0xbb
 8001046:	f240 5074 	movw	r0, #1396	; 0x574
 800104a:	f7ff fb85 	bl	8000758 <tone>
  HAL_Delay(208);
 800104e:	20d0      	movs	r0, #208	; 0xd0
 8001050:	f001 fa66 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001054:	201b      	movs	r0, #27
 8001056:	f001 fa63 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 800105a:	2048      	movs	r0, #72	; 0x48
 800105c:	f001 fa60 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8001060:	2110      	movs	r1, #16
 8001062:	f240 5074 	movw	r0, #1396	; 0x574
 8001066:	f7ff fb77 	bl	8000758 <tone>
  HAL_Delay(18);
 800106a:	2012      	movs	r0, #18
 800106c:	f001 fa58 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8001070:	202d      	movs	r0, #45	; 0x2d
 8001072:	f001 fa55 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 8001076:	2128      	movs	r1, #40	; 0x28
 8001078:	f640 002d 	movw	r0, #2093	; 0x82d
 800107c:	f7ff fb6c 	bl	8000758 <tone>
  HAL_Delay(45);
 8001080:	202d      	movs	r0, #45	; 0x2d
 8001082:	f001 fa4d 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8001086:	2110      	movs	r1, #16
 8001088:	f240 5074 	movw	r0, #1396	; 0x574
 800108c:	f7ff fb64 	bl	8000758 <tone>
  HAL_Delay(18);
 8001090:	2012      	movs	r0, #18
 8001092:	f001 fa45 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001096:	2012      	movs	r0, #18
 8001098:	f001 fa42 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 800109c:	2024      	movs	r0, #36	; 0x24
 800109e:	f001 fa3f 	bl	8002520 <HAL_Delay>
  tone(1396, 65);
 80010a2:	2141      	movs	r1, #65	; 0x41
 80010a4:	f240 5074 	movw	r0, #1396	; 0x574
 80010a8:	f7ff fb56 	bl	8000758 <tone>
  HAL_Delay(72);
 80010ac:	2048      	movs	r0, #72	; 0x48
 80010ae:	f001 fa37 	bl	8002520 <HAL_Delay>
  tone(2093, 8);
 80010b2:	2108      	movs	r1, #8
 80010b4:	f640 002d 	movw	r0, #2093	; 0x82d
 80010b8:	f7ff fb4e 	bl	8000758 <tone>
  HAL_Delay(9);
 80010bc:	2009      	movs	r0, #9
 80010be:	f001 fa2f 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 80010c2:	202d      	movs	r0, #45	; 0x2d
 80010c4:	f001 fa2c 	bl	8002520 <HAL_Delay>
  tone(1396, 40);
 80010c8:	2128      	movs	r1, #40	; 0x28
 80010ca:	f240 5074 	movw	r0, #1396	; 0x574
 80010ce:	f7ff fb43 	bl	8000758 <tone>
  HAL_Delay(45);
 80010d2:	202d      	movs	r0, #45	; 0x2d
 80010d4:	f001 fa24 	bl	8002520 <HAL_Delay>
  HAL_Delay(81);
 80010d8:	2051      	movs	r0, #81	; 0x51
 80010da:	f001 fa21 	bl	8002520 <HAL_Delay>
  tone(2093, 32);
 80010de:	2120      	movs	r1, #32
 80010e0:	f640 002d 	movw	r0, #2093	; 0x82d
 80010e4:	f7ff fb38 	bl	8000758 <tone>
  HAL_Delay(36);
 80010e8:	2024      	movs	r0, #36	; 0x24
 80010ea:	f001 fa19 	bl	8002520 <HAL_Delay>
  tone(1661, 301);
 80010ee:	f240 112d 	movw	r1, #301	; 0x12d
 80010f2:	f240 607d 	movw	r0, #1661	; 0x67d
 80010f6:	f7ff fb2f 	bl	8000758 <tone>
  HAL_Delay(335);
 80010fa:	f240 104f 	movw	r0, #335	; 0x14f
 80010fe:	f001 fa0f 	bl	8002520 <HAL_Delay>
  HAL_Delay(90);
 8001102:	205a      	movs	r0, #90	; 0x5a
 8001104:	f001 fa0c 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 8001108:	2120      	movs	r1, #32
 800110a:	f240 607d 	movw	r0, #1661	; 0x67d
 800110e:	f7ff fb23 	bl	8000758 <tone>
  HAL_Delay(36);
 8001112:	2024      	movs	r0, #36	; 0x24
 8001114:	f001 fa04 	bl	8002520 <HAL_Delay>
  tone(1864, 1035);
 8001118:	f240 410b 	movw	r1, #1035	; 0x40b
 800111c:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8001120:	f7ff fb1a 	bl	8000758 <tone>
  HAL_Delay(1150);
 8001124:	f240 407e 	movw	r0, #1150	; 0x47e
 8001128:	f001 f9fa 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 800112c:	2012      	movs	r0, #18
 800112e:	f001 f9f7 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8001132:	2048      	movs	r0, #72	; 0x48
 8001134:	f001 f9f4 	bl	8002520 <HAL_Delay>
  tone(1864, 8);
 8001138:	2108      	movs	r1, #8
 800113a:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800113e:	f7ff fb0b 	bl	8000758 <tone>
  HAL_Delay(9);
 8001142:	2009      	movs	r0, #9
 8001144:	f001 f9ec 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001148:	2012      	movs	r0, #18
 800114a:	f001 f9e9 	bl	8002520 <HAL_Delay>
  tone(1864, 48);
 800114e:	2130      	movs	r1, #48	; 0x30
 8001150:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8001154:	f7ff fb00 	bl	8000758 <tone>
  HAL_Delay(54);
 8001158:	2036      	movs	r0, #54	; 0x36
 800115a:	f001 f9e1 	bl	8002520 <HAL_Delay>
  HAL_Delay(217);
 800115e:	20d9      	movs	r0, #217	; 0xd9
 8001160:	f001 f9de 	bl	8002520 <HAL_Delay>
  tone(1396, 187);
 8001164:	21bb      	movs	r1, #187	; 0xbb
 8001166:	f240 5074 	movw	r0, #1396	; 0x574
 800116a:	f7ff faf5 	bl	8000758 <tone>
  HAL_Delay(208);
 800116e:	20d0      	movs	r0, #208	; 0xd0
 8001170:	f001 f9d6 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001174:	2009      	movs	r0, #9
 8001176:	f001 f9d3 	bl	8002520 <HAL_Delay>
  HAL_Delay(90);
 800117a:	205a      	movs	r0, #90	; 0x5a
 800117c:	f001 f9d0 	bl	8002520 <HAL_Delay>
  tone(1567, 220);
 8001180:	21dc      	movs	r1, #220	; 0xdc
 8001182:	f240 601f 	movw	r0, #1567	; 0x61f
 8001186:	f7ff fae7 	bl	8000758 <tone>
  HAL_Delay(244);
 800118a:	20f4      	movs	r0, #244	; 0xf4
 800118c:	f001 f9c8 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001190:	2012      	movs	r0, #18
 8001192:	f001 f9c5 	bl	8002520 <HAL_Delay>
  tone(1396, 40);
 8001196:	2128      	movs	r1, #40	; 0x28
 8001198:	f240 5074 	movw	r0, #1396	; 0x574
 800119c:	f7ff fadc 	bl	8000758 <tone>
  HAL_Delay(45);
 80011a0:	202d      	movs	r0, #45	; 0x2d
 80011a2:	f001 f9bd 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 80011a6:	202d      	movs	r0, #45	; 0x2d
 80011a8:	f001 f9ba 	bl	8002520 <HAL_Delay>
  tone(1396, 48);
 80011ac:	2130      	movs	r1, #48	; 0x30
 80011ae:	f240 5074 	movw	r0, #1396	; 0x574
 80011b2:	f7ff fad1 	bl	8000758 <tone>
  HAL_Delay(54);
 80011b6:	2036      	movs	r0, #54	; 0x36
 80011b8:	f001 f9b2 	bl	8002520 <HAL_Delay>
  tone(1567, 32);
 80011bc:	2120      	movs	r1, #32
 80011be:	f240 601f 	movw	r0, #1567	; 0x61f
 80011c2:	f7ff fac9 	bl	8000758 <tone>
  HAL_Delay(36);
 80011c6:	2024      	movs	r0, #36	; 0x24
 80011c8:	f001 f9aa 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 80011cc:	2048      	movs	r0, #72	; 0x48
 80011ce:	f001 f9a7 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 80011d2:	2128      	movs	r1, #40	; 0x28
 80011d4:	f240 601f 	movw	r0, #1567	; 0x61f
 80011d8:	f7ff fabe 	bl	8000758 <tone>
  HAL_Delay(45);
 80011dc:	202d      	movs	r0, #45	; 0x2d
 80011de:	f001 f99f 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 80011e2:	2048      	movs	r0, #72	; 0x48
 80011e4:	f001 f99c 	bl	8002520 <HAL_Delay>
  tone(1567, 57);
 80011e8:	2139      	movs	r1, #57	; 0x39
 80011ea:	f240 601f 	movw	r0, #1567	; 0x61f
 80011ee:	f7ff fab3 	bl	8000758 <tone>
  HAL_Delay(63);
 80011f2:	203f      	movs	r0, #63	; 0x3f
 80011f4:	f001 f994 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 80011f8:	201b      	movs	r0, #27
 80011fa:	f001 f991 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 80011fe:	2128      	movs	r1, #40	; 0x28
 8001200:	f240 601f 	movw	r0, #1567	; 0x61f
 8001204:	f7ff faa8 	bl	8000758 <tone>
  HAL_Delay(45);
 8001208:	202d      	movs	r0, #45	; 0x2d
 800120a:	f001 f989 	bl	8002520 <HAL_Delay>
  HAL_Delay(1114);
 800120e:	f240 405a 	movw	r0, #1114	; 0x45a
 8001212:	f001 f985 	bl	8002520 <HAL_Delay>
  tone(1864, 277);
 8001216:	f240 1115 	movw	r1, #277	; 0x115
 800121a:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800121e:	f7ff fa9b 	bl	8000758 <tone>
  HAL_Delay(307);
 8001222:	f240 1033 	movw	r0, #307	; 0x133
 8001226:	f001 f97b 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 800122a:	201b      	movs	r0, #27
 800122c:	f001 f978 	bl	8002520 <HAL_Delay>
  HAL_Delay(262);
 8001230:	f44f 7083 	mov.w	r0, #262	; 0x106
 8001234:	f001 f974 	bl	8002520 <HAL_Delay>
  tone(1864, 16);
 8001238:	2110      	movs	r1, #16
 800123a:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800123e:	f7ff fa8b 	bl	8000758 <tone>
  HAL_Delay(18);
 8001242:	2012      	movs	r0, #18
 8001244:	f001 f96c 	bl	8002520 <HAL_Delay>
  HAL_Delay(81);
 8001248:	2051      	movs	r0, #81	; 0x51
 800124a:	f001 f969 	bl	8002520 <HAL_Delay>
  tone(1661, 57);
 800124e:	2139      	movs	r1, #57	; 0x39
 8001250:	f240 607d 	movw	r0, #1661	; 0x67d
 8001254:	f7ff fa80 	bl	8000758 <tone>
  HAL_Delay(63);
 8001258:	203f      	movs	r0, #63	; 0x3f
 800125a:	f001 f961 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 800125e:	202d      	movs	r0, #45	; 0x2d
 8001260:	f001 f95e 	bl	8002520 <HAL_Delay>
  tone(1864, 16);
 8001264:	2110      	movs	r1, #16
 8001266:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800126a:	f7ff fa75 	bl	8000758 <tone>
  HAL_Delay(18);
 800126e:	2012      	movs	r0, #18
 8001270:	f001 f956 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001274:	2012      	movs	r0, #18
 8001276:	f001 f953 	bl	8002520 <HAL_Delay>
  tone(1661, 24);
 800127a:	2118      	movs	r1, #24
 800127c:	f240 607d 	movw	r0, #1661	; 0x67d
 8001280:	f7ff fa6a 	bl	8000758 <tone>
  HAL_Delay(27);
 8001284:	201b      	movs	r0, #27
 8001286:	f001 f94b 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 800128a:	2012      	movs	r0, #18
 800128c:	f001 f948 	bl	8002520 <HAL_Delay>
  tone(1661, 81);
 8001290:	2151      	movs	r1, #81	; 0x51
 8001292:	f240 607d 	movw	r0, #1661	; 0x67d
 8001296:	f7ff fa5f 	bl	8000758 <tone>
  HAL_Delay(90);
 800129a:	205a      	movs	r0, #90	; 0x5a
 800129c:	f001 f940 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80012a0:	2012      	movs	r0, #18
 80012a2:	f001 f93d 	bl	8002520 <HAL_Delay>
  tone(1661, 154);
 80012a6:	219a      	movs	r1, #154	; 0x9a
 80012a8:	f240 607d 	movw	r0, #1661	; 0x67d
 80012ac:	f7ff fa54 	bl	8000758 <tone>
  HAL_Delay(172);
 80012b0:	20ac      	movs	r0, #172	; 0xac
 80012b2:	f001 f935 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 80012b6:	202d      	movs	r0, #45	; 0x2d
 80012b8:	f001 f932 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 80012bc:	2120      	movs	r1, #32
 80012be:	f240 607d 	movw	r0, #1661	; 0x67d
 80012c2:	f7ff fa49 	bl	8000758 <tone>
  HAL_Delay(36);
 80012c6:	2024      	movs	r0, #36	; 0x24
 80012c8:	f001 f92a 	bl	8002520 <HAL_Delay>
  HAL_Delay(570);
 80012cc:	f240 203a 	movw	r0, #570	; 0x23a
 80012d0:	f001 f926 	bl	8002520 <HAL_Delay>
  tone(1661, 16);
 80012d4:	2110      	movs	r1, #16
 80012d6:	f240 607d 	movw	r0, #1661	; 0x67d
 80012da:	f7ff fa3d 	bl	8000758 <tone>
  HAL_Delay(18);
 80012de:	2012      	movs	r0, #18
 80012e0:	f001 f91e 	bl	8002520 <HAL_Delay>
  tone(1567, 293);
 80012e4:	f240 1125 	movw	r1, #293	; 0x125
 80012e8:	f240 601f 	movw	r0, #1567	; 0x61f
 80012ec:	f7ff fa34 	bl	8000758 <tone>
  HAL_Delay(326);
 80012f0:	f44f 70a3 	mov.w	r0, #326	; 0x146
 80012f4:	f001 f914 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80012f8:	2009      	movs	r0, #9
 80012fa:	f001 f911 	bl	8002520 <HAL_Delay>
  HAL_Delay(153);
 80012fe:	2099      	movs	r0, #153	; 0x99
 8001300:	f001 f90e 	bl	8002520 <HAL_Delay>
  tone(1567, 114);
 8001304:	2172      	movs	r1, #114	; 0x72
 8001306:	f240 601f 	movw	r0, #1567	; 0x61f
 800130a:	f7ff fa25 	bl	8000758 <tone>
  HAL_Delay(126);
 800130e:	207e      	movs	r0, #126	; 0x7e
 8001310:	f001 f906 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001314:	2012      	movs	r0, #18
 8001316:	f001 f903 	bl	8002520 <HAL_Delay>
  tone(1567, 89);
 800131a:	2159      	movs	r1, #89	; 0x59
 800131c:	f240 601f 	movw	r0, #1567	; 0x61f
 8001320:	f7ff fa1a 	bl	8000758 <tone>
  HAL_Delay(99);
 8001324:	2063      	movs	r0, #99	; 0x63
 8001326:	f001 f8fb 	bl	8002520 <HAL_Delay>
  HAL_Delay(153);
 800132a:	2099      	movs	r0, #153	; 0x99
 800132c:	f001 f8f8 	bl	8002520 <HAL_Delay>
  tone(1046, 24);
 8001330:	2118      	movs	r1, #24
 8001332:	f240 4016 	movw	r0, #1046	; 0x416
 8001336:	f7ff fa0f 	bl	8000758 <tone>
  HAL_Delay(27);
 800133a:	201b      	movs	r0, #27
 800133c:	f001 f8f0 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001340:	2009      	movs	r0, #9
 8001342:	f001 f8ed 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 8001346:	2149      	movs	r1, #73	; 0x49
 8001348:	f240 4016 	movw	r0, #1046	; 0x416
 800134c:	f7ff fa04 	bl	8000758 <tone>
  HAL_Delay(81);
 8001350:	2051      	movs	r0, #81	; 0x51
 8001352:	f001 f8e5 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001356:	2009      	movs	r0, #9
 8001358:	f001 f8e2 	bl	8002520 <HAL_Delay>
  HAL_Delay(99);
 800135c:	2063      	movs	r0, #99	; 0x63
 800135e:	f001 f8df 	bl	8002520 <HAL_Delay>
  tone(1046, 611);
 8001362:	f240 2163 	movw	r1, #611	; 0x263
 8001366:	f240 4016 	movw	r0, #1046	; 0x416
 800136a:	f7ff f9f5 	bl	8000758 <tone>
  HAL_Delay(679);
 800136e:	f240 20a7 	movw	r0, #679	; 0x2a7
 8001372:	f001 f8d5 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001376:	2024      	movs	r0, #36	; 0x24
 8001378:	f001 f8d2 	bl	8002520 <HAL_Delay>
  tone(1046, 65);
 800137c:	2141      	movs	r1, #65	; 0x41
 800137e:	f240 4016 	movw	r0, #1046	; 0x416
 8001382:	f7ff f9e9 	bl	8000758 <tone>
  HAL_Delay(72);
 8001386:	2048      	movs	r0, #72	; 0x48
 8001388:	f001 f8ca 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 800138c:	2012      	movs	r0, #18
 800138e:	f001 f8c7 	bl	8002520 <HAL_Delay>
  tone(1046, 65);
 8001392:	2141      	movs	r1, #65	; 0x41
 8001394:	f240 4016 	movw	r0, #1046	; 0x416
 8001398:	f7ff f9de 	bl	8000758 <tone>
  HAL_Delay(72);
 800139c:	2048      	movs	r0, #72	; 0x48
 800139e:	f001 f8bf 	bl	8002520 <HAL_Delay>
  HAL_Delay(697);
 80013a2:	f240 20b9 	movw	r0, #697	; 0x2b9
 80013a6:	f001 f8bb 	bl	8002520 <HAL_Delay>
  HAL_Delay(289);
 80013aa:	f240 1021 	movw	r0, #289	; 0x121
 80013ae:	f001 f8b7 	bl	8002520 <HAL_Delay>
  tone(1396, 179);
 80013b2:	21b3      	movs	r1, #179	; 0xb3
 80013b4:	f240 5074 	movw	r0, #1396	; 0x574
 80013b8:	f7ff f9ce 	bl	8000758 <tone>
  HAL_Delay(199);
 80013bc:	20c7      	movs	r0, #199	; 0xc7
 80013be:	f001 f8af 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80013c2:	2024      	movs	r0, #36	; 0x24
 80013c4:	f001 f8ac 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 80013c8:	2048      	movs	r0, #72	; 0x48
 80013ca:	f001 f8a9 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 80013ce:	2118      	movs	r1, #24
 80013d0:	f240 5074 	movw	r0, #1396	; 0x574
 80013d4:	f7ff f9c0 	bl	8000758 <tone>
  HAL_Delay(27);
 80013d8:	201b      	movs	r0, #27
 80013da:	f001 f8a1 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80013de:	2024      	movs	r0, #36	; 0x24
 80013e0:	f001 f89e 	bl	8002520 <HAL_Delay>
  tone(2093, 48);
 80013e4:	2130      	movs	r1, #48	; 0x30
 80013e6:	f640 002d 	movw	r0, #2093	; 0x82d
 80013ea:	f7ff f9b5 	bl	8000758 <tone>
  HAL_Delay(54);
 80013ee:	2036      	movs	r0, #54	; 0x36
 80013f0:	f001 f896 	bl	8002520 <HAL_Delay>
  tone(1396, 8);
 80013f4:	2108      	movs	r1, #8
 80013f6:	f240 5074 	movw	r0, #1396	; 0x574
 80013fa:	f7ff f9ad 	bl	8000758 <tone>
  HAL_Delay(9);
 80013fe:	2009      	movs	r0, #9
 8001400:	f001 f88e 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001404:	2012      	movs	r0, #18
 8001406:	f001 f88b 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 800140a:	201b      	movs	r0, #27
 800140c:	f001 f888 	bl	8002520 <HAL_Delay>
  tone(1396, 73);
 8001410:	2149      	movs	r1, #73	; 0x49
 8001412:	f240 5074 	movw	r0, #1396	; 0x574
 8001416:	f7ff f99f 	bl	8000758 <tone>
  HAL_Delay(81);
 800141a:	2051      	movs	r0, #81	; 0x51
 800141c:	f001 f880 	bl	8002520 <HAL_Delay>
  tone(2093, 8);
 8001420:	2108      	movs	r1, #8
 8001422:	f640 002d 	movw	r0, #2093	; 0x82d
 8001426:	f7ff f997 	bl	8000758 <tone>
  HAL_Delay(9);
 800142a:	2009      	movs	r0, #9
 800142c:	f001 f878 	bl	8002520 <HAL_Delay>
  HAL_Delay(54);
 8001430:	2036      	movs	r0, #54	; 0x36
 8001432:	f001 f875 	bl	8002520 <HAL_Delay>
  tone(1396, 32);
 8001436:	2120      	movs	r1, #32
 8001438:	f240 5074 	movw	r0, #1396	; 0x574
 800143c:	f7ff f98c 	bl	8000758 <tone>
  HAL_Delay(36);
 8001440:	2024      	movs	r0, #36	; 0x24
 8001442:	f001 f86d 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8001446:	2048      	movs	r0, #72	; 0x48
 8001448:	f001 f86a 	bl	8002520 <HAL_Delay>
  tone(2093, 32);
 800144c:	2120      	movs	r1, #32
 800144e:	f640 002d 	movw	r0, #2093	; 0x82d
 8001452:	f7ff f981 	bl	8000758 <tone>
  HAL_Delay(36);
 8001456:	2024      	movs	r0, #36	; 0x24
 8001458:	f001 f862 	bl	8002520 <HAL_Delay>
  tone(1661, 301);
 800145c:	f240 112d 	movw	r1, #301	; 0x12d
 8001460:	f240 607d 	movw	r0, #1661	; 0x67d
 8001464:	f7ff f978 	bl	8000758 <tone>
  HAL_Delay(335);
 8001468:	f240 104f 	movw	r0, #335	; 0x14f
 800146c:	f001 f858 	bl	8002520 <HAL_Delay>
  HAL_Delay(99);
 8001470:	2063      	movs	r0, #99	; 0x63
 8001472:	f001 f855 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 8001476:	2120      	movs	r1, #32
 8001478:	f240 607d 	movw	r0, #1661	; 0x67d
 800147c:	f7ff f96c 	bl	8000758 <tone>
  HAL_Delay(36);
 8001480:	2024      	movs	r0, #36	; 0x24
 8001482:	f001 f84d 	bl	8002520 <HAL_Delay>
  HAL_Delay(1231);
 8001486:	f240 40cf 	movw	r0, #1231	; 0x4cf
 800148a:	f001 f849 	bl	8002520 <HAL_Delay>
  tone(1864, 16);
 800148e:	2110      	movs	r1, #16
 8001490:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8001494:	f7ff f960 	bl	8000758 <tone>
  HAL_Delay(18);
 8001498:	2012      	movs	r0, #18
 800149a:	f001 f841 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 800149e:	2012      	movs	r0, #18
 80014a0:	f001 f83e 	bl	8002520 <HAL_Delay>
  tone(1864, 48);
 80014a4:	2130      	movs	r1, #48	; 0x30
 80014a6:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 80014aa:	f7ff f955 	bl	8000758 <tone>
  HAL_Delay(54);
 80014ae:	2036      	movs	r0, #54	; 0x36
 80014b0:	f001 f836 	bl	8002520 <HAL_Delay>
  HAL_Delay(217);
 80014b4:	20d9      	movs	r0, #217	; 0xd9
 80014b6:	f001 f833 	bl	8002520 <HAL_Delay>
  HAL_Delay(307);
 80014ba:	f240 1033 	movw	r0, #307	; 0x133
 80014be:	f001 f82f 	bl	8002520 <HAL_Delay>
  tone(1396, 57);
 80014c2:	2139      	movs	r1, #57	; 0x39
 80014c4:	f240 5074 	movw	r0, #1396	; 0x574
 80014c8:	f7ff f946 	bl	8000758 <tone>
  HAL_Delay(63);
 80014cc:	203f      	movs	r0, #63	; 0x3f
 80014ce:	f001 f827 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80014d2:	2012      	movs	r0, #18
 80014d4:	f001 f824 	bl	8002520 <HAL_Delay>
  tone(1396, 195);
 80014d8:	21c3      	movs	r1, #195	; 0xc3
 80014da:	f240 5074 	movw	r0, #1396	; 0x574
 80014de:	f7ff f93b 	bl	8000758 <tone>
  HAL_Delay(217);
 80014e2:	20d9      	movs	r0, #217	; 0xd9
 80014e4:	f001 f81c 	bl	8002520 <HAL_Delay>
  tone(1567, 8);
 80014e8:	2108      	movs	r1, #8
 80014ea:	f240 601f 	movw	r0, #1567	; 0x61f
 80014ee:	f7ff f933 	bl	8000758 <tone>
  HAL_Delay(9);
 80014f2:	2009      	movs	r0, #9
 80014f4:	f001 f814 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80014f8:	2009      	movs	r0, #9
 80014fa:	f001 f811 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80014fe:	2024      	movs	r0, #36	; 0x24
 8001500:	f001 f80e 	bl	8002520 <HAL_Delay>
  tone(1396, 48);
 8001504:	2130      	movs	r1, #48	; 0x30
 8001506:	f240 5074 	movw	r0, #1396	; 0x574
 800150a:	f7ff f925 	bl	8000758 <tone>
  HAL_Delay(54);
 800150e:	2036      	movs	r0, #54	; 0x36
 8001510:	f001 f806 	bl	8002520 <HAL_Delay>
  tone(1567, 81);
 8001514:	2151      	movs	r1, #81	; 0x51
 8001516:	f240 601f 	movw	r0, #1567	; 0x61f
 800151a:	f7ff f91d 	bl	8000758 <tone>
  HAL_Delay(90);
 800151e:	205a      	movs	r0, #90	; 0x5a
 8001520:	f000 fffe 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001524:	201b      	movs	r0, #27
 8001526:	f000 fffb 	bl	8002520 <HAL_Delay>
  tone(1567, 32);
 800152a:	2120      	movs	r1, #32
 800152c:	f240 601f 	movw	r0, #1567	; 0x61f
 8001530:	f7ff f912 	bl	8000758 <tone>
  HAL_Delay(36);
 8001534:	2024      	movs	r0, #36	; 0x24
 8001536:	f000 fff3 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 800153a:	2012      	movs	r0, #18
 800153c:	f000 fff0 	bl	8002520 <HAL_Delay>
  tone(1567, 24);
 8001540:	2118      	movs	r1, #24
 8001542:	f240 601f 	movw	r0, #1567	; 0x61f
 8001546:	f7ff f907 	bl	8000758 <tone>
  HAL_Delay(27);
 800154a:	201b      	movs	r0, #27
 800154c:	f000 ffe8 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8001550:	202d      	movs	r0, #45	; 0x2d
 8001552:	f000 ffe5 	bl	8002520 <HAL_Delay>
  tone(1567, 32);
 8001556:	2120      	movs	r1, #32
 8001558:	f240 601f 	movw	r0, #1567	; 0x61f
 800155c:	f7ff f8fc 	bl	8000758 <tone>
  HAL_Delay(36);
 8001560:	2024      	movs	r0, #36	; 0x24
 8001562:	f000 ffdd 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001566:	2009      	movs	r0, #9
 8001568:	f000 ffda 	bl	8002520 <HAL_Delay>
  tone(1567, 65);
 800156c:	2141      	movs	r1, #65	; 0x41
 800156e:	f240 601f 	movw	r0, #1567	; 0x61f
 8001572:	f7ff f8f1 	bl	8000758 <tone>
  HAL_Delay(72);
 8001576:	2048      	movs	r0, #72	; 0x48
 8001578:	f000 ffd2 	bl	8002520 <HAL_Delay>
  HAL_Delay(434);
 800157c:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
 8001580:	f000 ffce 	bl	8002520 <HAL_Delay>
  tone(1661, 122);
 8001584:	217a      	movs	r1, #122	; 0x7a
 8001586:	f240 607d 	movw	r0, #1661	; 0x67d
 800158a:	f7ff f8e5 	bl	8000758 <tone>
  HAL_Delay(135);
 800158e:	2087      	movs	r0, #135	; 0x87
 8001590:	f000 ffc6 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001594:	2012      	movs	r0, #18
 8001596:	f000 ffc3 	bl	8002520 <HAL_Delay>
  tone(1661, 105);
 800159a:	2169      	movs	r1, #105	; 0x69
 800159c:	f240 607d 	movw	r0, #1661	; 0x67d
 80015a0:	f7ff f8da 	bl	8000758 <tone>
  HAL_Delay(117);
 80015a4:	2075      	movs	r0, #117	; 0x75
 80015a6:	f000 ffbb 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80015aa:	2024      	movs	r0, #36	; 0x24
 80015ac:	f000 ffb8 	bl	8002520 <HAL_Delay>
  tone(1661, 65);
 80015b0:	2141      	movs	r1, #65	; 0x41
 80015b2:	f240 607d 	movw	r0, #1661	; 0x67d
 80015b6:	f7ff f8cf 	bl	8000758 <tone>
  HAL_Delay(72);
 80015ba:	2048      	movs	r0, #72	; 0x48
 80015bc:	f000 ffb0 	bl	8002520 <HAL_Delay>
  HAL_Delay(99);
 80015c0:	2063      	movs	r0, #99	; 0x63
 80015c2:	f000 ffad 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 80015c6:	2120      	movs	r1, #32
 80015c8:	f240 607d 	movw	r0, #1661	; 0x67d
 80015cc:	f7ff f8c4 	bl	8000758 <tone>
  HAL_Delay(36);
 80015d0:	2024      	movs	r0, #36	; 0x24
 80015d2:	f000 ffa5 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80015d6:	2012      	movs	r0, #18
 80015d8:	f000 ffa2 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80015dc:	2012      	movs	r0, #18
 80015de:	f000 ff9f 	bl	8002520 <HAL_Delay>
  tone(1661, 8);
 80015e2:	2108      	movs	r1, #8
 80015e4:	f240 607d 	movw	r0, #1661	; 0x67d
 80015e8:	f7ff f8b6 	bl	8000758 <tone>
  HAL_Delay(9);
 80015ec:	2009      	movs	r0, #9
 80015ee:	f000 ff97 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80015f2:	2024      	movs	r0, #36	; 0x24
 80015f4:	f000 ff94 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 80015f8:	2128      	movs	r1, #40	; 0x28
 80015fa:	f240 607d 	movw	r0, #1661	; 0x67d
 80015fe:	f7ff f8ab 	bl	8000758 <tone>
  HAL_Delay(45);
 8001602:	202d      	movs	r0, #45	; 0x2d
 8001604:	f000 ff8c 	bl	8002520 <HAL_Delay>
  HAL_Delay(208);
 8001608:	20d0      	movs	r0, #208	; 0xd0
 800160a:	f000 ff89 	bl	8002520 <HAL_Delay>
  tone(1567, 48);
 800160e:	2130      	movs	r1, #48	; 0x30
 8001610:	f240 601f 	movw	r0, #1567	; 0x61f
 8001614:	f7ff f8a0 	bl	8000758 <tone>
  HAL_Delay(54);
 8001618:	2036      	movs	r0, #54	; 0x36
 800161a:	f000 ff81 	bl	8002520 <HAL_Delay>
  tone(1396, 8);
 800161e:	2108      	movs	r1, #8
 8001620:	f240 5074 	movw	r0, #1396	; 0x574
 8001624:	f7ff f898 	bl	8000758 <tone>
  HAL_Delay(9);
 8001628:	2009      	movs	r0, #9
 800162a:	f000 ff79 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 800162e:	2024      	movs	r0, #36	; 0x24
 8001630:	f000 ff76 	bl	8002520 <HAL_Delay>
  tone(1567, 65);
 8001634:	2141      	movs	r1, #65	; 0x41
 8001636:	f240 601f 	movw	r0, #1567	; 0x61f
 800163a:	f7ff f88d 	bl	8000758 <tone>
  HAL_Delay(72);
 800163e:	2048      	movs	r0, #72	; 0x48
 8001640:	f000 ff6e 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 8001644:	2118      	movs	r1, #24
 8001646:	f240 5074 	movw	r0, #1396	; 0x574
 800164a:	f7ff f885 	bl	8000758 <tone>
  HAL_Delay(27);
 800164e:	201b      	movs	r0, #27
 8001650:	f000 ff66 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001654:	2009      	movs	r0, #9
 8001656:	f000 ff63 	bl	8002520 <HAL_Delay>
  tone(1396, 40);
 800165a:	2128      	movs	r1, #40	; 0x28
 800165c:	f240 5074 	movw	r0, #1396	; 0x574
 8001660:	f7ff f87a 	bl	8000758 <tone>
  HAL_Delay(45);
 8001664:	202d      	movs	r0, #45	; 0x2d
 8001666:	f000 ff5b 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 800166a:	201b      	movs	r0, #27
 800166c:	f000 ff58 	bl	8002520 <HAL_Delay>
  tone(1244, 122);
 8001670:	217a      	movs	r1, #122	; 0x7a
 8001672:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001676:	f7ff f86f 	bl	8000758 <tone>
  HAL_Delay(135);
 800167a:	2087      	movs	r0, #135	; 0x87
 800167c:	f000 ff50 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001680:	2009      	movs	r0, #9
 8001682:	f000 ff4d 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001686:	201b      	movs	r0, #27
 8001688:	f000 ff4a 	bl	8002520 <HAL_Delay>
  tone(1479, 24);
 800168c:	2118      	movs	r1, #24
 800168e:	f240 50c7 	movw	r0, #1479	; 0x5c7
 8001692:	f7ff f861 	bl	8000758 <tone>
  HAL_Delay(27);
 8001696:	201b      	movs	r0, #27
 8001698:	f000 ff42 	bl	8002520 <HAL_Delay>
  tone(1244, 138);
 800169c:	218a      	movs	r1, #138	; 0x8a
 800169e:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80016a2:	f7ff f859 	bl	8000758 <tone>
  HAL_Delay(153);
 80016a6:	2099      	movs	r0, #153	; 0x99
 80016a8:	f000 ff3a 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80016ac:	2009      	movs	r0, #9
 80016ae:	f000 ff37 	bl	8002520 <HAL_Delay>
  tone(1244, 122);
 80016b2:	217a      	movs	r1, #122	; 0x7a
 80016b4:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80016b8:	f7ff f84e 	bl	8000758 <tone>
  HAL_Delay(135);
 80016bc:	2087      	movs	r0, #135	; 0x87
 80016be:	f000 ff2f 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 80016c2:	201b      	movs	r0, #27
 80016c4:	f000 ff2c 	bl	8002520 <HAL_Delay>
  tone(1244, 105);
 80016c8:	2169      	movs	r1, #105	; 0x69
 80016ca:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80016ce:	f7ff f843 	bl	8000758 <tone>
  HAL_Delay(117);
 80016d2:	2075      	movs	r0, #117	; 0x75
 80016d4:	f000 ff24 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 80016d8:	201b      	movs	r0, #27
 80016da:	f000 ff21 	bl	8002520 <HAL_Delay>
  tone(1244, 73);
 80016de:	2149      	movs	r1, #73	; 0x49
 80016e0:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80016e4:	f7ff f838 	bl	8000758 <tone>
  HAL_Delay(81);
 80016e8:	2051      	movs	r0, #81	; 0x51
 80016ea:	f000 ff19 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80016ee:	2024      	movs	r0, #36	; 0x24
 80016f0:	f000 ff16 	bl	8002520 <HAL_Delay>
  tone(1244, 24);
 80016f4:	2118      	movs	r1, #24
 80016f6:	f240 40dc 	movw	r0, #1244	; 0x4dc
 80016fa:	f7ff f82d 	bl	8000758 <tone>
  HAL_Delay(27);
 80016fe:	201b      	movs	r0, #27
 8001700:	f000 ff0e 	bl	8002520 <HAL_Delay>
  tone(1396, 847);
 8001704:	f240 314f 	movw	r1, #847	; 0x34f
 8001708:	f240 5074 	movw	r0, #1396	; 0x574
 800170c:	f7ff f824 	bl	8000758 <tone>
  HAL_Delay(942);
 8001710:	f240 30ae 	movw	r0, #942	; 0x3ae
 8001714:	f000 ff04 	bl	8002520 <HAL_Delay>
  HAL_Delay(1847);
 8001718:	f240 7037 	movw	r0, #1847	; 0x737
 800171c:	f000 ff00 	bl	8002520 <HAL_Delay>
  tone(1046, 383);
 8001720:	f240 117f 	movw	r1, #383	; 0x17f
 8001724:	f240 4016 	movw	r0, #1046	; 0x416
 8001728:	f7ff f816 	bl	8000758 <tone>
  HAL_Delay(425);
 800172c:	f240 10a9 	movw	r0, #425	; 0x1a9
 8001730:	f000 fef6 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001734:	2009      	movs	r0, #9
 8001736:	f000 fef3 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 800173a:	2149      	movs	r1, #73	; 0x49
 800173c:	f240 4016 	movw	r0, #1046	; 0x416
 8001740:	f7ff f80a 	bl	8000758 <tone>
  HAL_Delay(81);
 8001744:	2051      	movs	r0, #81	; 0x51
 8001746:	f000 feeb 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 800174a:	2009      	movs	r0, #9
 800174c:	f000 fee8 	bl	8002520 <HAL_Delay>
  HAL_Delay(99);
 8001750:	2063      	movs	r0, #99	; 0x63
 8001752:	f000 fee5 	bl	8002520 <HAL_Delay>
  tone(1046, 611);
 8001756:	f240 2163 	movw	r1, #611	; 0x263
 800175a:	f240 4016 	movw	r0, #1046	; 0x416
 800175e:	f7fe fffb 	bl	8000758 <tone>
  HAL_Delay(679);
 8001762:	f240 20a7 	movw	r0, #679	; 0x2a7
 8001766:	f000 fedb 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 800176a:	2024      	movs	r0, #36	; 0x24
 800176c:	f000 fed8 	bl	8002520 <HAL_Delay>
  tone(1046, 65);
 8001770:	2141      	movs	r1, #65	; 0x41
 8001772:	f240 4016 	movw	r0, #1046	; 0x416
 8001776:	f7fe ffef 	bl	8000758 <tone>
  HAL_Delay(72);
 800177a:	2048      	movs	r0, #72	; 0x48
 800177c:	f000 fed0 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001780:	2009      	movs	r0, #9
 8001782:	f000 fecd 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 8001786:	2149      	movs	r1, #73	; 0x49
 8001788:	f240 4016 	movw	r0, #1046	; 0x416
 800178c:	f7fe ffe4 	bl	8000758 <tone>
  HAL_Delay(81);
 8001790:	2051      	movs	r0, #81	; 0x51
 8001792:	f000 fec5 	bl	8002520 <HAL_Delay>
  HAL_Delay(697);
 8001796:	f240 20b9 	movw	r0, #697	; 0x2b9
 800179a:	f000 fec1 	bl	8002520 <HAL_Delay>
  HAL_Delay(298);
 800179e:	f44f 7095 	mov.w	r0, #298	; 0x12a
 80017a2:	f000 febd 	bl	8002520 <HAL_Delay>
  tone(1396, 179);
 80017a6:	21b3      	movs	r1, #179	; 0xb3
 80017a8:	f240 5074 	movw	r0, #1396	; 0x574
 80017ac:	f7fe ffd4 	bl	8000758 <tone>
  HAL_Delay(199);
 80017b0:	20c7      	movs	r0, #199	; 0xc7
 80017b2:	f000 feb5 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 80017b6:	201b      	movs	r0, #27
 80017b8:	f000 feb2 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 80017bc:	2048      	movs	r0, #72	; 0x48
 80017be:	f000 feaf 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 80017c2:	2118      	movs	r1, #24
 80017c4:	f240 5074 	movw	r0, #1396	; 0x574
 80017c8:	f7fe ffc6 	bl	8000758 <tone>
  HAL_Delay(27);
 80017cc:	201b      	movs	r0, #27
 80017ce:	f000 fea7 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80017d2:	2024      	movs	r0, #36	; 0x24
 80017d4:	f000 fea4 	bl	8002520 <HAL_Delay>
  tone(2093, 48);
 80017d8:	2130      	movs	r1, #48	; 0x30
 80017da:	f640 002d 	movw	r0, #2093	; 0x82d
 80017de:	f7fe ffbb 	bl	8000758 <tone>
  HAL_Delay(54);
 80017e2:	2036      	movs	r0, #54	; 0x36
 80017e4:	f000 fe9c 	bl	8002520 <HAL_Delay>
  tone(1396, 8);
 80017e8:	2108      	movs	r1, #8
 80017ea:	f240 5074 	movw	r0, #1396	; 0x574
 80017ee:	f7fe ffb3 	bl	8000758 <tone>
  HAL_Delay(9);
 80017f2:	2009      	movs	r0, #9
 80017f4:	f000 fe94 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80017f8:	2012      	movs	r0, #18
 80017fa:	f000 fe91 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 80017fe:	201b      	movs	r0, #27
 8001800:	f000 fe8e 	bl	8002520 <HAL_Delay>
  tone(1396, 73);
 8001804:	2149      	movs	r1, #73	; 0x49
 8001806:	f240 5074 	movw	r0, #1396	; 0x574
 800180a:	f7fe ffa5 	bl	8000758 <tone>
  HAL_Delay(81);
 800180e:	2051      	movs	r0, #81	; 0x51
 8001810:	f000 fe86 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 8001814:	2128      	movs	r1, #40	; 0x28
 8001816:	f640 002d 	movw	r0, #2093	; 0x82d
 800181a:	f7fe ff9d 	bl	8000758 <tone>
  HAL_Delay(45);
 800181e:	202d      	movs	r0, #45	; 0x2d
 8001820:	f000 fe7e 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001824:	2009      	movs	r0, #9
 8001826:	f000 fe7b 	bl	8002520 <HAL_Delay>
  tone(1396, 40);
 800182a:	2128      	movs	r1, #40	; 0x28
 800182c:	f240 5074 	movw	r0, #1396	; 0x574
 8001830:	f7fe ff92 	bl	8000758 <tone>
  HAL_Delay(45);
 8001834:	202d      	movs	r0, #45	; 0x2d
 8001836:	f000 fe73 	bl	8002520 <HAL_Delay>
  HAL_Delay(63);
 800183a:	203f      	movs	r0, #63	; 0x3f
 800183c:	f000 fe70 	bl	8002520 <HAL_Delay>
  tone(2093, 48);
 8001840:	2130      	movs	r1, #48	; 0x30
 8001842:	f640 002d 	movw	r0, #2093	; 0x82d
 8001846:	f7fe ff87 	bl	8000758 <tone>
  HAL_Delay(54);
 800184a:	2036      	movs	r0, #54	; 0x36
 800184c:	f000 fe68 	bl	8002520 <HAL_Delay>
  tone(1661, 285);
 8001850:	f240 111d 	movw	r1, #285	; 0x11d
 8001854:	f240 607d 	movw	r0, #1661	; 0x67d
 8001858:	f7fe ff7e 	bl	8000758 <tone>
  HAL_Delay(317);
 800185c:	f240 103d 	movw	r0, #317	; 0x13d
 8001860:	f000 fe5e 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8001864:	202d      	movs	r0, #45	; 0x2d
 8001866:	f000 fe5b 	bl	8002520 <HAL_Delay>
  tone(1760, 24);
 800186a:	2118      	movs	r1, #24
 800186c:	f44f 60dc 	mov.w	r0, #1760	; 0x6e0
 8001870:	f7fe ff72 	bl	8000758 <tone>
  HAL_Delay(27);
 8001874:	201b      	movs	r0, #27
 8001876:	f000 fe53 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 800187a:	2012      	movs	r0, #18
 800187c:	f000 fe50 	bl	8002520 <HAL_Delay>
  tone(1661, 48);
 8001880:	2130      	movs	r1, #48	; 0x30
 8001882:	f240 607d 	movw	r0, #1661	; 0x67d
 8001886:	f7fe ff67 	bl	8000758 <tone>
  HAL_Delay(54);
 800188a:	2036      	movs	r0, #54	; 0x36
 800188c:	f000 fe48 	bl	8002520 <HAL_Delay>
  HAL_Delay(1240);
 8001890:	f44f 609b 	mov.w	r0, #1240	; 0x4d8
 8001894:	f000 fe44 	bl	8002520 <HAL_Delay>
  tone(1864, 8);
 8001898:	2108      	movs	r1, #8
 800189a:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800189e:	f7fe ff5b 	bl	8000758 <tone>
  HAL_Delay(9);
 80018a2:	2009      	movs	r0, #9
 80018a4:	f000 fe3c 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80018a8:	2012      	movs	r0, #18
 80018aa:	f000 fe39 	bl	8002520 <HAL_Delay>
  tone(1864, 48);
 80018ae:	2130      	movs	r1, #48	; 0x30
 80018b0:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 80018b4:	f7fe ff50 	bl	8000758 <tone>
  HAL_Delay(54);
 80018b8:	2036      	movs	r0, #54	; 0x36
 80018ba:	f000 fe31 	bl	8002520 <HAL_Delay>
  HAL_Delay(54);
 80018be:	2036      	movs	r0, #54	; 0x36
 80018c0:	f000 fe2e 	bl	8002520 <HAL_Delay>
  tone(1864, 24);
 80018c4:	2118      	movs	r1, #24
 80018c6:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 80018ca:	f7fe ff45 	bl	8000758 <tone>
  HAL_Delay(27);
 80018ce:	201b      	movs	r0, #27
 80018d0:	f000 fe26 	bl	8002520 <HAL_Delay>
  HAL_Delay(135);
 80018d4:	2087      	movs	r0, #135	; 0x87
 80018d6:	f000 fe23 	bl	8002520 <HAL_Delay>
  tone(1396, 122);
 80018da:	217a      	movs	r1, #122	; 0x7a
 80018dc:	f240 5074 	movw	r0, #1396	; 0x574
 80018e0:	f7fe ff3a 	bl	8000758 <tone>
  HAL_Delay(135);
 80018e4:	2087      	movs	r0, #135	; 0x87
 80018e6:	f000 fe1b 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80018ea:	2009      	movs	r0, #9
 80018ec:	f000 fe18 	bl	8002520 <HAL_Delay>
  HAL_Delay(163);
 80018f0:	20a3      	movs	r0, #163	; 0xa3
 80018f2:	f000 fe15 	bl	8002520 <HAL_Delay>
  tone(1567, 16);
 80018f6:	2110      	movs	r1, #16
 80018f8:	f240 601f 	movw	r0, #1567	; 0x61f
 80018fc:	f7fe ff2c 	bl	8000758 <tone>
  HAL_Delay(18);
 8001900:	2012      	movs	r0, #18
 8001902:	f000 fe0d 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001906:	2009      	movs	r0, #9
 8001908:	f000 fe0a 	bl	8002520 <HAL_Delay>
  tone(1396, 244);
 800190c:	21f4      	movs	r1, #244	; 0xf4
 800190e:	f240 5074 	movw	r0, #1396	; 0x574
 8001912:	f7fe ff21 	bl	8000758 <tone>
  HAL_Delay(271);
 8001916:	f240 100f 	movw	r0, #271	; 0x10f
 800191a:	f000 fe01 	bl	8002520 <HAL_Delay>
  HAL_Delay(54);
 800191e:	2036      	movs	r0, #54	; 0x36
 8001920:	f000 fdfe 	bl	8002520 <HAL_Delay>
  tone(1396, 57);
 8001924:	2139      	movs	r1, #57	; 0x39
 8001926:	f240 5074 	movw	r0, #1396	; 0x574
 800192a:	f7fe ff15 	bl	8000758 <tone>
  HAL_Delay(63);
 800192e:	203f      	movs	r0, #63	; 0x3f
 8001930:	f000 fdf6 	bl	8002520 <HAL_Delay>
  tone(1567, 171);
 8001934:	21ab      	movs	r1, #171	; 0xab
 8001936:	f240 601f 	movw	r0, #1567	; 0x61f
 800193a:	f7fe ff0d 	bl	8000758 <tone>
  HAL_Delay(190);
 800193e:	20be      	movs	r0, #190	; 0xbe
 8001940:	f000 fdee 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001944:	201b      	movs	r0, #27
 8001946:	f000 fdeb 	bl	8002520 <HAL_Delay>
  tone(1567, 57);
 800194a:	2139      	movs	r1, #57	; 0x39
 800194c:	f240 601f 	movw	r0, #1567	; 0x61f
 8001950:	f7fe ff02 	bl	8000758 <tone>
  HAL_Delay(63);
 8001954:	203f      	movs	r0, #63	; 0x3f
 8001956:	f000 fde3 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 800195a:	201b      	movs	r0, #27
 800195c:	f000 fde0 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 8001960:	2128      	movs	r1, #40	; 0x28
 8001962:	f240 601f 	movw	r0, #1567	; 0x61f
 8001966:	f7fe fef7 	bl	8000758 <tone>
  HAL_Delay(45);
 800196a:	202d      	movs	r0, #45	; 0x2d
 800196c:	f000 fdd8 	bl	8002520 <HAL_Delay>
  HAL_Delay(1105);
 8001970:	f240 4051 	movw	r0, #1105	; 0x451
 8001974:	f000 fdd4 	bl	8002520 <HAL_Delay>
  tone(1864, 285);
 8001978:	f240 111d 	movw	r1, #285	; 0x11d
 800197c:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8001980:	f7fe feea 	bl	8000758 <tone>
  HAL_Delay(317);
 8001984:	f240 103d 	movw	r0, #317	; 0x13d
 8001988:	f000 fdca 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 800198c:	201b      	movs	r0, #27
 800198e:	f000 fdc7 	bl	8002520 <HAL_Delay>
  HAL_Delay(262);
 8001992:	f44f 7083 	mov.w	r0, #262	; 0x106
 8001996:	f000 fdc3 	bl	8002520 <HAL_Delay>
  tone(1864, 40);
 800199a:	2128      	movs	r1, #40	; 0x28
 800199c:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 80019a0:	f7fe feda 	bl	8000758 <tone>
  HAL_Delay(45);
 80019a4:	202d      	movs	r0, #45	; 0x2d
 80019a6:	f000 fdbb 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80019aa:	2012      	movs	r0, #18
 80019ac:	f000 fdb8 	bl	8002520 <HAL_Delay>
  tone(1661, 81);
 80019b0:	2151      	movs	r1, #81	; 0x51
 80019b2:	f240 607d 	movw	r0, #1661	; 0x67d
 80019b6:	f7fe fecf 	bl	8000758 <tone>
  HAL_Delay(90);
 80019ba:	205a      	movs	r0, #90	; 0x5a
 80019bc:	f000 fdb0 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80019c0:	2012      	movs	r0, #18
 80019c2:	f000 fdad 	bl	8002520 <HAL_Delay>
  tone(1661, 24);
 80019c6:	2118      	movs	r1, #24
 80019c8:	f240 607d 	movw	r0, #1661	; 0x67d
 80019cc:	f7fe fec4 	bl	8000758 <tone>
  HAL_Delay(27);
 80019d0:	201b      	movs	r0, #27
 80019d2:	f000 fda5 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 80019d6:	2012      	movs	r0, #18
 80019d8:	f000 fda2 	bl	8002520 <HAL_Delay>
  tone(1864, 8);
 80019dc:	2108      	movs	r1, #8
 80019de:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 80019e2:	f7fe feb9 	bl	8000758 <tone>
  HAL_Delay(9);
 80019e6:	2009      	movs	r0, #9
 80019e8:	f000 fd9a 	bl	8002520 <HAL_Delay>
  tone(1661, 16);
 80019ec:	2110      	movs	r1, #16
 80019ee:	f240 607d 	movw	r0, #1661	; 0x67d
 80019f2:	f7fe feb1 	bl	8000758 <tone>
  HAL_Delay(18);
 80019f6:	2012      	movs	r0, #18
 80019f8:	f000 fd92 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80019fc:	2009      	movs	r0, #9
 80019fe:	f000 fd8f 	bl	8002520 <HAL_Delay>
  tone(1661, 163);
 8001a02:	21a3      	movs	r1, #163	; 0xa3
 8001a04:	f240 607d 	movw	r0, #1661	; 0x67d
 8001a08:	f7fe fea6 	bl	8000758 <tone>
  HAL_Delay(181);
 8001a0c:	20b5      	movs	r0, #181	; 0xb5
 8001a0e:	f000 fd87 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001a12:	2009      	movs	r0, #9
 8001a14:	f000 fd84 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 8001a18:	2120      	movs	r1, #32
 8001a1a:	f240 607d 	movw	r0, #1661	; 0x67d
 8001a1e:	f7fe fe9b 	bl	8000758 <tone>
  HAL_Delay(36);
 8001a22:	2024      	movs	r0, #36	; 0x24
 8001a24:	f000 fd7c 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001a28:	2012      	movs	r0, #18
 8001a2a:	f000 fd79 	bl	8002520 <HAL_Delay>
  tone(1661, 24);
 8001a2e:	2118      	movs	r1, #24
 8001a30:	f240 607d 	movw	r0, #1661	; 0x67d
 8001a34:	f7fe fe90 	bl	8000758 <tone>
  HAL_Delay(27);
 8001a38:	201b      	movs	r0, #27
 8001a3a:	f000 fd71 	bl	8002520 <HAL_Delay>
  HAL_Delay(90);
 8001a3e:	205a      	movs	r0, #90	; 0x5a
 8001a40:	f000 fd6e 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 8001a44:	2128      	movs	r1, #40	; 0x28
 8001a46:	f240 607d 	movw	r0, #1661	; 0x67d
 8001a4a:	f7fe fe85 	bl	8000758 <tone>
  HAL_Delay(45);
 8001a4e:	202d      	movs	r0, #45	; 0x2d
 8001a50:	f000 fd66 	bl	8002520 <HAL_Delay>
  HAL_Delay(81);
 8001a54:	2051      	movs	r0, #81	; 0x51
 8001a56:	f000 fd63 	bl	8002520 <HAL_Delay>
  tone(1661, 24);
 8001a5a:	2118      	movs	r1, #24
 8001a5c:	f240 607d 	movw	r0, #1661	; 0x67d
 8001a60:	f7fe fe7a 	bl	8000758 <tone>
  HAL_Delay(27);
 8001a64:	201b      	movs	r0, #27
 8001a66:	f000 fd5b 	bl	8002520 <HAL_Delay>
  tone(1567, 717);
 8001a6a:	f240 21cd 	movw	r1, #717	; 0x2cd
 8001a6e:	f240 601f 	movw	r0, #1567	; 0x61f
 8001a72:	f7fe fe71 	bl	8000758 <tone>
  HAL_Delay(797);
 8001a76:	f240 301d 	movw	r0, #797	; 0x31d
 8001a7a:	f000 fd51 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001a7e:	2009      	movs	r0, #9
 8001a80:	f000 fd4e 	bl	8002520 <HAL_Delay>
  HAL_Delay(153);
 8001a84:	2099      	movs	r0, #153	; 0x99
 8001a86:	f000 fd4b 	bl	8002520 <HAL_Delay>
  tone(1567, 114);
 8001a8a:	2172      	movs	r1, #114	; 0x72
 8001a8c:	f240 601f 	movw	r0, #1567	; 0x61f
 8001a90:	f7fe fe62 	bl	8000758 <tone>
  HAL_Delay(126);
 8001a94:	207e      	movs	r0, #126	; 0x7e
 8001a96:	f000 fd43 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001a9a:	2012      	movs	r0, #18
 8001a9c:	f000 fd40 	bl	8002520 <HAL_Delay>
  tone(1567, 89);
 8001aa0:	2159      	movs	r1, #89	; 0x59
 8001aa2:	f240 601f 	movw	r0, #1567	; 0x61f
 8001aa6:	f7fe fe57 	bl	8000758 <tone>
  HAL_Delay(99);
 8001aaa:	2063      	movs	r0, #99	; 0x63
 8001aac:	f000 fd38 	bl	8002520 <HAL_Delay>
  tone(1046, 163);
 8001ab0:	21a3      	movs	r1, #163	; 0xa3
 8001ab2:	f240 4016 	movw	r0, #1046	; 0x416
 8001ab6:	f7fe fe4f 	bl	8000758 <tone>
  HAL_Delay(181);
 8001aba:	20b5      	movs	r0, #181	; 0xb5
 8001abc:	f000 fd30 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001ac0:	2009      	movs	r0, #9
 8001ac2:	f000 fd2d 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8001ac6:	202d      	movs	r0, #45	; 0x2d
 8001ac8:	f000 fd2a 	bl	8002520 <HAL_Delay>
  tone(1567, 24);
 8001acc:	2118      	movs	r1, #24
 8001ace:	f240 601f 	movw	r0, #1567	; 0x61f
 8001ad2:	f7fe fe41 	bl	8000758 <tone>
  HAL_Delay(27);
 8001ad6:	201b      	movs	r0, #27
 8001ad8:	f000 fd22 	bl	8002520 <HAL_Delay>
  tone(1046, 8);
 8001adc:	2108      	movs	r1, #8
 8001ade:	f240 4016 	movw	r0, #1046	; 0x416
 8001ae2:	f7fe fe39 	bl	8000758 <tone>
  HAL_Delay(9);
 8001ae6:	2009      	movs	r0, #9
 8001ae8:	f000 fd1a 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001aec:	2009      	movs	r0, #9
 8001aee:	f000 fd17 	bl	8002520 <HAL_Delay>
  HAL_Delay(99);
 8001af2:	2063      	movs	r0, #99	; 0x63
 8001af4:	f000 fd14 	bl	8002520 <HAL_Delay>
  tone(1046, 611);
 8001af8:	f240 2163 	movw	r1, #611	; 0x263
 8001afc:	f240 4016 	movw	r0, #1046	; 0x416
 8001b00:	f7fe fe2a 	bl	8000758 <tone>
  HAL_Delay(679);
 8001b04:	f240 20a7 	movw	r0, #679	; 0x2a7
 8001b08:	f000 fd0a 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001b0c:	2024      	movs	r0, #36	; 0x24
 8001b0e:	f000 fd07 	bl	8002520 <HAL_Delay>
  tone(1046, 65);
 8001b12:	2141      	movs	r1, #65	; 0x41
 8001b14:	f240 4016 	movw	r0, #1046	; 0x416
 8001b18:	f7fe fe1e 	bl	8000758 <tone>
  HAL_Delay(72);
 8001b1c:	2048      	movs	r0, #72	; 0x48
 8001b1e:	f000 fcff 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001b22:	2009      	movs	r0, #9
 8001b24:	f000 fcfc 	bl	8002520 <HAL_Delay>
  tone(1046, 73);
 8001b28:	2149      	movs	r1, #73	; 0x49
 8001b2a:	f240 4016 	movw	r0, #1046	; 0x416
 8001b2e:	f7fe fe13 	bl	8000758 <tone>
  HAL_Delay(81);
 8001b32:	2051      	movs	r0, #81	; 0x51
 8001b34:	f000 fcf4 	bl	8002520 <HAL_Delay>
  HAL_Delay(697);
 8001b38:	f240 20b9 	movw	r0, #697	; 0x2b9
 8001b3c:	f000 fcf0 	bl	8002520 <HAL_Delay>
  HAL_Delay(298);
 8001b40:	f44f 7095 	mov.w	r0, #298	; 0x12a
 8001b44:	f000 fcec 	bl	8002520 <HAL_Delay>
  tone(1396, 179);
 8001b48:	21b3      	movs	r1, #179	; 0xb3
 8001b4a:	f240 5074 	movw	r0, #1396	; 0x574
 8001b4e:	f7fe fe03 	bl	8000758 <tone>
  HAL_Delay(199);
 8001b52:	20c7      	movs	r0, #199	; 0xc7
 8001b54:	f000 fce4 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001b58:	201b      	movs	r0, #27
 8001b5a:	f000 fce1 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8001b5e:	2048      	movs	r0, #72	; 0x48
 8001b60:	f000 fcde 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8001b64:	2110      	movs	r1, #16
 8001b66:	f240 5074 	movw	r0, #1396	; 0x574
 8001b6a:	f7fe fdf5 	bl	8000758 <tone>
  HAL_Delay(18);
 8001b6e:	2012      	movs	r0, #18
 8001b70:	f000 fcd6 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8001b74:	202d      	movs	r0, #45	; 0x2d
 8001b76:	f000 fcd3 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 8001b7a:	2120      	movs	r1, #32
 8001b7c:	f240 607d 	movw	r0, #1661	; 0x67d
 8001b80:	f7fe fdea 	bl	8000758 <tone>
  HAL_Delay(36);
 8001b84:	2024      	movs	r0, #36	; 0x24
 8001b86:	f000 fccb 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001b8a:	2009      	movs	r0, #9
 8001b8c:	f000 fcc8 	bl	8002520 <HAL_Delay>
  tone(2093, 8);
 8001b90:	2108      	movs	r1, #8
 8001b92:	f640 002d 	movw	r0, #2093	; 0x82d
 8001b96:	f7fe fddf 	bl	8000758 <tone>
  HAL_Delay(9);
 8001b9a:	2009      	movs	r0, #9
 8001b9c:	f000 fcc0 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8001ba0:	2110      	movs	r1, #16
 8001ba2:	f240 5074 	movw	r0, #1396	; 0x574
 8001ba6:	f7fe fdd7 	bl	8000758 <tone>
  HAL_Delay(18);
 8001baa:	2012      	movs	r0, #18
 8001bac:	f000 fcb8 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001bb0:	2009      	movs	r0, #9
 8001bb2:	f000 fcb5 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001bb6:	201b      	movs	r0, #27
 8001bb8:	f000 fcb2 	bl	8002520 <HAL_Delay>
  tone(1396, 73);
 8001bbc:	2149      	movs	r1, #73	; 0x49
 8001bbe:	f240 5074 	movw	r0, #1396	; 0x574
 8001bc2:	f7fe fdc9 	bl	8000758 <tone>
  HAL_Delay(81);
 8001bc6:	2051      	movs	r0, #81	; 0x51
 8001bc8:	f000 fcaa 	bl	8002520 <HAL_Delay>
  HAL_Delay(54);
 8001bcc:	2036      	movs	r0, #54	; 0x36
 8001bce:	f000 fca7 	bl	8002520 <HAL_Delay>
  tone(2093, 16);
 8001bd2:	2110      	movs	r1, #16
 8001bd4:	f640 002d 	movw	r0, #2093	; 0x82d
 8001bd8:	f7fe fdbe 	bl	8000758 <tone>
  HAL_Delay(18);
 8001bdc:	2012      	movs	r0, #18
 8001bde:	f000 fc9f 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 8001be2:	2118      	movs	r1, #24
 8001be4:	f240 5074 	movw	r0, #1396	; 0x574
 8001be8:	f7fe fdb6 	bl	8000758 <tone>
  HAL_Delay(27);
 8001bec:	201b      	movs	r0, #27
 8001bee:	f000 fc97 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8001bf2:	2048      	movs	r0, #72	; 0x48
 8001bf4:	f000 fc94 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 8001bf8:	2128      	movs	r1, #40	; 0x28
 8001bfa:	f640 002d 	movw	r0, #2093	; 0x82d
 8001bfe:	f7fe fdab 	bl	8000758 <tone>
  HAL_Delay(45);
 8001c02:	202d      	movs	r0, #45	; 0x2d
 8001c04:	f000 fc8c 	bl	8002520 <HAL_Delay>
  tone(1661, 220);
 8001c08:	21dc      	movs	r1, #220	; 0xdc
 8001c0a:	f240 607d 	movw	r0, #1661	; 0x67d
 8001c0e:	f7fe fda3 	bl	8000758 <tone>
  HAL_Delay(244);
 8001c12:	20f4      	movs	r0, #244	; 0xf4
 8001c14:	f000 fc84 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001c18:	2009      	movs	r0, #9
 8001c1a:	f000 fc81 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 8001c1e:	2128      	movs	r1, #40	; 0x28
 8001c20:	f240 607d 	movw	r0, #1661	; 0x67d
 8001c24:	f7fe fd98 	bl	8000758 <tone>
  HAL_Delay(45);
 8001c28:	202d      	movs	r0, #45	; 0x2d
 8001c2a:	f000 fc79 	bl	8002520 <HAL_Delay>
  HAL_Delay(108);
 8001c2e:	206c      	movs	r0, #108	; 0x6c
 8001c30:	f000 fc76 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 8001c34:	2128      	movs	r1, #40	; 0x28
 8001c36:	f240 607d 	movw	r0, #1661	; 0x67d
 8001c3a:	f7fe fd8d 	bl	8000758 <tone>
  HAL_Delay(45);
 8001c3e:	202d      	movs	r0, #45	; 0x2d
 8001c40:	f000 fc6e 	bl	8002520 <HAL_Delay>
  HAL_Delay(1250);
 8001c44:	f240 40e2 	movw	r0, #1250	; 0x4e2
 8001c48:	f000 fc6a 	bl	8002520 <HAL_Delay>
  tone(1864, 8);
 8001c4c:	2108      	movs	r1, #8
 8001c4e:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8001c52:	f7fe fd81 	bl	8000758 <tone>
  HAL_Delay(9);
 8001c56:	2009      	movs	r0, #9
 8001c58:	f000 fc62 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001c5c:	2012      	movs	r0, #18
 8001c5e:	f000 fc5f 	bl	8002520 <HAL_Delay>
  tone(1864, 57);
 8001c62:	2139      	movs	r1, #57	; 0x39
 8001c64:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8001c68:	f7fe fd76 	bl	8000758 <tone>
  HAL_Delay(63);
 8001c6c:	203f      	movs	r0, #63	; 0x3f
 8001c6e:	f000 fc57 	bl	8002520 <HAL_Delay>
  HAL_Delay(45);
 8001c72:	202d      	movs	r0, #45	; 0x2d
 8001c74:	f000 fc54 	bl	8002520 <HAL_Delay>
  tone(1864, 24);
 8001c78:	2118      	movs	r1, #24
 8001c7a:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8001c7e:	f7fe fd6b 	bl	8000758 <tone>
  HAL_Delay(27);
 8001c82:	201b      	movs	r0, #27
 8001c84:	f000 fc4c 	bl	8002520 <HAL_Delay>
  HAL_Delay(135);
 8001c88:	2087      	movs	r0, #135	; 0x87
 8001c8a:	f000 fc49 	bl	8002520 <HAL_Delay>
  HAL_Delay(317);
 8001c8e:	f240 103d 	movw	r0, #317	; 0x13d
 8001c92:	f000 fc45 	bl	8002520 <HAL_Delay>
  tone(1396, 269);
 8001c96:	f240 110d 	movw	r1, #269	; 0x10d
 8001c9a:	f240 5074 	movw	r0, #1396	; 0x574
 8001c9e:	f7fe fd5b 	bl	8000758 <tone>
  HAL_Delay(298);
 8001ca2:	f44f 7095 	mov.w	r0, #298	; 0x12a
 8001ca6:	f000 fc3b 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001caa:	2009      	movs	r0, #9
 8001cac:	f000 fc38 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001cb0:	201b      	movs	r0, #27
 8001cb2:	f000 fc35 	bl	8002520 <HAL_Delay>
  tone(1396, 65);
 8001cb6:	2141      	movs	r1, #65	; 0x41
 8001cb8:	f240 5074 	movw	r0, #1396	; 0x574
 8001cbc:	f7fe fd4c 	bl	8000758 <tone>
  HAL_Delay(72);
 8001cc0:	2048      	movs	r0, #72	; 0x48
 8001cc2:	f000 fc2d 	bl	8002520 <HAL_Delay>
  tone(1567, 57);
 8001cc6:	2139      	movs	r1, #57	; 0x39
 8001cc8:	f240 601f 	movw	r0, #1567	; 0x61f
 8001ccc:	f7fe fd44 	bl	8000758 <tone>
  HAL_Delay(63);
 8001cd0:	203f      	movs	r0, #63	; 0x3f
 8001cd2:	f000 fc25 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001cd6:	2024      	movs	r0, #36	; 0x24
 8001cd8:	f000 fc22 	bl	8002520 <HAL_Delay>
  tone(1567, 89);
 8001cdc:	2159      	movs	r1, #89	; 0x59
 8001cde:	f240 601f 	movw	r0, #1567	; 0x61f
 8001ce2:	f7fe fd39 	bl	8000758 <tone>
  HAL_Delay(99);
 8001ce6:	2063      	movs	r0, #99	; 0x63
 8001ce8:	f000 fc1a 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001cec:	201b      	movs	r0, #27
 8001cee:	f000 fc17 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 8001cf2:	2128      	movs	r1, #40	; 0x28
 8001cf4:	f240 601f 	movw	r0, #1567	; 0x61f
 8001cf8:	f7fe fd2e 	bl	8000758 <tone>
  HAL_Delay(45);
 8001cfc:	202d      	movs	r0, #45	; 0x2d
 8001cfe:	f000 fc0f 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001d02:	2024      	movs	r0, #36	; 0x24
 8001d04:	f000 fc0c 	bl	8002520 <HAL_Delay>
  tone(1567, 40);
 8001d08:	2128      	movs	r1, #40	; 0x28
 8001d0a:	f240 601f 	movw	r0, #1567	; 0x61f
 8001d0e:	f7fe fd23 	bl	8000758 <tone>
  HAL_Delay(45);
 8001d12:	202d      	movs	r0, #45	; 0x2d
 8001d14:	f000 fc04 	bl	8002520 <HAL_Delay>
  HAL_Delay(434);
 8001d18:	f44f 70d9 	mov.w	r0, #434	; 0x1b2
 8001d1c:	f000 fc00 	bl	8002520 <HAL_Delay>
  tone(1661, 138);
 8001d20:	218a      	movs	r1, #138	; 0x8a
 8001d22:	f240 607d 	movw	r0, #1661	; 0x67d
 8001d26:	f7fe fd17 	bl	8000758 <tone>
  HAL_Delay(153);
 8001d2a:	2099      	movs	r0, #153	; 0x99
 8001d2c:	f000 fbf8 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001d30:	2009      	movs	r0, #9
 8001d32:	f000 fbf5 	bl	8002520 <HAL_Delay>
  tone(1661, 105);
 8001d36:	2169      	movs	r1, #105	; 0x69
 8001d38:	f240 607d 	movw	r0, #1661	; 0x67d
 8001d3c:	f7fe fd0c 	bl	8000758 <tone>
  HAL_Delay(117);
 8001d40:	2075      	movs	r0, #117	; 0x75
 8001d42:	f000 fbed 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001d46:	201b      	movs	r0, #27
 8001d48:	f000 fbea 	bl	8002520 <HAL_Delay>
  tone(1661, 32);
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	f240 607d 	movw	r0, #1661	; 0x67d
 8001d52:	f7fe fd01 	bl	8000758 <tone>
  HAL_Delay(36);
 8001d56:	2024      	movs	r0, #36	; 0x24
 8001d58:	f000 fbe2 	bl	8002520 <HAL_Delay>
  HAL_Delay(135);
 8001d5c:	2087      	movs	r0, #135	; 0x87
 8001d5e:	f000 fbdf 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8001d62:	2048      	movs	r0, #72	; 0x48
 8001d64:	f000 fbdc 	bl	8002520 <HAL_Delay>
  tone(1661, 8);
 8001d68:	2108      	movs	r1, #8
 8001d6a:	f240 607d 	movw	r0, #1661	; 0x67d
 8001d6e:	f7fe fcf3 	bl	8000758 <tone>
  HAL_Delay(9);
 8001d72:	2009      	movs	r0, #9
 8001d74:	f000 fbd4 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001d78:	2024      	movs	r0, #36	; 0x24
 8001d7a:	f000 fbd1 	bl	8002520 <HAL_Delay>
  tone(1661, 48);
 8001d7e:	2130      	movs	r1, #48	; 0x30
 8001d80:	f240 607d 	movw	r0, #1661	; 0x67d
 8001d84:	f7fe fce8 	bl	8000758 <tone>
  HAL_Delay(54);
 8001d88:	2036      	movs	r0, #54	; 0x36
 8001d8a:	f000 fbc9 	bl	8002520 <HAL_Delay>
  tone(1567, 171);
 8001d8e:	21ab      	movs	r1, #171	; 0xab
 8001d90:	f240 601f 	movw	r0, #1567	; 0x61f
 8001d94:	f7fe fce0 	bl	8000758 <tone>
  HAL_Delay(190);
 8001d98:	20be      	movs	r0, #190	; 0xbe
 8001d9a:	f000 fbc1 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001d9e:	2009      	movs	r0, #9
 8001da0:	f000 fbbe 	bl	8002520 <HAL_Delay>
  tone(1396, 65);
 8001da4:	2141      	movs	r1, #65	; 0x41
 8001da6:	f240 5074 	movw	r0, #1396	; 0x574
 8001daa:	f7fe fcd5 	bl	8000758 <tone>
  HAL_Delay(72);
 8001dae:	2048      	movs	r0, #72	; 0x48
 8001db0:	f000 fbb6 	bl	8002520 <HAL_Delay>
  tone(1567, 8);
 8001db4:	2108      	movs	r1, #8
 8001db6:	f240 601f 	movw	r0, #1567	; 0x61f
 8001dba:	f7fe fccd 	bl	8000758 <tone>
  HAL_Delay(9);
 8001dbe:	2009      	movs	r0, #9
 8001dc0:	f000 fbae 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001dc4:	2012      	movs	r0, #18
 8001dc6:	f000 fbab 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001dca:	2009      	movs	r0, #9
 8001dcc:	f000 fba8 	bl	8002520 <HAL_Delay>
  tone(1567, 65);
 8001dd0:	2141      	movs	r1, #65	; 0x41
 8001dd2:	f240 601f 	movw	r0, #1567	; 0x61f
 8001dd6:	f7fe fcbf 	bl	8000758 <tone>
  HAL_Delay(72);
 8001dda:	2048      	movs	r0, #72	; 0x48
 8001ddc:	f000 fba0 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8001de0:	2110      	movs	r1, #16
 8001de2:	f240 5074 	movw	r0, #1396	; 0x574
 8001de6:	f7fe fcb7 	bl	8000758 <tone>
  HAL_Delay(18);
 8001dea:	2012      	movs	r0, #18
 8001dec:	f000 fb98 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001df0:	2009      	movs	r0, #9
 8001df2:	f000 fb95 	bl	8002520 <HAL_Delay>
  tone(1396, 40);
 8001df6:	2128      	movs	r1, #40	; 0x28
 8001df8:	f240 5074 	movw	r0, #1396	; 0x574
 8001dfc:	f7fe fcac 	bl	8000758 <tone>
  HAL_Delay(45);
 8001e00:	202d      	movs	r0, #45	; 0x2d
 8001e02:	f000 fb8d 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001e06:	2012      	movs	r0, #18
 8001e08:	f000 fb8a 	bl	8002520 <HAL_Delay>
  tone(1479, 8);
 8001e0c:	2108      	movs	r1, #8
 8001e0e:	f240 50c7 	movw	r0, #1479	; 0x5c7
 8001e12:	f7fe fca1 	bl	8000758 <tone>
  HAL_Delay(9);
 8001e16:	2009      	movs	r0, #9
 8001e18:	f000 fb82 	bl	8002520 <HAL_Delay>
  HAL_Delay(126);
 8001e1c:	207e      	movs	r0, #126	; 0x7e
 8001e1e:	f000 fb7f 	bl	8002520 <HAL_Delay>
  tone(1244, 8);
 8001e22:	2108      	movs	r1, #8
 8001e24:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001e28:	f7fe fc96 	bl	8000758 <tone>
  HAL_Delay(9);
 8001e2c:	2009      	movs	r0, #9
 8001e2e:	f000 fb77 	bl	8002520 <HAL_Delay>
  tone(1174, 8);
 8001e32:	2108      	movs	r1, #8
 8001e34:	f240 4096 	movw	r0, #1174	; 0x496
 8001e38:	f7fe fc8e 	bl	8000758 <tone>
  HAL_Delay(9);
 8001e3c:	2009      	movs	r0, #9
 8001e3e:	f000 fb6f 	bl	8002520 <HAL_Delay>
  tone(1244, 187);
 8001e42:	21bb      	movs	r1, #187	; 0xbb
 8001e44:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001e48:	f7fe fc86 	bl	8000758 <tone>
  HAL_Delay(208);
 8001e4c:	20d0      	movs	r0, #208	; 0xd0
 8001e4e:	f000 fb67 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001e52:	2009      	movs	r0, #9
 8001e54:	f000 fb64 	bl	8002520 <HAL_Delay>
  tone(1244, 57);
 8001e58:	2139      	movs	r1, #57	; 0x39
 8001e5a:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001e5e:	f7fe fc7b 	bl	8000758 <tone>
  HAL_Delay(63);
 8001e62:	203f      	movs	r0, #63	; 0x3f
 8001e64:	f000 fb5c 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001e68:	2009      	movs	r0, #9
 8001e6a:	f000 fb59 	bl	8002520 <HAL_Delay>
  tone(1244, 65);
 8001e6e:	2141      	movs	r1, #65	; 0x41
 8001e70:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001e74:	f7fe fc70 	bl	8000758 <tone>
  HAL_Delay(72);
 8001e78:	2048      	movs	r0, #72	; 0x48
 8001e7a:	f000 fb51 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001e7e:	2012      	movs	r0, #18
 8001e80:	f000 fb4e 	bl	8002520 <HAL_Delay>
  tone(1244, 211);
 8001e84:	21d3      	movs	r1, #211	; 0xd3
 8001e86:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001e8a:	f7fe fc65 	bl	8000758 <tone>
  HAL_Delay(235);
 8001e8e:	20eb      	movs	r0, #235	; 0xeb
 8001e90:	f000 fb46 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8001e94:	201b      	movs	r0, #27
 8001e96:	f000 fb43 	bl	8002520 <HAL_Delay>
  tone(1244, 24);
 8001e9a:	2118      	movs	r1, #24
 8001e9c:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001ea0:	f7fe fc5a 	bl	8000758 <tone>
  HAL_Delay(27);
 8001ea4:	201b      	movs	r0, #27
 8001ea6:	f000 fb3b 	bl	8002520 <HAL_Delay>
  HAL_Delay(117);
 8001eaa:	2075      	movs	r0, #117	; 0x75
 8001eac:	f000 fb38 	bl	8002520 <HAL_Delay>
  tone(1244, 40);
 8001eb0:	2128      	movs	r1, #40	; 0x28
 8001eb2:	f240 40dc 	movw	r0, #1244	; 0x4dc
 8001eb6:	f7fe fc4f 	bl	8000758 <tone>
  HAL_Delay(45);
 8001eba:	202d      	movs	r0, #45	; 0x2d
 8001ebc:	f000 fb30 	bl	8002520 <HAL_Delay>
  tone(1396, 701);
 8001ec0:	f240 21bd 	movw	r1, #701	; 0x2bd
 8001ec4:	f240 5074 	movw	r0, #1396	; 0x574
 8001ec8:	f7fe fc46 	bl	8000758 <tone>
  HAL_Delay(778);
 8001ecc:	f240 300a 	movw	r0, #778	; 0x30a
 8001ed0:	f000 fb26 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001ed4:	2024      	movs	r0, #36	; 0x24
 8001ed6:	f000 fb23 	bl	8002520 <HAL_Delay>
  tone(1396, 48);
 8001eda:	2130      	movs	r1, #48	; 0x30
 8001edc:	f240 5074 	movw	r0, #1396	; 0x574
 8001ee0:	f7fe fc3a 	bl	8000758 <tone>
  HAL_Delay(54);
 8001ee4:	2036      	movs	r0, #54	; 0x36
 8001ee6:	f000 fb1b 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001eea:	2009      	movs	r0, #9
 8001eec:	f000 fb18 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8001ef0:	2048      	movs	r0, #72	; 0x48
 8001ef2:	f000 fb15 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 8001ef6:	2118      	movs	r1, #24
 8001ef8:	f240 5074 	movw	r0, #1396	; 0x574
 8001efc:	f7fe fc2c 	bl	8000758 <tone>
  HAL_Delay(27);
 8001f00:	201b      	movs	r0, #27
 8001f02:	f000 fb0d 	bl	8002520 <HAL_Delay>
  tone(1046, 114);
 8001f06:	2172      	movs	r1, #114	; 0x72
 8001f08:	f240 4016 	movw	r0, #1046	; 0x416
 8001f0c:	f7fe fc24 	bl	8000758 <tone>
  HAL_Delay(126);
 8001f10:	207e      	movs	r0, #126	; 0x7e
 8001f12:	f000 fb05 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001f16:	2009      	movs	r0, #9
 8001f18:	f000 fb02 	bl	8002520 <HAL_Delay>
  HAL_Delay(380);
 8001f1c:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8001f20:	f000 fafe 	bl	8002520 <HAL_Delay>
  tone(1046, 611);
 8001f24:	f240 2163 	movw	r1, #611	; 0x263
 8001f28:	f240 4016 	movw	r0, #1046	; 0x416
 8001f2c:	f7fe fc14 	bl	8000758 <tone>
  HAL_Delay(679);
 8001f30:	f240 20a7 	movw	r0, #679	; 0x2a7
 8001f34:	f000 faf4 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001f38:	2024      	movs	r0, #36	; 0x24
 8001f3a:	f000 faf1 	bl	8002520 <HAL_Delay>
  tone(1046, 65);
 8001f3e:	2141      	movs	r1, #65	; 0x41
 8001f40:	f240 4016 	movw	r0, #1046	; 0x416
 8001f44:	f7fe fc08 	bl	8000758 <tone>
  HAL_Delay(72);
 8001f48:	2048      	movs	r0, #72	; 0x48
 8001f4a:	f000 fae9 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001f4e:	2012      	movs	r0, #18
 8001f50:	f000 fae6 	bl	8002520 <HAL_Delay>
  tone(1046, 65);
 8001f54:	2141      	movs	r1, #65	; 0x41
 8001f56:	f240 4016 	movw	r0, #1046	; 0x416
 8001f5a:	f7fe fbfd 	bl	8000758 <tone>
  HAL_Delay(72);
 8001f5e:	2048      	movs	r0, #72	; 0x48
 8001f60:	f000 fade 	bl	8002520 <HAL_Delay>
  HAL_Delay(697);
 8001f64:	f240 20b9 	movw	r0, #697	; 0x2b9
 8001f68:	f000 fada 	bl	8002520 <HAL_Delay>
  HAL_Delay(298);
 8001f6c:	f44f 7095 	mov.w	r0, #298	; 0x12a
 8001f70:	f000 fad6 	bl	8002520 <HAL_Delay>
  tone(1396, 187);
 8001f74:	21bb      	movs	r1, #187	; 0xbb
 8001f76:	f240 5074 	movw	r0, #1396	; 0x574
 8001f7a:	f7fe fbed 	bl	8000758 <tone>
  HAL_Delay(208);
 8001f7e:	20d0      	movs	r0, #208	; 0xd0
 8001f80:	f000 face 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8001f84:	2012      	movs	r0, #18
 8001f86:	f000 facb 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8001f8a:	2048      	movs	r0, #72	; 0x48
 8001f8c:	f000 fac8 	bl	8002520 <HAL_Delay>
  tone(1396, 24);
 8001f90:	2118      	movs	r1, #24
 8001f92:	f240 5074 	movw	r0, #1396	; 0x574
 8001f96:	f7fe fbdf 	bl	8000758 <tone>
  HAL_Delay(27);
 8001f9a:	201b      	movs	r0, #27
 8001f9c:	f000 fac0 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001fa0:	2024      	movs	r0, #36	; 0x24
 8001fa2:	f000 fabd 	bl	8002520 <HAL_Delay>
  tone(2093, 48);
 8001fa6:	2130      	movs	r1, #48	; 0x30
 8001fa8:	f640 002d 	movw	r0, #2093	; 0x82d
 8001fac:	f7fe fbd4 	bl	8000758 <tone>
  HAL_Delay(54);
 8001fb0:	2036      	movs	r0, #54	; 0x36
 8001fb2:	f000 fab5 	bl	8002520 <HAL_Delay>
  tone(1396, 16);
 8001fb6:	2110      	movs	r1, #16
 8001fb8:	f240 5074 	movw	r0, #1396	; 0x574
 8001fbc:	f7fe fbcc 	bl	8000758 <tone>
  HAL_Delay(18);
 8001fc0:	2012      	movs	r0, #18
 8001fc2:	f000 faad 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001fc6:	2009      	movs	r0, #9
 8001fc8:	f000 faaa 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 8001fcc:	2024      	movs	r0, #36	; 0x24
 8001fce:	f000 faa7 	bl	8002520 <HAL_Delay>
  tone(1396, 65);
 8001fd2:	2141      	movs	r1, #65	; 0x41
 8001fd4:	f240 5074 	movw	r0, #1396	; 0x574
 8001fd8:	f7fe fbbe 	bl	8000758 <tone>
  HAL_Delay(72);
 8001fdc:	2048      	movs	r0, #72	; 0x48
 8001fde:	f000 fa9f 	bl	8002520 <HAL_Delay>
  tone(2093, 40);
 8001fe2:	2128      	movs	r1, #40	; 0x28
 8001fe4:	f640 002d 	movw	r0, #2093	; 0x82d
 8001fe8:	f7fe fbb6 	bl	8000758 <tone>
  HAL_Delay(45);
 8001fec:	202d      	movs	r0, #45	; 0x2d
 8001fee:	f000 fa97 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8001ff2:	2009      	movs	r0, #9
 8001ff4:	f000 fa94 	bl	8002520 <HAL_Delay>
  tone(1396, 48);
 8001ff8:	2130      	movs	r1, #48	; 0x30
 8001ffa:	f240 5074 	movw	r0, #1396	; 0x574
 8001ffe:	f7fe fbab 	bl	8000758 <tone>
  HAL_Delay(54);
 8002002:	2036      	movs	r0, #54	; 0x36
 8002004:	f000 fa8c 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 8002008:	2009      	movs	r0, #9
 800200a:	f000 fa89 	bl	8002520 <HAL_Delay>
  tone(2093, 89);
 800200e:	2159      	movs	r1, #89	; 0x59
 8002010:	f640 002d 	movw	r0, #2093	; 0x82d
 8002014:	f7fe fba0 	bl	8000758 <tone>
  HAL_Delay(99);
 8002018:	2063      	movs	r0, #99	; 0x63
 800201a:	f000 fa81 	bl	8002520 <HAL_Delay>
  tone(1661, 301);
 800201e:	f240 112d 	movw	r1, #301	; 0x12d
 8002022:	f240 607d 	movw	r0, #1661	; 0x67d
 8002026:	f7fe fb97 	bl	8000758 <tone>
  HAL_Delay(335);
 800202a:	f240 104f 	movw	r0, #335	; 0x14f
 800202e:	f000 fa77 	bl	8002520 <HAL_Delay>
  HAL_Delay(81);
 8002032:	2051      	movs	r0, #81	; 0x51
 8002034:	f000 fa74 	bl	8002520 <HAL_Delay>
  tone(1661, 40);
 8002038:	2128      	movs	r1, #40	; 0x28
 800203a:	f240 607d 	movw	r0, #1661	; 0x67d
 800203e:	f7fe fb8b 	bl	8000758 <tone>
  HAL_Delay(45);
 8002042:	202d      	movs	r0, #45	; 0x2d
 8002044:	f000 fa6c 	bl	8002520 <HAL_Delay>
  tone(1864, 1043);
 8002048:	f240 4113 	movw	r1, #1043	; 0x413
 800204c:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8002050:	f7fe fb82 	bl	8000758 <tone>
  HAL_Delay(1159);
 8002054:	f240 4087 	movw	r0, #1159	; 0x487
 8002058:	f000 fa62 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 800205c:	2009      	movs	r0, #9
 800205e:	f000 fa5f 	bl	8002520 <HAL_Delay>
  HAL_Delay(72);
 8002062:	2048      	movs	r0, #72	; 0x48
 8002064:	f000 fa5c 	bl	8002520 <HAL_Delay>
  tone(1864, 8);
 8002068:	2108      	movs	r1, #8
 800206a:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800206e:	f7fe fb73 	bl	8000758 <tone>
  HAL_Delay(9);
 8002072:	2009      	movs	r0, #9
 8002074:	f000 fa54 	bl	8002520 <HAL_Delay>
  HAL_Delay(18);
 8002078:	2012      	movs	r0, #18
 800207a:	f000 fa51 	bl	8002520 <HAL_Delay>
  tone(1864, 48);
 800207e:	2130      	movs	r1, #48	; 0x30
 8002080:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 8002084:	f7fe fb68 	bl	8000758 <tone>
  HAL_Delay(54);
 8002088:	2036      	movs	r0, #54	; 0x36
 800208a:	f000 fa49 	bl	8002520 <HAL_Delay>
  HAL_Delay(54);
 800208e:	2036      	movs	r0, #54	; 0x36
 8002090:	f000 fa46 	bl	8002520 <HAL_Delay>
  tone(1864, 24);
 8002094:	2118      	movs	r1, #24
 8002096:	f44f 60e9 	mov.w	r0, #1864	; 0x748
 800209a:	f7fe fb5d 	bl	8000758 <tone>
  HAL_Delay(27);
 800209e:	201b      	movs	r0, #27
 80020a0:	f000 fa3e 	bl	8002520 <HAL_Delay>
  HAL_Delay(135);
 80020a4:	2087      	movs	r0, #135	; 0x87
 80020a6:	f000 fa3b 	bl	8002520 <HAL_Delay>
  HAL_Delay(307);
 80020aa:	f240 1033 	movw	r0, #307	; 0x133
 80020ae:	f000 fa37 	bl	8002520 <HAL_Delay>
  tone(1396, 285);
 80020b2:	f240 111d 	movw	r1, #285	; 0x11d
 80020b6:	f240 5074 	movw	r0, #1396	; 0x574
 80020ba:	f7fe fb4d 	bl	8000758 <tone>
  HAL_Delay(317);
 80020be:	f240 103d 	movw	r0, #317	; 0x13d
 80020c2:	f000 fa2d 	bl	8002520 <HAL_Delay>
  HAL_Delay(36);
 80020c6:	2024      	movs	r0, #36	; 0x24
 80020c8:	f000 fa2a 	bl	8002520 <HAL_Delay>
  tone(1396, 57);
 80020cc:	2139      	movs	r1, #57	; 0x39
 80020ce:	f240 5074 	movw	r0, #1396	; 0x574
 80020d2:	f7fe fb41 	bl	8000758 <tone>
  HAL_Delay(63);
 80020d6:	203f      	movs	r0, #63	; 0x3f
 80020d8:	f000 fa22 	bl	8002520 <HAL_Delay>
  tone(1567, 81);
 80020dc:	2151      	movs	r1, #81	; 0x51
 80020de:	f240 601f 	movw	r0, #1567	; 0x61f
 80020e2:	f7fe fb39 	bl	8000758 <tone>
  HAL_Delay(90);
 80020e6:	205a      	movs	r0, #90	; 0x5a
 80020e8:	f000 fa1a 	bl	8002520 <HAL_Delay>
  HAL_Delay(9);
 80020ec:	2009      	movs	r0, #9
 80020ee:	f000 fa17 	bl	8002520 <HAL_Delay>
  tone(1567, 81);
 80020f2:	2151      	movs	r1, #81	; 0x51
 80020f4:	f240 601f 	movw	r0, #1567	; 0x61f
 80020f8:	f7fe fb2e 	bl	8000758 <tone>
  HAL_Delay(90);
 80020fc:	205a      	movs	r0, #90	; 0x5a
 80020fe:	f000 fa0f 	bl	8002520 <HAL_Delay>
  HAL_Delay(27);
 8002102:	201b      	movs	r0, #27
 8002104:	f000 fa0c 	bl	8002520 <HAL_Delay>
  tone(1567, 73);
 8002108:	2149      	movs	r1, #73	; 0x49
 800210a:	f240 601f 	movw	r0, #1567	; 0x61f
 800210e:	f7fe fb23 	bl	8000758 <tone>
}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}

08002116 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002116:	b480      	push	{r7}
 8002118:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800211a:	b672      	cpsid	i
}
 800211c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800211e:	e7fe      	b.n	800211e <Error_Handler+0x8>

08002120 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_MspInit+0x4c>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a0f      	ldr	r2, [pc, #60]	; (800216c <HAL_MspInit+0x4c>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b0d      	ldr	r3, [pc, #52]	; (800216c <HAL_MspInit+0x4c>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	2300      	movs	r3, #0
 8002144:	603b      	str	r3, [r7, #0]
 8002146:	4b09      	ldr	r3, [pc, #36]	; (800216c <HAL_MspInit+0x4c>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a08      	ldr	r2, [pc, #32]	; (800216c <HAL_MspInit+0x4c>)
 800214c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_MspInit+0x4c>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	603b      	str	r3, [r7, #0]
 800215c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215e:	bf00      	nop
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40023800 	.word	0x40023800

08002170 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <NMI_Handler+0x4>

08002176 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800217a:	e7fe      	b.n	800217a <HardFault_Handler+0x4>

0800217c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002180:	e7fe      	b.n	8002180 <MemManage_Handler+0x4>

08002182 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002182:	b480      	push	{r7}
 8002184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler+0x4>

08002188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800218c:	e7fe      	b.n	800218c <UsageFault_Handler+0x4>

0800218e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800218e:	b480      	push	{r7}
 8002190:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021bc:	f000 f990 	bl	80024e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021c8:	4802      	ldr	r0, [pc, #8]	; (80021d4 <TIM2_IRQHandler+0x10>)
 80021ca:	f001 fa62 	bl	8003692 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	2000002c 	.word	0x2000002c

080021d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <USART1_IRQHandler+0x10>)
 80021de:	f001 fefb 	bl	8003fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000074 	.word	0x20000074

080021ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	; (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002216:	f107 0308 	add.w	r3, r7, #8
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
 8002220:	609a      	str	r2, [r3, #8]
 8002222:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002224:	463b      	mov	r3, r7
 8002226:	2200      	movs	r2, #0
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800222c:	4b1d      	ldr	r3, [pc, #116]	; (80022a4 <MX_TIM2_Init+0x94>)
 800222e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002232:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8002234:	4b1b      	ldr	r3, [pc, #108]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002236:	2201      	movs	r2, #1
 8002238:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b1a      	ldr	r3, [pc, #104]	; (80022a4 <MX_TIM2_Init+0x94>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8002240:	4b18      	ldr	r3, [pc, #96]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002242:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002246:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b16      	ldr	r3, [pc, #88]	; (80022a4 <MX_TIM2_Init+0x94>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224e:	4b15      	ldr	r3, [pc, #84]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002254:	4813      	ldr	r0, [pc, #76]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002256:	f001 f93b 	bl	80034d0 <HAL_TIM_Base_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002260:	f7ff ff59 	bl	8002116 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	4619      	mov	r1, r3
 8002270:	480c      	ldr	r0, [pc, #48]	; (80022a4 <MX_TIM2_Init+0x94>)
 8002272:	f001 fb16 	bl	80038a2 <HAL_TIM_ConfigClockSource>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800227c:	f7ff ff4b 	bl	8002116 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002280:	2300      	movs	r3, #0
 8002282:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002284:	2300      	movs	r3, #0
 8002286:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002288:	463b      	mov	r3, r7
 800228a:	4619      	mov	r1, r3
 800228c:	4805      	ldr	r0, [pc, #20]	; (80022a4 <MX_TIM2_Init+0x94>)
 800228e:	f001 fd11 	bl	8003cb4 <HAL_TIMEx_MasterConfigSynchronization>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002298:	f7ff ff3d 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800229c:	bf00      	nop
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000002c 	.word	0x2000002c

080022a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b8:	d115      	bne.n	80022e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <HAL_TIM_Base_MspInit+0x48>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	4a0b      	ldr	r2, [pc, #44]	; (80022f0 <HAL_TIM_Base_MspInit+0x48>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <HAL_TIM_Base_MspInit+0x48>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	201c      	movs	r0, #28
 80022dc:	f000 fa1f 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022e0:	201c      	movs	r0, #28
 80022e2:	f000 fa38 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800

080022f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 80022fa:	4a12      	ldr	r2, [pc, #72]	; (8002344 <MX_USART1_UART_Init+0x50>)
 80022fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022fe:	4b10      	ldr	r3, [pc, #64]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002306:	4b0e      	ldr	r3, [pc, #56]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002308:	2200      	movs	r2, #0
 800230a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 800230e:	2200      	movs	r2, #0
 8002310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002318:	4b09      	ldr	r3, [pc, #36]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 800231a:	220c      	movs	r2, #12
 800231c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800231e:	4b08      	ldr	r3, [pc, #32]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 8002326:	2200      	movs	r2, #0
 8002328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800232a:	4805      	ldr	r0, [pc, #20]	; (8002340 <MX_USART1_UART_Init+0x4c>)
 800232c:	f001 fd44 	bl	8003db8 <HAL_UART_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002336:	f7ff feee 	bl	8002116 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000074 	.word	0x20000074
 8002344:	40011000 	.word	0x40011000

08002348 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <HAL_UART_MspInit+0x94>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d134      	bne.n	80023d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	4b1c      	ldr	r3, [pc, #112]	; (80023e0 <HAL_UART_MspInit+0x98>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <HAL_UART_MspInit+0x98>)
 8002374:	f043 0310 	orr.w	r3, r3, #16
 8002378:	6453      	str	r3, [r2, #68]	; 0x44
 800237a:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <HAL_UART_MspInit+0x98>)
 800237c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237e:	f003 0310 	and.w	r3, r3, #16
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <HAL_UART_MspInit+0x98>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <HAL_UART_MspInit+0x98>)
 8002390:	f043 0301 	orr.w	r3, r3, #1
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <HAL_UART_MspInit+0x98>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80023a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b0:	2303      	movs	r3, #3
 80023b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b4:	2307      	movs	r3, #7
 80023b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b8:	f107 0314 	add.w	r3, r7, #20
 80023bc:	4619      	mov	r1, r3
 80023be:	4809      	ldr	r0, [pc, #36]	; (80023e4 <HAL_UART_MspInit+0x9c>)
 80023c0:	f000 fa76 	bl	80028b0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	2025      	movs	r0, #37	; 0x25
 80023ca:	f000 f9a8 	bl	800271e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023ce:	2025      	movs	r0, #37	; 0x25
 80023d0:	f000 f9c1 	bl	8002756 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023d4:	bf00      	nop
 80023d6:	3728      	adds	r7, #40	; 0x28
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40011000 	.word	0x40011000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020000 	.word	0x40020000

080023e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002420 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023ec:	480d      	ldr	r0, [pc, #52]	; (8002424 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ee:	490e      	ldr	r1, [pc, #56]	; (8002428 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023f0:	4a0e      	ldr	r2, [pc, #56]	; (800242c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f4:	e002      	b.n	80023fc <LoopCopyDataInit>

080023f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fa:	3304      	adds	r3, #4

080023fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002400:	d3f9      	bcc.n	80023f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002404:	4c0b      	ldr	r4, [pc, #44]	; (8002434 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002408:	e001      	b.n	800240e <LoopFillZerobss>

0800240a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800240c:	3204      	adds	r2, #4

0800240e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002410:	d3fb      	bcc.n	800240a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002412:	f7ff feeb 	bl	80021ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002416:	f002 fd47 	bl	8004ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800241a:	f7fe f8a3 	bl	8000564 <main>
  bx  lr    
 800241e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002420:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002424:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002428:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800242c:	08004f40 	.word	0x08004f40
  ldr r2, =_sbss
 8002430:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002434:	200000bc 	.word	0x200000bc

08002438 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002438:	e7fe      	b.n	8002438 <ADC_IRQHandler>
	...

0800243c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <HAL_Init+0x40>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0d      	ldr	r2, [pc, #52]	; (800247c <HAL_Init+0x40>)
 8002446:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800244a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_Init+0x40>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a0a      	ldr	r2, [pc, #40]	; (800247c <HAL_Init+0x40>)
 8002452:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002456:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_Init+0x40>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_Init+0x40>)
 800245e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002462:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002464:	2003      	movs	r0, #3
 8002466:	f000 f94f 	bl	8002708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800246a:	200f      	movs	r0, #15
 800246c:	f000 f808 	bl	8002480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002470:	f7ff fe56 	bl	8002120 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023c00 	.word	0x40023c00

08002480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x54>)
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <HAL_InitTick+0x58>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	4619      	mov	r1, r3
 8002492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002496:	fbb3 f3f1 	udiv	r3, r3, r1
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	4618      	mov	r0, r3
 80024a0:	f000 f967 	bl	8002772 <HAL_SYSTICK_Config>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e00e      	b.n	80024cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	d80a      	bhi.n	80024ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b4:	2200      	movs	r2, #0
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295
 80024bc:	f000 f92f 	bl	800271e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c0:	4a06      	ldr	r2, [pc, #24]	; (80024dc <HAL_InitTick+0x5c>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e000      	b.n	80024cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000008 	.word	0x20000008
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e4:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x20>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_IncTick+0x24>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_IncTick+0x24>)
 80024f2:	6013      	str	r3, [r2, #0]
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	20000008 	.word	0x20000008
 8002504:	200000b8 	.word	0x200000b8

08002508 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return uwTick;
 800250c:	4b03      	ldr	r3, [pc, #12]	; (800251c <HAL_GetTick+0x14>)
 800250e:	681b      	ldr	r3, [r3, #0]
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	200000b8 	.word	0x200000b8

08002520 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff ffee 	bl	8002508 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d005      	beq.n	8002546 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_Delay+0x44>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	461a      	mov	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	4413      	add	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002546:	bf00      	nop
 8002548:	f7ff ffde 	bl	8002508 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	429a      	cmp	r2, r3
 8002556:	d8f7      	bhi.n	8002548 <HAL_Delay+0x28>
  {
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000008 	.word	0x20000008

08002568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f003 0307 	and.w	r3, r3, #7
 8002576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002584:	4013      	ands	r3, r2
 8002586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259a:	4a04      	ldr	r2, [pc, #16]	; (80025ac <__NVIC_SetPriorityGrouping+0x44>)
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	60d3      	str	r3, [r2, #12]
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <__NVIC_GetPriorityGrouping+0x18>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	0a1b      	lsrs	r3, r3, #8
 80025ba:	f003 0307 	and.w	r3, r3, #7
}
 80025be:	4618      	mov	r0, r3
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	db0b      	blt.n	80025f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 021f 	and.w	r2, r3, #31
 80025e4:	4907      	ldr	r1, [pc, #28]	; (8002604 <__NVIC_EnableIRQ+0x38>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2001      	movs	r0, #1
 80025ee:	fa00 f202 	lsl.w	r2, r0, r2
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f6:	bf00      	nop
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000e100 	.word	0xe000e100

08002608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	6039      	str	r1, [r7, #0]
 8002612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002618:	2b00      	cmp	r3, #0
 800261a:	db0a      	blt.n	8002632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	b2da      	uxtb	r2, r3
 8002620:	490c      	ldr	r1, [pc, #48]	; (8002654 <__NVIC_SetPriority+0x4c>)
 8002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002626:	0112      	lsls	r2, r2, #4
 8002628:	b2d2      	uxtb	r2, r2
 800262a:	440b      	add	r3, r1
 800262c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002630:	e00a      	b.n	8002648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <__NVIC_SetPriority+0x50>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	3b04      	subs	r3, #4
 8002640:	0112      	lsls	r2, r2, #4
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	440b      	add	r3, r1
 8002646:	761a      	strb	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr
 8002654:	e000e100 	.word	0xe000e100
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f1c3 0307 	rsb	r3, r3, #7
 8002676:	2b04      	cmp	r3, #4
 8002678:	bf28      	it	cs
 800267a:	2304      	movcs	r3, #4
 800267c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3304      	adds	r3, #4
 8002682:	2b06      	cmp	r3, #6
 8002684:	d902      	bls.n	800268c <NVIC_EncodePriority+0x30>
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3b03      	subs	r3, #3
 800268a:	e000      	b.n	800268e <NVIC_EncodePriority+0x32>
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	f04f 32ff 	mov.w	r2, #4294967295
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	401a      	ands	r2, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	4313      	orrs	r3, r2
         );
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d4:	d301      	bcc.n	80026da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d6:	2301      	movs	r3, #1
 80026d8:	e00f      	b.n	80026fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026da:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <SysTick_Config+0x40>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026e2:	210f      	movs	r1, #15
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f7ff ff8e 	bl	8002608 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ec:	4b05      	ldr	r3, [pc, #20]	; (8002704 <SysTick_Config+0x40>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026f2:	4b04      	ldr	r3, [pc, #16]	; (8002704 <SysTick_Config+0x40>)
 80026f4:	2207      	movs	r2, #7
 80026f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	e000e010 	.word	0xe000e010

08002708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff29 	bl	8002568 <__NVIC_SetPriorityGrouping>
}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271e:	b580      	push	{r7, lr}
 8002720:	b086      	sub	sp, #24
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	60b9      	str	r1, [r7, #8]
 8002728:	607a      	str	r2, [r7, #4]
 800272a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002730:	f7ff ff3e 	bl	80025b0 <__NVIC_GetPriorityGrouping>
 8002734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	68b9      	ldr	r1, [r7, #8]
 800273a:	6978      	ldr	r0, [r7, #20]
 800273c:	f7ff ff8e 	bl	800265c <NVIC_EncodePriority>
 8002740:	4602      	mov	r2, r0
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff5d 	bl	8002608 <__NVIC_SetPriority>
}
 800274e:	bf00      	nop
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	4603      	mov	r3, r0
 800275e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff31 	bl	80025cc <__NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ffa2 	bl	80026c4 <SysTick_Config>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b084      	sub	sp, #16
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002798:	f7ff feb6 	bl	8002508 <HAL_GetTick>
 800279c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d008      	beq.n	80027bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2280      	movs	r2, #128	; 0x80
 80027ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e052      	b.n	8002862 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0216 	bic.w	r2, r2, #22
 80027ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d103      	bne.n	80027ec <HAL_DMA_Abort+0x62>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0208 	bic.w	r2, r2, #8
 80027fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0201 	bic.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280c:	e013      	b.n	8002836 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280e:	f7ff fe7b 	bl	8002508 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b05      	cmp	r3, #5
 800281a:	d90c      	bls.n	8002836 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2203      	movs	r2, #3
 8002826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e015      	b.n	8002862 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1e4      	bne.n	800280e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002848:	223f      	movs	r2, #63	; 0x3f
 800284a:	409a      	lsls	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d004      	beq.n	8002888 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2280      	movs	r2, #128	; 0x80
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e00c      	b.n	80028a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2205      	movs	r2, #5
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0201 	bic.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
	...

080028b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	; 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	e159      	b.n	8002b80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028cc:	2201      	movs	r2, #1
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028e0:	693a      	ldr	r2, [r7, #16]
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	f040 8148 	bne.w	8002b7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d005      	beq.n	8002902 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d130      	bne.n	8002964 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002938:	2201      	movs	r2, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 0201 	and.w	r2, r3, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	2b03      	cmp	r3, #3
 800296e:	d017      	beq.n	80029a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	2203      	movs	r2, #3
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4313      	orrs	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0303 	and.w	r3, r3, #3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d123      	bne.n	80029f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	08da      	lsrs	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3208      	adds	r2, #8
 80029b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	220f      	movs	r2, #15
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	08da      	lsrs	r2, r3, #3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3208      	adds	r2, #8
 80029ee:	69b9      	ldr	r1, [r7, #24]
 80029f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	2203      	movs	r2, #3
 8002a00:	fa02 f303 	lsl.w	r3, r2, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 0203 	and.w	r2, r3, #3
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 80a2 	beq.w	8002b7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	60fb      	str	r3, [r7, #12]
 8002a3a:	4b57      	ldr	r3, [pc, #348]	; (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	4a56      	ldr	r2, [pc, #344]	; (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a44:	6453      	str	r3, [r2, #68]	; 0x44
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <HAL_GPIO_Init+0x2e8>)
 8002a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a52:	4a52      	ldr	r2, [pc, #328]	; (8002b9c <HAL_GPIO_Init+0x2ec>)
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	089b      	lsrs	r3, r3, #2
 8002a58:	3302      	adds	r3, #2
 8002a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f003 0303 	and.w	r3, r3, #3
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	4013      	ands	r3, r2
 8002a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a49      	ldr	r2, [pc, #292]	; (8002ba0 <HAL_GPIO_Init+0x2f0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d019      	beq.n	8002ab2 <HAL_GPIO_Init+0x202>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a48      	ldr	r2, [pc, #288]	; (8002ba4 <HAL_GPIO_Init+0x2f4>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d013      	beq.n	8002aae <HAL_GPIO_Init+0x1fe>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a47      	ldr	r2, [pc, #284]	; (8002ba8 <HAL_GPIO_Init+0x2f8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d00d      	beq.n	8002aaa <HAL_GPIO_Init+0x1fa>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a46      	ldr	r2, [pc, #280]	; (8002bac <HAL_GPIO_Init+0x2fc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0x1f6>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a45      	ldr	r2, [pc, #276]	; (8002bb0 <HAL_GPIO_Init+0x300>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d101      	bne.n	8002aa2 <HAL_GPIO_Init+0x1f2>
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	e008      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e006      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e004      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e002      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_GPIO_Init+0x204>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f002 0203 	and.w	r2, r2, #3
 8002aba:	0092      	lsls	r2, r2, #2
 8002abc:	4093      	lsls	r3, r2
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ac4:	4935      	ldr	r1, [pc, #212]	; (8002b9c <HAL_GPIO_Init+0x2ec>)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	089b      	lsrs	r3, r3, #2
 8002aca:	3302      	adds	r3, #2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	43db      	mvns	r3, r3
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af6:	4a2f      	ldr	r2, [pc, #188]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b20:	4a24      	ldr	r2, [pc, #144]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b26:	4b23      	ldr	r3, [pc, #140]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b4a:	4a1a      	ldr	r2, [pc, #104]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b50:	4b18      	ldr	r3, [pc, #96]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b74:	4a0f      	ldr	r2, [pc, #60]	; (8002bb4 <HAL_GPIO_Init+0x304>)
 8002b76:	69bb      	ldr	r3, [r7, #24]
 8002b78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	2b0f      	cmp	r3, #15
 8002b84:	f67f aea2 	bls.w	80028cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b88:	bf00      	nop
 8002b8a:	bf00      	nop
 8002b8c:	3724      	adds	r7, #36	; 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40013800 	.word	0x40013800
 8002ba0:	40020000 	.word	0x40020000
 8002ba4:	40020400 	.word	0x40020400
 8002ba8:	40020800 	.word	0x40020800
 8002bac:	40020c00 	.word	0x40020c00
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40013c00 	.word	0x40013c00

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b085      	sub	sp, #20
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bfc:	887a      	ldrh	r2, [r7, #2]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4013      	ands	r3, r2
 8002c02:	041a      	lsls	r2, r3, #16
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43d9      	mvns	r1, r3
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	400b      	ands	r3, r1
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	619a      	str	r2, [r3, #24]
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
	...

08002c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e267      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d075      	beq.n	8002d2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c3e:	4b88      	ldr	r3, [pc, #544]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d00c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c4a:	4b85      	ldr	r3, [pc, #532]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c52:	2b08      	cmp	r3, #8
 8002c54:	d112      	bne.n	8002c7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4b82      	ldr	r3, [pc, #520]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	4b7e      	ldr	r3, [pc, #504]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d05b      	beq.n	8002d28 <HAL_RCC_OscConfig+0x108>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d157      	bne.n	8002d28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e242      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d106      	bne.n	8002c94 <HAL_RCC_OscConfig+0x74>
 8002c86:	4b76      	ldr	r3, [pc, #472]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a75      	ldr	r2, [pc, #468]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c90:	6013      	str	r3, [r2, #0]
 8002c92:	e01d      	b.n	8002cd0 <HAL_RCC_OscConfig+0xb0>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c9c:	d10c      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x98>
 8002c9e:	4b70      	ldr	r3, [pc, #448]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a6f      	ldr	r2, [pc, #444]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b6d      	ldr	r3, [pc, #436]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6c      	ldr	r2, [pc, #432]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e00b      	b.n	8002cd0 <HAL_RCC_OscConfig+0xb0>
 8002cb8:	4b69      	ldr	r3, [pc, #420]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a68      	ldr	r2, [pc, #416]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc2:	6013      	str	r3, [r2, #0]
 8002cc4:	4b66      	ldr	r3, [pc, #408]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a65      	ldr	r2, [pc, #404]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d013      	beq.n	8002d00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7ff fc16 	bl	8002508 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7ff fc12 	bl	8002508 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e207      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b5b      	ldr	r3, [pc, #364]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0xc0>
 8002cfe:	e014      	b.n	8002d2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7ff fc02 	bl	8002508 <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7ff fbfe 	bl	8002508 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	; 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e1f3      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1a:	4b51      	ldr	r3, [pc, #324]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1f0      	bne.n	8002d08 <HAL_RCC_OscConfig+0xe8>
 8002d26:	e000      	b.n	8002d2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d063      	beq.n	8002dfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d36:	4b4a      	ldr	r3, [pc, #296]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f003 030c 	and.w	r3, r3, #12
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d42:	4b47      	ldr	r3, [pc, #284]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d4a:	2b08      	cmp	r3, #8
 8002d4c:	d11c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b44      	ldr	r3, [pc, #272]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d116      	bne.n	8002d88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	4b41      	ldr	r3, [pc, #260]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d005      	beq.n	8002d72 <HAL_RCC_OscConfig+0x152>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e1c7      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d72:	4b3b      	ldr	r3, [pc, #236]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	4937      	ldr	r1, [pc, #220]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d86:	e03a      	b.n	8002dfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d020      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d90:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCC_OscConfig+0x244>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7ff fbb7 	bl	8002508 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d9e:	f7ff fbb3 	bl	8002508 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1a8      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db0:	4b2b      	ldr	r3, [pc, #172]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4925      	ldr	r1, [pc, #148]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	600b      	str	r3, [r1, #0]
 8002dd0:	e015      	b.n	8002dfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd2:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <HAL_RCC_OscConfig+0x244>)
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd8:	f7ff fb96 	bl	8002508 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de0:	f7ff fb92 	bl	8002508 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e187      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df2:	4b1b      	ldr	r3, [pc, #108]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1f0      	bne.n	8002de0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d036      	beq.n	8002e78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d016      	beq.n	8002e40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e12:	4b15      	ldr	r3, [pc, #84]	; (8002e68 <HAL_RCC_OscConfig+0x248>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e18:	f7ff fb76 	bl	8002508 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e20:	f7ff fb72 	bl	8002508 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e167      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e32:	4b0b      	ldr	r3, [pc, #44]	; (8002e60 <HAL_RCC_OscConfig+0x240>)
 8002e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0x200>
 8002e3e:	e01b      	b.n	8002e78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e40:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <HAL_RCC_OscConfig+0x248>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e46:	f7ff fb5f 	bl	8002508 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	e00e      	b.n	8002e6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e4e:	f7ff fb5b 	bl	8002508 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d907      	bls.n	8002e6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e150      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
 8002e60:	40023800 	.word	0x40023800
 8002e64:	42470000 	.word	0x42470000
 8002e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e6c:	4b88      	ldr	r3, [pc, #544]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1ea      	bne.n	8002e4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0304 	and.w	r3, r3, #4
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8097 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e86:	2300      	movs	r3, #0
 8002e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e8a:	4b81      	ldr	r3, [pc, #516]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	4b7d      	ldr	r3, [pc, #500]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	4a7c      	ldr	r2, [pc, #496]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea6:	4b7a      	ldr	r3, [pc, #488]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb6:	4b77      	ldr	r3, [pc, #476]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d118      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ec2:	4b74      	ldr	r3, [pc, #464]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a73      	ldr	r2, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ece:	f7ff fb1b 	bl	8002508 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ed6:	f7ff fb17 	bl	8002508 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e10c      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee8:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_OscConfig+0x474>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0f0      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d106      	bne.n	8002f0a <HAL_RCC_OscConfig+0x2ea>
 8002efc:	4b64      	ldr	r3, [pc, #400]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f00:	4a63      	ldr	r2, [pc, #396]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f02:	f043 0301 	orr.w	r3, r3, #1
 8002f06:	6713      	str	r3, [r2, #112]	; 0x70
 8002f08:	e01c      	b.n	8002f44 <HAL_RCC_OscConfig+0x324>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x30c>
 8002f12:	4b5f      	ldr	r3, [pc, #380]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a5e      	ldr	r2, [pc, #376]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f18:	f043 0304 	orr.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f1e:	4b5c      	ldr	r3, [pc, #368]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a5b      	ldr	r2, [pc, #364]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0x324>
 8002f2c:	4b58      	ldr	r3, [pc, #352]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a57      	ldr	r2, [pc, #348]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f32:	f023 0301 	bic.w	r3, r3, #1
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	4b55      	ldr	r3, [pc, #340]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a54      	ldr	r2, [pc, #336]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 0304 	bic.w	r3, r3, #4
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d015      	beq.n	8002f78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4c:	f7ff fadc 	bl	8002508 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f54:	f7ff fad8 	bl	8002508 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e0cb      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f6a:	4b49      	ldr	r3, [pc, #292]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0ee      	beq.n	8002f54 <HAL_RCC_OscConfig+0x334>
 8002f76:	e014      	b.n	8002fa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f78:	f7ff fac6 	bl	8002508 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f80:	f7ff fac2 	bl	8002508 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e0b5      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f96:	4b3e      	ldr	r3, [pc, #248]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ee      	bne.n	8002f80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa8:	4b39      	ldr	r3, [pc, #228]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	4a38      	ldr	r2, [pc, #224]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	f000 80a1 	beq.w	8003100 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fbe:	4b34      	ldr	r3, [pc, #208]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d05c      	beq.n	8003084 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d141      	bne.n	8003056 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b31      	ldr	r3, [pc, #196]	; (8003098 <HAL_RCC_OscConfig+0x478>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7ff fa96 	bl	8002508 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7ff fa92 	bl	8002508 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e087      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff2:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69da      	ldr	r2, [r3, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	019b      	lsls	r3, r3, #6
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	085b      	lsrs	r3, r3, #1
 8003016:	3b01      	subs	r3, #1
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	061b      	lsls	r3, r3, #24
 8003022:	491b      	ldr	r1, [pc, #108]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x478>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7ff fa6b 	bl	8002508 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003036:	f7ff fa67 	bl	8002508 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e05c      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x416>
 8003054:	e054      	b.n	8003100 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b10      	ldr	r3, [pc, #64]	; (8003098 <HAL_RCC_OscConfig+0x478>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7ff fa54 	bl	8002508 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003064:	f7ff fa50 	bl	8002508 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e045      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003076:	4b06      	ldr	r3, [pc, #24]	; (8003090 <HAL_RCC_OscConfig+0x470>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x444>
 8003082:	e03d      	b.n	8003100 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e038      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
 8003090:	40023800 	.word	0x40023800
 8003094:	40007000 	.word	0x40007000
 8003098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x4ec>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d028      	beq.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d121      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d11a      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030cc:	4013      	ands	r3, r2
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d111      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	085b      	lsrs	r3, r3, #1
 80030e4:	3b01      	subs	r3, #1
 80030e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d107      	bne.n	80030fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800

08003110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0cc      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003124:	4b68      	ldr	r3, [pc, #416]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0307 	and.w	r3, r3, #7
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d90c      	bls.n	800314c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0b8      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d020      	beq.n	800319a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0304 	and.w	r3, r3, #4
 8003160:	2b00      	cmp	r3, #0
 8003162:	d005      	beq.n	8003170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003164:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4a58      	ldr	r2, [pc, #352]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800316a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800316e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0308 	and.w	r3, r3, #8
 8003178:	2b00      	cmp	r3, #0
 800317a:	d005      	beq.n	8003188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800317c:	4b53      	ldr	r3, [pc, #332]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	4a52      	ldr	r2, [pc, #328]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003188:	4b50      	ldr	r3, [pc, #320]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	494d      	ldr	r1, [pc, #308]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	4313      	orrs	r3, r2
 8003198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d044      	beq.n	8003230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d107      	bne.n	80031be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	4b47      	ldr	r3, [pc, #284]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d119      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e07f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d003      	beq.n	80031ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d107      	bne.n	80031de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ce:	4b3f      	ldr	r3, [pc, #252]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e06f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031de:	4b3b      	ldr	r3, [pc, #236]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e067      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ee:	4b37      	ldr	r3, [pc, #220]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f023 0203 	bic.w	r2, r3, #3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4934      	ldr	r1, [pc, #208]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003200:	f7ff f982 	bl	8002508 <HAL_GetTick>
 8003204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	e00a      	b.n	800321e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003208:	f7ff f97e 	bl	8002508 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	f241 3288 	movw	r2, #5000	; 0x1388
 8003216:	4293      	cmp	r3, r2
 8003218:	d901      	bls.n	800321e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e04f      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321e:	4b2b      	ldr	r3, [pc, #172]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 020c 	and.w	r2, r3, #12
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	429a      	cmp	r2, r3
 800322e:	d1eb      	bne.n	8003208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003230:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d20c      	bcs.n	8003258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b22      	ldr	r3, [pc, #136]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b20      	ldr	r3, [pc, #128]	; (80032c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e032      	b.n	80032be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d008      	beq.n	8003276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003264:	4b19      	ldr	r3, [pc, #100]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	4916      	ldr	r1, [pc, #88]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d009      	beq.n	8003296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003282:	4b12      	ldr	r3, [pc, #72]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003296:	f000 f821 	bl	80032dc <HAL_RCC_GetSysClockFreq>
 800329a:	4602      	mov	r2, r0
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	490a      	ldr	r1, [pc, #40]	; (80032d0 <HAL_RCC_ClockConfig+0x1c0>)
 80032a8:	5ccb      	ldrb	r3, [r1, r3]
 80032aa:	fa22 f303 	lsr.w	r3, r2, r3
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <HAL_RCC_ClockConfig+0x1c4>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032b2:	4b09      	ldr	r3, [pc, #36]	; (80032d8 <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f8e2 	bl	8002480 <HAL_InitTick>

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023c00 	.word	0x40023c00
 80032cc:	40023800 	.word	0x40023800
 80032d0:	08004f18 	.word	0x08004f18
 80032d4:	20000000 	.word	0x20000000
 80032d8:	20000004 	.word	0x20000004

080032dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032e0:	b090      	sub	sp, #64	; 0x40
 80032e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
 80032e8:	2300      	movs	r3, #0
 80032ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032ec:	2300      	movs	r3, #0
 80032ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032f4:	4b59      	ldr	r3, [pc, #356]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d00d      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x40>
 8003300:	2b08      	cmp	r3, #8
 8003302:	f200 80a1 	bhi.w	8003448 <HAL_RCC_GetSysClockFreq+0x16c>
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x34>
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x3a>
 800330e:	e09b      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003310:	4b53      	ldr	r3, [pc, #332]	; (8003460 <HAL_RCC_GetSysClockFreq+0x184>)
 8003312:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003314:	e09b      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003316:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800331a:	e098      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800331c:	4b4f      	ldr	r3, [pc, #316]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003326:	4b4d      	ldr	r3, [pc, #308]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003332:	4b4a      	ldr	r3, [pc, #296]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	099b      	lsrs	r3, r3, #6
 8003338:	2200      	movs	r2, #0
 800333a:	623b      	str	r3, [r7, #32]
 800333c:	627a      	str	r2, [r7, #36]	; 0x24
 800333e:	6a3b      	ldr	r3, [r7, #32]
 8003340:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003344:	2100      	movs	r1, #0
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003348:	fb03 f201 	mul.w	r2, r3, r1
 800334c:	2300      	movs	r3, #0
 800334e:	fb00 f303 	mul.w	r3, r0, r3
 8003352:	4413      	add	r3, r2
 8003354:	4a43      	ldr	r2, [pc, #268]	; (8003464 <HAL_RCC_GetSysClockFreq+0x188>)
 8003356:	fba0 1202 	umull	r1, r2, r0, r2
 800335a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800335c:	460a      	mov	r2, r1
 800335e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003360:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003362:	4413      	add	r3, r2
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003368:	2200      	movs	r2, #0
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	61fa      	str	r2, [r7, #28]
 800336e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003372:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003376:	f7fc ff2f 	bl	80001d8 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4613      	mov	r3, r2
 8003380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003382:	e053      	b.n	800342c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003384:	4b35      	ldr	r3, [pc, #212]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	2200      	movs	r2, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	617a      	str	r2, [r7, #20]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003396:	f04f 0b00 	mov.w	fp, #0
 800339a:	4652      	mov	r2, sl
 800339c:	465b      	mov	r3, fp
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	0159      	lsls	r1, r3, #5
 80033a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ac:	0150      	lsls	r0, r2, #5
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	ebb2 080a 	subs.w	r8, r2, sl
 80033b6:	eb63 090b 	sbc.w	r9, r3, fp
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033ce:	ebb2 0408 	subs.w	r4, r2, r8
 80033d2:	eb63 0509 	sbc.w	r5, r3, r9
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	00eb      	lsls	r3, r5, #3
 80033e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033e4:	00e2      	lsls	r2, r4, #3
 80033e6:	4614      	mov	r4, r2
 80033e8:	461d      	mov	r5, r3
 80033ea:	eb14 030a 	adds.w	r3, r4, sl
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	eb45 030b 	adc.w	r3, r5, fp
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	f04f 0200 	mov.w	r2, #0
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003402:	4629      	mov	r1, r5
 8003404:	028b      	lsls	r3, r1, #10
 8003406:	4621      	mov	r1, r4
 8003408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800340c:	4621      	mov	r1, r4
 800340e:	028a      	lsls	r2, r1, #10
 8003410:	4610      	mov	r0, r2
 8003412:	4619      	mov	r1, r3
 8003414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003416:	2200      	movs	r2, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	60fa      	str	r2, [r7, #12]
 800341c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003420:	f7fc feda 	bl	80001d8 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <HAL_RCC_GetSysClockFreq+0x180>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	0c1b      	lsrs	r3, r3, #16
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	3301      	adds	r3, #1
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800343c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	fbb2 f3f3 	udiv	r3, r2, r3
 8003444:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003446:	e002      	b.n	800344e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003448:	4b05      	ldr	r3, [pc, #20]	; (8003460 <HAL_RCC_GetSysClockFreq+0x184>)
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800344c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003450:	4618      	mov	r0, r3
 8003452:	3740      	adds	r7, #64	; 0x40
 8003454:	46bd      	mov	sp, r7
 8003456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	00f42400 	.word	0x00f42400
 8003464:	017d7840 	.word	0x017d7840

08003468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <HAL_RCC_GetHCLKFreq+0x14>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20000000 	.word	0x20000000

08003480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003484:	f7ff fff0 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 8003488:	4602      	mov	r2, r0
 800348a:	4b05      	ldr	r3, [pc, #20]	; (80034a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	0a9b      	lsrs	r3, r3, #10
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	4903      	ldr	r1, [pc, #12]	; (80034a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003496:	5ccb      	ldrb	r3, [r1, r3]
 8003498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	40023800 	.word	0x40023800
 80034a4:	08004f28 	.word	0x08004f28

080034a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034ac:	f7ff ffdc 	bl	8003468 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0b5b      	lsrs	r3, r3, #13
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	; (80034cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08004f28 	.word	0x08004f28

080034d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e041      	b.n	8003566 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fe fed6 	bl	80022a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3304      	adds	r3, #4
 800350c:	4619      	mov	r1, r3
 800350e:	4610      	mov	r0, r2
 8003510:	f000 fab6 	bl	8003a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d001      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e044      	b.n	8003612 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0201 	orr.w	r2, r2, #1
 800359e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <HAL_TIM_Base_Start_IT+0xb0>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d018      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b2:	d013      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <HAL_TIM_Base_Start_IT+0xb4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00e      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a19      	ldr	r2, [pc, #100]	; (8003628 <HAL_TIM_Base_Start_IT+0xb8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d009      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a17      	ldr	r2, [pc, #92]	; (800362c <HAL_TIM_Base_Start_IT+0xbc>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d004      	beq.n	80035dc <HAL_TIM_Base_Start_IT+0x6c>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a16      	ldr	r2, [pc, #88]	; (8003630 <HAL_TIM_Base_Start_IT+0xc0>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d111      	bne.n	8003600 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b06      	cmp	r3, #6
 80035ec:	d010      	beq.n	8003610 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f042 0201 	orr.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	e007      	b.n	8003610 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	40010000 	.word	0x40010000
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800
 800362c:	40000c00 	.word	0x40000c00
 8003630:	40014000 	.word	0x40014000

08003634 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0201 	bic.w	r2, r2, #1
 800364a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	f241 1311 	movw	r3, #4369	; 0x1111
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10f      	bne.n	800367c <HAL_TIM_Base_Stop_IT+0x48>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	f240 4344 	movw	r3, #1092	; 0x444
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_TIM_Base_Stop_IT+0x48>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	691b      	ldr	r3, [r3, #16]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d122      	bne.n	80036ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d11b      	bne.n	80036ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f06f 0202 	mvn.w	r2, #2
 80036be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9b5 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 80036da:	e005      	b.n	80036e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f9a7 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f9b8 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f003 0304 	and.w	r3, r3, #4
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d122      	bne.n	8003742 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d11b      	bne.n	8003742 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f06f 0204 	mvn.w	r2, #4
 8003712:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f98b 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 800372e:	e005      	b.n	800373c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f97d 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 f98e 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b08      	cmp	r3, #8
 800374e:	d122      	bne.n	8003796 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f003 0308 	and.w	r3, r3, #8
 800375a:	2b08      	cmp	r3, #8
 800375c:	d11b      	bne.n	8003796 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f06f 0208 	mvn.w	r2, #8
 8003766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2204      	movs	r2, #4
 800376c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f961 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 8003782:	e005      	b.n	8003790 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f953 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f964 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	f003 0310 	and.w	r3, r3, #16
 80037a0:	2b10      	cmp	r3, #16
 80037a2:	d122      	bne.n	80037ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0310 	and.w	r3, r3, #16
 80037ae:	2b10      	cmp	r3, #16
 80037b0:	d11b      	bne.n	80037ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f06f 0210 	mvn.w	r2, #16
 80037ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2208      	movs	r2, #8
 80037c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d003      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f937 	bl	8003a44 <HAL_TIM_IC_CaptureCallback>
 80037d6:	e005      	b.n	80037e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f929 	bl	8003a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 f93a 	bl	8003a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d10e      	bne.n	8003816 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b01      	cmp	r3, #1
 8003804:	d107      	bne.n	8003816 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f06f 0201 	mvn.w	r2, #1
 800380e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7fc ffcd 	bl	80007b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003820:	2b80      	cmp	r3, #128	; 0x80
 8003822:	d10e      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800382e:	2b80      	cmp	r3, #128	; 0x80
 8003830:	d107      	bne.n	8003842 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800383a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 fab1 	bl	8003da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d10e      	bne.n	800386e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d107      	bne.n	800386e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 f8ff 	bl	8003a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b20      	cmp	r3, #32
 800387a:	d10e      	bne.n	800389a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b20      	cmp	r3, #32
 8003888:	d107      	bne.n	800389a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f06f 0220 	mvn.w	r2, #32
 8003892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fa7b 	bl	8003d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_TIM_ConfigClockSource+0x1c>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0b4      	b.n	8003a28 <HAL_TIM_ConfigClockSource+0x186>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2202      	movs	r2, #2
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68ba      	ldr	r2, [r7, #8]
 80038ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038f6:	d03e      	beq.n	8003976 <HAL_TIM_ConfigClockSource+0xd4>
 80038f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038fc:	f200 8087 	bhi.w	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003904:	f000 8086 	beq.w	8003a14 <HAL_TIM_ConfigClockSource+0x172>
 8003908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800390c:	d87f      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 800390e:	2b70      	cmp	r3, #112	; 0x70
 8003910:	d01a      	beq.n	8003948 <HAL_TIM_ConfigClockSource+0xa6>
 8003912:	2b70      	cmp	r3, #112	; 0x70
 8003914:	d87b      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 8003916:	2b60      	cmp	r3, #96	; 0x60
 8003918:	d050      	beq.n	80039bc <HAL_TIM_ConfigClockSource+0x11a>
 800391a:	2b60      	cmp	r3, #96	; 0x60
 800391c:	d877      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 800391e:	2b50      	cmp	r3, #80	; 0x50
 8003920:	d03c      	beq.n	800399c <HAL_TIM_ConfigClockSource+0xfa>
 8003922:	2b50      	cmp	r3, #80	; 0x50
 8003924:	d873      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 8003926:	2b40      	cmp	r3, #64	; 0x40
 8003928:	d058      	beq.n	80039dc <HAL_TIM_ConfigClockSource+0x13a>
 800392a:	2b40      	cmp	r3, #64	; 0x40
 800392c:	d86f      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 800392e:	2b30      	cmp	r3, #48	; 0x30
 8003930:	d064      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0x15a>
 8003932:	2b30      	cmp	r3, #48	; 0x30
 8003934:	d86b      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 8003936:	2b20      	cmp	r3, #32
 8003938:	d060      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0x15a>
 800393a:	2b20      	cmp	r3, #32
 800393c:	d867      	bhi.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d05c      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0x15a>
 8003942:	2b10      	cmp	r3, #16
 8003944:	d05a      	beq.n	80039fc <HAL_TIM_ConfigClockSource+0x15a>
 8003946:	e062      	b.n	8003a0e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6899      	ldr	r1, [r3, #8]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f000 f98c 	bl	8003c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800396a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	609a      	str	r2, [r3, #8]
      break;
 8003974:	e04f      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6899      	ldr	r1, [r3, #8]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f000 f975 	bl	8003c74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003998:	609a      	str	r2, [r3, #8]
      break;
 800399a:	e03c      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6818      	ldr	r0, [r3, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	6859      	ldr	r1, [r3, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	461a      	mov	r2, r3
 80039aa:	f000 f8e9 	bl	8003b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2150      	movs	r1, #80	; 0x50
 80039b4:	4618      	mov	r0, r3
 80039b6:	f000 f942 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 80039ba:	e02c      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6818      	ldr	r0, [r3, #0]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	6859      	ldr	r1, [r3, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	461a      	mov	r2, r3
 80039ca:	f000 f908 	bl	8003bde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2160      	movs	r1, #96	; 0x60
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f932 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 80039da:	e01c      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	6859      	ldr	r1, [r3, #4]
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	461a      	mov	r2, r3
 80039ea:	f000 f8c9 	bl	8003b80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2140      	movs	r1, #64	; 0x40
 80039f4:	4618      	mov	r0, r3
 80039f6:	f000 f922 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 80039fa:	e00c      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	4610      	mov	r0, r2
 8003a08:	f000 f919 	bl	8003c3e <TIM_ITRx_SetConfig>
      break;
 8003a0c:	e003      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	73fb      	strb	r3, [r7, #15]
      break;
 8003a12:	e000      	b.n	8003a16 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a14:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a38:	bf00      	nop
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a4c:	bf00      	nop
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a34      	ldr	r2, [pc, #208]	; (8003b64 <TIM_Base_SetConfig+0xe4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00f      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d00b      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a31      	ldr	r2, [pc, #196]	; (8003b68 <TIM_Base_SetConfig+0xe8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d007      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <TIM_Base_SetConfig+0xec>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d003      	beq.n	8003ab8 <TIM_Base_SetConfig+0x38>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <TIM_Base_SetConfig+0xf0>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d108      	bne.n	8003aca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a25      	ldr	r2, [pc, #148]	; (8003b64 <TIM_Base_SetConfig+0xe4>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d01b      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ad8:	d017      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <TIM_Base_SetConfig+0xe8>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <TIM_Base_SetConfig+0xec>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d00f      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <TIM_Base_SetConfig+0xf0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00b      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <TIM_Base_SetConfig+0xf4>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a1e      	ldr	r2, [pc, #120]	; (8003b78 <TIM_Base_SetConfig+0xf8>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d003      	beq.n	8003b0a <TIM_Base_SetConfig+0x8a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a1d      	ldr	r2, [pc, #116]	; (8003b7c <TIM_Base_SetConfig+0xfc>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a08      	ldr	r2, [pc, #32]	; (8003b64 <TIM_Base_SetConfig+0xe4>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	615a      	str	r2, [r3, #20]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40000c00 	.word	0x40000c00
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800

08003b80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	f023 0201 	bic.w	r2, r3, #1
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003baa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f023 030a 	bic.w	r3, r3, #10
 8003bbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	621a      	str	r2, [r3, #32]
}
 8003bd2:	bf00      	nop
 8003bd4:	371c      	adds	r7, #28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b087      	sub	sp, #28
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	f023 0210 	bic.w	r2, r3, #16
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	f043 0307 	orr.w	r3, r3, #7
 8003c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	609a      	str	r2, [r3, #8]
}
 8003ca8:	bf00      	nop
 8003caa:	371c      	adds	r7, #28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e050      	b.n	8003d6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a1c      	ldr	r2, [pc, #112]	; (8003d7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d018      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d18:	d013      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a18      	ldr	r2, [pc, #96]	; (8003d80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d00e      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d009      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a15      	ldr	r2, [pc, #84]	; (8003d88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d004      	beq.n	8003d42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10c      	bne.n	8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68ba      	ldr	r2, [r7, #8]
 8003d5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3714      	adds	r7, #20
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40010000 	.word	0x40010000
 8003d80:	40000400 	.word	0x40000400
 8003d84:	40000800 	.word	0x40000800
 8003d88:	40000c00 	.word	0x40000c00
 8003d8c:	40014000 	.word	0x40014000

08003d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d98:	bf00      	nop
 8003d9a:	370c      	adds	r7, #12
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da2:	4770      	bx	lr

08003da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e03f      	b.n	8003e4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f7fe fab2 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2224      	movs	r2, #36	; 0x24
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fddf 	bl	80049c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68da      	ldr	r2, [r3, #12]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b08a      	sub	sp, #40	; 0x28
 8003e56:	af02      	add	r7, sp, #8
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	603b      	str	r3, [r7, #0]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b20      	cmp	r3, #32
 8003e70:	d17c      	bne.n	8003f6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <HAL_UART_Transmit+0x2c>
 8003e78:	88fb      	ldrh	r3, [r7, #6]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e075      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_UART_Transmit+0x3e>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e06e      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2221      	movs	r2, #33	; 0x21
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ea6:	f7fe fb2f 	bl	8002508 <HAL_GetTick>
 8003eaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	88fa      	ldrh	r2, [r7, #6]
 8003eb0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	88fa      	ldrh	r2, [r7, #6]
 8003eb6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ec0:	d108      	bne.n	8003ed4 <HAL_UART_Transmit+0x82>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d104      	bne.n	8003ed4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	e003      	b.n	8003edc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003ee4:	e02a      	b.n	8003f3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	2200      	movs	r2, #0
 8003eee:	2180      	movs	r1, #128	; 0x80
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fb1f 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e036      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	3302      	adds	r3, #2
 8003f1a:	61bb      	str	r3, [r7, #24]
 8003f1c:	e007      	b.n	8003f2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	781a      	ldrb	r2, [r3, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1cf      	bne.n	8003ee6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	2140      	movs	r1, #64	; 0x40
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 faef 	bl	8004534 <UART_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e006      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e000      	b.n	8003f6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f6c:	2302      	movs	r3, #2
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3720      	adds	r7, #32
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	60b9      	str	r1, [r7, #8]
 8003f80:	4613      	mov	r3, r2
 8003f82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b20      	cmp	r3, #32
 8003f8e:	d11d      	bne.n	8003fcc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_UART_Receive_IT+0x26>
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e016      	b.n	8003fce <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <HAL_UART_Receive_IT+0x38>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e00f      	b.n	8003fce <HAL_UART_Receive_IT+0x58>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	68b9      	ldr	r1, [r7, #8]
 8003fc2:	68f8      	ldr	r0, [r7, #12]
 8003fc4:	f000 fb24 	bl	8004610 <UART_Start_Receive_IT>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	e000      	b.n	8003fce <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b0ba      	sub	sp, #232	; 0xe8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10f      	bne.n	800403e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_UART_IRQHandler+0x66>
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 fc07 	bl	800484a <UART_Receive_IT>
      return;
 800403c:	e256      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800403e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80de 	beq.w	8004204 <HAL_UART_IRQHandler+0x22c>
 8004048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d106      	bne.n	8004062 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004058:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80d1 	beq.w	8004204 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00b      	beq.n	8004086 <HAL_UART_IRQHandler+0xae>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f043 0201 	orr.w	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00b      	beq.n	80040aa <HAL_UART_IRQHandler+0xd2>
 8004092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d005      	beq.n	80040aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	f043 0202 	orr.w	r2, r3, #2
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00b      	beq.n	80040ce <HAL_UART_IRQHandler+0xf6>
 80040b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d005      	beq.n	80040ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d011      	beq.n	80040fe <HAL_UART_IRQHandler+0x126>
 80040da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d105      	bne.n	80040f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d005      	beq.n	80040fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f6:	f043 0208 	orr.w	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 81ed 	beq.w	80044e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800410c:	f003 0320 	and.w	r3, r3, #32
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_UART_IRQHandler+0x14e>
 8004114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004118:	f003 0320 	and.w	r3, r3, #32
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fb92 	bl	800484a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	f003 0308 	and.w	r3, r3, #8
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <HAL_UART_IRQHandler+0x17a>
 800414a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d04f      	beq.n	80041f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fa9a 	bl	800468c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004162:	2b40      	cmp	r3, #64	; 0x40
 8004164:	d141      	bne.n	80041ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3314      	adds	r3, #20
 800416c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004170:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800417c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004180:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3314      	adds	r3, #20
 800418e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004192:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800419e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041a2:	e841 2300 	strex	r3, r2, [r1]
 80041a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1d9      	bne.n	8004166 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d013      	beq.n	80041e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	4a7d      	ldr	r2, [pc, #500]	; (80043b4 <HAL_UART_IRQHandler+0x3dc>)
 80041c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fe fb4f 	bl	800286a <HAL_DMA_Abort_IT>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d016      	beq.n	8004200 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041dc:	4610      	mov	r0, r2
 80041de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e0:	e00e      	b.n	8004200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f990 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	e00a      	b.n	8004200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f98c 	bl	8004508 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f0:	e006      	b.n	8004200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f988 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80041fe:	e170      	b.n	80044e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004200:	bf00      	nop
    return;
 8004202:	e16e      	b.n	80044e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	f040 814a 	bne.w	80044a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800420e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	f000 8143 	beq.w	80044a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004220:	f003 0310 	and.w	r3, r3, #16
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 813c 	beq.w	80044a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422a:	2300      	movs	r3, #0
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800424a:	2b40      	cmp	r3, #64	; 0x40
 800424c:	f040 80b4 	bne.w	80043b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800425c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 8140 	beq.w	80044e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800426a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800426e:	429a      	cmp	r2, r3
 8004270:	f080 8139 	bcs.w	80044e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800427a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004286:	f000 8088 	beq.w	800439a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	330c      	adds	r3, #12
 8004290:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004298:	e853 3f00 	ldrex	r3, [r3]
 800429c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	330c      	adds	r3, #12
 80042b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042c6:	e841 2300 	strex	r3, r2, [r1]
 80042ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1d9      	bne.n	800428a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004302:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004306:	e841 2300 	strex	r3, r2, [r1]
 800430a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800430c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1e1      	bne.n	80042d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3314      	adds	r3, #20
 8004318:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800431c:	e853 3f00 	ldrex	r3, [r3]
 8004320:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004324:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004336:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004338:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800433c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800433e:	e841 2300 	strex	r3, r2, [r1]
 8004342:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1e3      	bne.n	8004312 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2220      	movs	r2, #32
 800434e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	330c      	adds	r3, #12
 800435e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800436a:	f023 0310 	bic.w	r3, r3, #16
 800436e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	330c      	adds	r3, #12
 8004378:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800437c:	65ba      	str	r2, [r7, #88]	; 0x58
 800437e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004382:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800438a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e3      	bne.n	8004358 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	4618      	mov	r0, r3
 8004396:	f7fe f9f8 	bl	800278a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8b6 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b0:	e099      	b.n	80044e6 <HAL_UART_IRQHandler+0x50e>
 80043b2:	bf00      	nop
 80043b4:	08004753 	.word	0x08004753
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808b 	beq.w	80044ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80043d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8086 	beq.w	80044ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004402:	647a      	str	r2, [r7, #68]	; 0x44
 8004404:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e3      	bne.n	80043de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800443a:	633a      	str	r2, [r7, #48]	; 0x30
 800443c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004440:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e3      	bne.n	8004416 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004480:	61fa      	str	r2, [r7, #28]
 8004482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	617b      	str	r3, [r7, #20]
   return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e3      	bne.n	800445c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004494:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f83e 	bl	800451c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a0:	e023      	b.n	80044ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <HAL_UART_IRQHandler+0x4ea>
 80044ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f95d 	bl	800477a <UART_Transmit_IT>
    return;
 80044c0:	e014      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <HAL_UART_IRQHandler+0x514>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f99d 	bl	800481a <UART_EndTransmit_IT>
    return;
 80044e0:	e004      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
    return;
 80044e2:	bf00      	nop
 80044e4:	e002      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
      return;
 80044e6:	bf00      	nop
 80044e8:	e000      	b.n	80044ec <HAL_UART_IRQHandler+0x514>
      return;
 80044ea:	bf00      	nop
  }
}
 80044ec:	37e8      	adds	r7, #232	; 0xe8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop

080044f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b090      	sub	sp, #64	; 0x40
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	4613      	mov	r3, r2
 8004542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004544:	e050      	b.n	80045e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454c:	d04c      	beq.n	80045e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800454e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004550:	2b00      	cmp	r3, #0
 8004552:	d007      	beq.n	8004564 <UART_WaitOnFlagUntilTimeout+0x30>
 8004554:	f7fd ffd8 	bl	8002508 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004560:	429a      	cmp	r2, r3
 8004562:	d241      	bcs.n	80045e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800457a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	330c      	adds	r3, #12
 8004582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004584:	637a      	str	r2, [r7, #52]	; 0x34
 8004586:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800458a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	e853 3f00 	ldrex	r3, [r3]
 80045a6:	613b      	str	r3, [r7, #16]
   return(result);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f023 0301 	bic.w	r3, r3, #1
 80045ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3314      	adds	r3, #20
 80045b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045b8:	623a      	str	r2, [r7, #32]
 80045ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045bc:	69f9      	ldr	r1, [r7, #28]
 80045be:	6a3a      	ldr	r2, [r7, #32]
 80045c0:	e841 2300 	strex	r3, r2, [r1]
 80045c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1e5      	bne.n	8004598 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e00f      	b.n	8004608 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	4013      	ands	r3, r2
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	bf0c      	ite	eq
 80045f8:	2301      	moveq	r3, #1
 80045fa:	2300      	movne	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	461a      	mov	r2, r3
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	429a      	cmp	r2, r3
 8004604:	d09f      	beq.n	8004546 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	3740      	adds	r7, #64	; 0x40
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	88fa      	ldrh	r2, [r7, #6]
 8004628:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	88fa      	ldrh	r2, [r7, #6]
 800462e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2222      	movs	r2, #34	; 0x22
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68da      	ldr	r2, [r3, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695a      	ldr	r2, [r3, #20]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68da      	ldr	r2, [r3, #12]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f042 0220 	orr.w	r2, r2, #32
 800467c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3714      	adds	r7, #20
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800468c:	b480      	push	{r7}
 800468e:	b095      	sub	sp, #84	; 0x54
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	330c      	adds	r3, #12
 800469a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469e:	e853 3f00 	ldrex	r3, [r3]
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80046a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	330c      	adds	r3, #12
 80046b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80046b4:	643a      	str	r2, [r7, #64]	; 0x40
 80046b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046bc:	e841 2300 	strex	r3, r2, [r1]
 80046c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d1e5      	bne.n	8004694 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	3314      	adds	r3, #20
 80046ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f023 0301 	bic.w	r3, r3, #1
 80046de:	64bb      	str	r3, [r7, #72]	; 0x48
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	3314      	adds	r3, #20
 80046e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e5      	bne.n	80046c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004700:	2b01      	cmp	r3, #1
 8004702:	d119      	bne.n	8004738 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	e853 3f00 	ldrex	r3, [r3]
 8004712:	60bb      	str	r3, [r7, #8]
   return(result);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f023 0310 	bic.w	r3, r3, #16
 800471a:	647b      	str	r3, [r7, #68]	; 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	330c      	adds	r3, #12
 8004722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004724:	61ba      	str	r2, [r7, #24]
 8004726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004728:	6979      	ldr	r1, [r7, #20]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	e841 2300 	strex	r3, r2, [r1]
 8004730:	613b      	str	r3, [r7, #16]
   return(result);
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d1e5      	bne.n	8004704 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2220      	movs	r2, #32
 800473c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004746:	bf00      	nop
 8004748:	3754      	adds	r7, #84	; 0x54
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f7ff fecb 	bl	8004508 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004772:	bf00      	nop
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}

0800477a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b21      	cmp	r3, #33	; 0x21
 800478c:	d13e      	bne.n	800480c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d114      	bne.n	80047c2 <UART_Transmit_IT+0x48>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d110      	bne.n	80047c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a1b      	ldr	r3, [r3, #32]
 80047a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	881b      	ldrh	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	1c9a      	adds	r2, r3, #2
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	621a      	str	r2, [r3, #32]
 80047c0:	e008      	b.n	80047d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6211      	str	r1, [r2, #32]
 80047cc:	781a      	ldrb	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047d8:	b29b      	uxth	r3, r3
 80047da:	3b01      	subs	r3, #1
 80047dc:	b29b      	uxth	r3, r3
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4619      	mov	r1, r3
 80047e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10f      	bne.n	8004808 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004806:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	e000      	b.n	800480e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800480c:	2302      	movs	r3, #2
  }
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b082      	sub	sp, #8
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004830:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fe5a 	bl	80044f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}

0800484a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	b08c      	sub	sp, #48	; 0x30
 800484e:	af00      	add	r7, sp, #0
 8004850:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b22      	cmp	r3, #34	; 0x22
 800485c:	f040 80ab 	bne.w	80049b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004868:	d117      	bne.n	800489a <UART_Receive_IT+0x50>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d113      	bne.n	800489a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004872:	2300      	movs	r3, #0
 8004874:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004888:	b29a      	uxth	r2, r3
 800488a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28
 8004898:	e026      	b.n	80048e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80048a0:	2300      	movs	r3, #0
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ac:	d007      	beq.n	80048be <UART_Receive_IT+0x74>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10a      	bne.n	80048cc <UART_Receive_IT+0x82>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	691b      	ldr	r3, [r3, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e008      	b.n	80048de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4619      	mov	r1, r3
 80048f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d15a      	bne.n	80049b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0220 	bic.w	r2, r2, #32
 800490a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	68da      	ldr	r2, [r3, #12]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004938:	2b01      	cmp	r3, #1
 800493a:	d135      	bne.n	80049a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f023 0310 	bic.w	r3, r3, #16
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	623a      	str	r2, [r7, #32]
 8004964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004966:	69f9      	ldr	r1, [r7, #28]
 8004968:	6a3a      	ldr	r2, [r7, #32]
 800496a:	e841 2300 	strex	r3, r2, [r1]
 800496e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1e5      	bne.n	8004942 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d10a      	bne.n	800499a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fdbb 	bl	800451c <HAL_UARTEx_RxEventCallback>
 80049a6:	e002      	b.n	80049ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f7fb ff11 	bl	80007d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80049ae:	2300      	movs	r3, #0
 80049b0:	e002      	b.n	80049b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80049b2:	2300      	movs	r3, #0
 80049b4:	e000      	b.n	80049b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80049b6:	2302      	movs	r3, #2
  }
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3730      	adds	r7, #48	; 0x30
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049c4:	b0c0      	sub	sp, #256	; 0x100
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049dc:	68d9      	ldr	r1, [r3, #12]
 80049de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	ea40 0301 	orr.w	r3, r0, r1
 80049e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a18:	f021 010c 	bic.w	r1, r1, #12
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004a26:	430b      	orrs	r3, r1
 8004a28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a3a:	6999      	ldr	r1, [r3, #24]
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	ea40 0301 	orr.w	r3, r0, r1
 8004a46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b8f      	ldr	r3, [pc, #572]	; (8004c8c <UART_SetConfig+0x2cc>)
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d005      	beq.n	8004a60 <UART_SetConfig+0xa0>
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	4b8d      	ldr	r3, [pc, #564]	; (8004c90 <UART_SetConfig+0x2d0>)
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d104      	bne.n	8004a6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a60:	f7fe fd22 	bl	80034a8 <HAL_RCC_GetPCLK2Freq>
 8004a64:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004a68:	e003      	b.n	8004a72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a6a:	f7fe fd09 	bl	8003480 <HAL_RCC_GetPCLK1Freq>
 8004a6e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7c:	f040 810c 	bne.w	8004c98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a84:	2200      	movs	r2, #0
 8004a86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004a8a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004a8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	1891      	adds	r1, r2, r2
 8004a98:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a9a:	415b      	adcs	r3, r3
 8004a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004aa2:	4621      	mov	r1, r4
 8004aa4:	eb12 0801 	adds.w	r8, r2, r1
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	eb43 0901 	adc.w	r9, r3, r1
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ac2:	4690      	mov	r8, r2
 8004ac4:	4699      	mov	r9, r3
 8004ac6:	4623      	mov	r3, r4
 8004ac8:	eb18 0303 	adds.w	r3, r8, r3
 8004acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ad0:	462b      	mov	r3, r5
 8004ad2:	eb49 0303 	adc.w	r3, r9, r3
 8004ad6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ae6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004aea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004aee:	460b      	mov	r3, r1
 8004af0:	18db      	adds	r3, r3, r3
 8004af2:	653b      	str	r3, [r7, #80]	; 0x50
 8004af4:	4613      	mov	r3, r2
 8004af6:	eb42 0303 	adc.w	r3, r2, r3
 8004afa:	657b      	str	r3, [r7, #84]	; 0x54
 8004afc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b04:	f7fb fb68 	bl	80001d8 <__aeabi_uldivmod>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4b61      	ldr	r3, [pc, #388]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	011c      	lsls	r4, r3, #4
 8004b16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004b24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	464b      	mov	r3, r9
 8004b2c:	1891      	adds	r1, r2, r2
 8004b2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004b30:	415b      	adcs	r3, r3
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b38:	4641      	mov	r1, r8
 8004b3a:	eb12 0a01 	adds.w	sl, r2, r1
 8004b3e:	4649      	mov	r1, r9
 8004b40:	eb43 0b01 	adc.w	fp, r3, r1
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	f04f 0300 	mov.w	r3, #0
 8004b4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004b54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b58:	4692      	mov	sl, r2
 8004b5a:	469b      	mov	fp, r3
 8004b5c:	4643      	mov	r3, r8
 8004b5e:	eb1a 0303 	adds.w	r3, sl, r3
 8004b62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b66:	464b      	mov	r3, r9
 8004b68:	eb4b 0303 	adc.w	r3, fp, r3
 8004b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004b80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b84:	460b      	mov	r3, r1
 8004b86:	18db      	adds	r3, r3, r3
 8004b88:	643b      	str	r3, [r7, #64]	; 0x40
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	eb42 0303 	adc.w	r3, r2, r3
 8004b90:	647b      	str	r3, [r7, #68]	; 0x44
 8004b92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004b96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b9a:	f7fb fb1d 	bl	80001d8 <__aeabi_uldivmod>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4611      	mov	r1, r2
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004ba6:	fba3 2301 	umull	r2, r3, r3, r1
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2264      	movs	r2, #100	; 0x64
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	1acb      	subs	r3, r1, r3
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004bba:	4b36      	ldr	r3, [pc, #216]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004bbc:	fba3 2302 	umull	r2, r3, r3, r2
 8004bc0:	095b      	lsrs	r3, r3, #5
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004bc8:	441c      	add	r4, r3
 8004bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bd4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004bd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004bdc:	4642      	mov	r2, r8
 8004bde:	464b      	mov	r3, r9
 8004be0:	1891      	adds	r1, r2, r2
 8004be2:	63b9      	str	r1, [r7, #56]	; 0x38
 8004be4:	415b      	adcs	r3, r3
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004bec:	4641      	mov	r1, r8
 8004bee:	1851      	adds	r1, r2, r1
 8004bf0:	6339      	str	r1, [r7, #48]	; 0x30
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	414b      	adcs	r3, r1
 8004bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf8:	f04f 0200 	mov.w	r2, #0
 8004bfc:	f04f 0300 	mov.w	r3, #0
 8004c00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c04:	4659      	mov	r1, fp
 8004c06:	00cb      	lsls	r3, r1, #3
 8004c08:	4651      	mov	r1, sl
 8004c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c0e:	4651      	mov	r1, sl
 8004c10:	00ca      	lsls	r2, r1, #3
 8004c12:	4610      	mov	r0, r2
 8004c14:	4619      	mov	r1, r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	4642      	mov	r2, r8
 8004c1a:	189b      	adds	r3, r3, r2
 8004c1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c20:	464b      	mov	r3, r9
 8004c22:	460a      	mov	r2, r1
 8004c24:	eb42 0303 	adc.w	r3, r2, r3
 8004c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004c38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004c3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004c40:	460b      	mov	r3, r1
 8004c42:	18db      	adds	r3, r3, r3
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c46:	4613      	mov	r3, r2
 8004c48:	eb42 0303 	adc.w	r3, r2, r3
 8004c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004c52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004c56:	f7fb fabf 	bl	80001d8 <__aeabi_uldivmod>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004c60:	fba3 1302 	umull	r1, r3, r3, r2
 8004c64:	095b      	lsrs	r3, r3, #5
 8004c66:	2164      	movs	r1, #100	; 0x64
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	00db      	lsls	r3, r3, #3
 8004c70:	3332      	adds	r3, #50	; 0x32
 8004c72:	4a08      	ldr	r2, [pc, #32]	; (8004c94 <UART_SetConfig+0x2d4>)
 8004c74:	fba2 2303 	umull	r2, r3, r2, r3
 8004c78:	095b      	lsrs	r3, r3, #5
 8004c7a:	f003 0207 	and.w	r2, r3, #7
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4422      	add	r2, r4
 8004c86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004c88:	e105      	b.n	8004e96 <UART_SetConfig+0x4d6>
 8004c8a:	bf00      	nop
 8004c8c:	40011000 	.word	0x40011000
 8004c90:	40011400 	.word	0x40011400
 8004c94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ca2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ca6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004caa:	4642      	mov	r2, r8
 8004cac:	464b      	mov	r3, r9
 8004cae:	1891      	adds	r1, r2, r2
 8004cb0:	6239      	str	r1, [r7, #32]
 8004cb2:	415b      	adcs	r3, r3
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004cba:	4641      	mov	r1, r8
 8004cbc:	1854      	adds	r4, r2, r1
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	eb43 0501 	adc.w	r5, r3, r1
 8004cc4:	f04f 0200 	mov.w	r2, #0
 8004cc8:	f04f 0300 	mov.w	r3, #0
 8004ccc:	00eb      	lsls	r3, r5, #3
 8004cce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd2:	00e2      	lsls	r2, r4, #3
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	461d      	mov	r5, r3
 8004cd8:	4643      	mov	r3, r8
 8004cda:	18e3      	adds	r3, r4, r3
 8004cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ce0:	464b      	mov	r3, r9
 8004ce2:	eb45 0303 	adc.w	r3, r5, r3
 8004ce6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004cf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004cfa:	f04f 0200 	mov.w	r2, #0
 8004cfe:	f04f 0300 	mov.w	r3, #0
 8004d02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d06:	4629      	mov	r1, r5
 8004d08:	008b      	lsls	r3, r1, #2
 8004d0a:	4621      	mov	r1, r4
 8004d0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d10:	4621      	mov	r1, r4
 8004d12:	008a      	lsls	r2, r1, #2
 8004d14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d18:	f7fb fa5e 	bl	80001d8 <__aeabi_uldivmod>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4b60      	ldr	r3, [pc, #384]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004d22:	fba3 2302 	umull	r2, r3, r3, r2
 8004d26:	095b      	lsrs	r3, r3, #5
 8004d28:	011c      	lsls	r4, r3, #4
 8004d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004d34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004d38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	464b      	mov	r3, r9
 8004d40:	1891      	adds	r1, r2, r2
 8004d42:	61b9      	str	r1, [r7, #24]
 8004d44:	415b      	adcs	r3, r3
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004d4c:	4641      	mov	r1, r8
 8004d4e:	1851      	adds	r1, r2, r1
 8004d50:	6139      	str	r1, [r7, #16]
 8004d52:	4649      	mov	r1, r9
 8004d54:	414b      	adcs	r3, r1
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d64:	4659      	mov	r1, fp
 8004d66:	00cb      	lsls	r3, r1, #3
 8004d68:	4651      	mov	r1, sl
 8004d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d6e:	4651      	mov	r1, sl
 8004d70:	00ca      	lsls	r2, r1, #3
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	4603      	mov	r3, r0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	189b      	adds	r3, r3, r2
 8004d7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d80:	464b      	mov	r3, r9
 8004d82:	460a      	mov	r2, r1
 8004d84:	eb42 0303 	adc.w	r3, r2, r3
 8004d88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	f04f 0300 	mov.w	r3, #0
 8004da0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004da4:	4649      	mov	r1, r9
 8004da6:	008b      	lsls	r3, r1, #2
 8004da8:	4641      	mov	r1, r8
 8004daa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dae:	4641      	mov	r1, r8
 8004db0:	008a      	lsls	r2, r1, #2
 8004db2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004db6:	f7fb fa0f 	bl	80001d8 <__aeabi_uldivmod>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	2164      	movs	r1, #100	; 0x64
 8004dc8:	fb01 f303 	mul.w	r3, r1, r3
 8004dcc:	1ad3      	subs	r3, r2, r3
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	3332      	adds	r3, #50	; 0x32
 8004dd2:	4a34      	ldr	r2, [pc, #208]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dde:	441c      	add	r4, r3
 8004de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de4:	2200      	movs	r2, #0
 8004de6:	673b      	str	r3, [r7, #112]	; 0x70
 8004de8:	677a      	str	r2, [r7, #116]	; 0x74
 8004dea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004dee:	4642      	mov	r2, r8
 8004df0:	464b      	mov	r3, r9
 8004df2:	1891      	adds	r1, r2, r2
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	415b      	adcs	r3, r3
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dfe:	4641      	mov	r1, r8
 8004e00:	1851      	adds	r1, r2, r1
 8004e02:	6039      	str	r1, [r7, #0]
 8004e04:	4649      	mov	r1, r9
 8004e06:	414b      	adcs	r3, r1
 8004e08:	607b      	str	r3, [r7, #4]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e16:	4659      	mov	r1, fp
 8004e18:	00cb      	lsls	r3, r1, #3
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e20:	4651      	mov	r1, sl
 8004e22:	00ca      	lsls	r2, r1, #3
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	189b      	adds	r3, r3, r2
 8004e2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e30:	464b      	mov	r3, r9
 8004e32:	460a      	mov	r2, r1
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	663b      	str	r3, [r7, #96]	; 0x60
 8004e44:	667a      	str	r2, [r7, #100]	; 0x64
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004e52:	4649      	mov	r1, r9
 8004e54:	008b      	lsls	r3, r1, #2
 8004e56:	4641      	mov	r1, r8
 8004e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	008a      	lsls	r2, r1, #2
 8004e60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004e64:	f7fb f9b8 	bl	80001d8 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004e6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	2164      	movs	r1, #100	; 0x64
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	011b      	lsls	r3, r3, #4
 8004e7e:	3332      	adds	r3, #50	; 0x32
 8004e80:	4a08      	ldr	r2, [pc, #32]	; (8004ea4 <UART_SetConfig+0x4e4>)
 8004e82:	fba2 2303 	umull	r2, r3, r2, r3
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	f003 020f 	and.w	r2, r3, #15
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4422      	add	r2, r4
 8004e94:	609a      	str	r2, [r3, #8]
}
 8004e96:	bf00      	nop
 8004e98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ea2:	bf00      	nop
 8004ea4:	51eb851f 	.word	0x51eb851f

08004ea8 <__libc_init_array>:
 8004ea8:	b570      	push	{r4, r5, r6, lr}
 8004eaa:	4d0d      	ldr	r5, [pc, #52]	; (8004ee0 <__libc_init_array+0x38>)
 8004eac:	4c0d      	ldr	r4, [pc, #52]	; (8004ee4 <__libc_init_array+0x3c>)
 8004eae:	1b64      	subs	r4, r4, r5
 8004eb0:	10a4      	asrs	r4, r4, #2
 8004eb2:	2600      	movs	r6, #0
 8004eb4:	42a6      	cmp	r6, r4
 8004eb6:	d109      	bne.n	8004ecc <__libc_init_array+0x24>
 8004eb8:	4d0b      	ldr	r5, [pc, #44]	; (8004ee8 <__libc_init_array+0x40>)
 8004eba:	4c0c      	ldr	r4, [pc, #48]	; (8004eec <__libc_init_array+0x44>)
 8004ebc:	f000 f820 	bl	8004f00 <_init>
 8004ec0:	1b64      	subs	r4, r4, r5
 8004ec2:	10a4      	asrs	r4, r4, #2
 8004ec4:	2600      	movs	r6, #0
 8004ec6:	42a6      	cmp	r6, r4
 8004ec8:	d105      	bne.n	8004ed6 <__libc_init_array+0x2e>
 8004eca:	bd70      	pop	{r4, r5, r6, pc}
 8004ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed0:	4798      	blx	r3
 8004ed2:	3601      	adds	r6, #1
 8004ed4:	e7ee      	b.n	8004eb4 <__libc_init_array+0xc>
 8004ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eda:	4798      	blx	r3
 8004edc:	3601      	adds	r6, #1
 8004ede:	e7f2      	b.n	8004ec6 <__libc_init_array+0x1e>
 8004ee0:	08004f38 	.word	0x08004f38
 8004ee4:	08004f38 	.word	0x08004f38
 8004ee8:	08004f38 	.word	0x08004f38
 8004eec:	08004f3c 	.word	0x08004f3c

08004ef0 <memset>:
 8004ef0:	4402      	add	r2, r0
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d100      	bne.n	8004efa <memset+0xa>
 8004ef8:	4770      	bx	lr
 8004efa:	f803 1b01 	strb.w	r1, [r3], #1
 8004efe:	e7f9      	b.n	8004ef4 <memset+0x4>

08004f00 <_init>:
 8004f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f02:	bf00      	nop
 8004f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f06:	bc08      	pop	{r3}
 8004f08:	469e      	mov	lr, r3
 8004f0a:	4770      	bx	lr

08004f0c <_fini>:
 8004f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0e:	bf00      	nop
 8004f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f12:	bc08      	pop	{r3}
 8004f14:	469e      	mov	lr, r3
 8004f16:	4770      	bx	lr
